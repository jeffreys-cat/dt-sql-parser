// Generated from dt-sql-parser/src/grammar/doris/DorisParser.g4 by ANTLR 4.13.1

// @ts-nocheck

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { DorisParserListener } from "./DorisParserListener.js";
import { DorisParserVisitor } from "./DorisParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class DorisParser extends antlr.Parser {
    public static readonly SEMICOLON = 1;
    public static readonly LEFT_PAREN = 2;
    public static readonly RIGHT_PAREN = 3;
    public static readonly COMMA = 4;
    public static readonly DOT = 5;
    public static readonly DOTDOTDOT = 6;
    public static readonly LEFT_BRACKET = 7;
    public static readonly RIGHT_BRACKET = 8;
    public static readonly LEFT_BRACE = 9;
    public static readonly RIGHT_BRACE = 10;
    public static readonly ACCOUNT_LOCK = 11;
    public static readonly ACCOUNT_UNLOCK = 12;
    public static readonly ACTIONS = 13;
    public static readonly ADD = 14;
    public static readonly ADDDATE = 15;
    public static readonly ADMIN = 16;
    public static readonly AFTER = 17;
    public static readonly AGG_STATE = 18;
    public static readonly AGGREGATE = 19;
    public static readonly ALIAS = 20;
    public static readonly ALL = 21;
    public static readonly ALTER = 22;
    public static readonly ANALYZE = 23;
    public static readonly ANALYZED = 24;
    public static readonly AND = 25;
    public static readonly ANTI = 26;
    public static readonly APPEND = 27;
    public static readonly ARRAY = 28;
    public static readonly ARRAY_RANGE = 29;
    public static readonly AS = 30;
    public static readonly ASC = 31;
    public static readonly AT = 32;
    public static readonly AUTHORS = 33;
    public static readonly AUTO = 34;
    public static readonly AUTO_INCREMENT = 35;
    public static readonly ALWAYS = 36;
    public static readonly BACKEND = 37;
    public static readonly BACKENDS = 38;
    public static readonly BACKUP = 39;
    public static readonly BEGIN = 40;
    public static readonly BELONG = 41;
    public static readonly BETWEEN = 42;
    public static readonly BIGINT = 43;
    public static readonly BIN = 44;
    public static readonly BINARY = 45;
    public static readonly BINLOG = 46;
    public static readonly BITAND = 47;
    public static readonly BITMAP = 48;
    public static readonly BITMAP_EMPTY = 49;
    public static readonly BITMAP_UNION = 50;
    public static readonly BITOR = 51;
    public static readonly BITXOR = 52;
    public static readonly BLOB = 53;
    public static readonly BOOLEAN = 54;
    public static readonly BRIEF = 55;
    public static readonly BROKER = 56;
    public static readonly BUCKETS = 57;
    public static readonly BUILD = 58;
    public static readonly BUILTIN = 59;
    public static readonly BULK = 60;
    public static readonly BY = 61;
    public static readonly CACHE = 62;
    public static readonly CACHED = 63;
    public static readonly CALL = 64;
    public static readonly CANCEL = 65;
    public static readonly CASE = 66;
    public static readonly CAST = 67;
    public static readonly CATALOG = 68;
    public static readonly CATALOGS = 69;
    public static readonly CHAIN = 70;
    public static readonly CHAR = 71;
    public static readonly CHARSET = 72;
    public static readonly CHECK = 73;
    public static readonly CLEAN = 74;
    public static readonly CLUSTER = 75;
    public static readonly CLUSTERS = 76;
    public static readonly COLLATE = 77;
    public static readonly COLLATION = 78;
    public static readonly COLLECT = 79;
    public static readonly COLOCATE = 80;
    public static readonly COLUMN = 81;
    public static readonly COLUMNS = 82;
    public static readonly COMMENT = 83;
    public static readonly COMMIT = 84;
    public static readonly COMMITTED = 85;
    public static readonly COMPACT = 86;
    public static readonly COMPLETE = 87;
    public static readonly COMPRESS_TYPE = 88;
    public static readonly COMPUTE = 89;
    public static readonly CONDITIONS = 90;
    public static readonly CONFIG = 91;
    public static readonly CONNECTION = 92;
    public static readonly CONNECTION_ID = 93;
    public static readonly CONSISTENT = 94;
    public static readonly CONSTRAINT = 95;
    public static readonly CONSTRAINTS = 96;
    public static readonly CONVERT = 97;
    public static readonly CONVERT_LSC = 98;
    public static readonly COPY = 99;
    public static readonly COUNT = 100;
    public static readonly CREATE = 101;
    public static readonly CREATION = 102;
    public static readonly CRON = 103;
    public static readonly CROSS = 104;
    public static readonly CUBE = 105;
    public static readonly CURRENT = 106;
    public static readonly CURRENT_CATALOG = 107;
    public static readonly CURRENT_DATE = 108;
    public static readonly CURRENT_TIME = 109;
    public static readonly CURRENT_TIMESTAMP = 110;
    public static readonly CURRENT_USER = 111;
    public static readonly DATA = 112;
    public static readonly DATABASE = 113;
    public static readonly DATABASES = 114;
    public static readonly DATE = 115;
    public static readonly DATE_ADD = 116;
    public static readonly DATE_CEIL = 117;
    public static readonly DATE_DIFF = 118;
    public static readonly DATE_FLOOR = 119;
    public static readonly DATE_SUB = 120;
    public static readonly DATEADD = 121;
    public static readonly DATEDIFF = 122;
    public static readonly DATETIME = 123;
    public static readonly DATETIMEV2 = 124;
    public static readonly DATEV2 = 125;
    public static readonly DATETIMEV1 = 126;
    public static readonly DATEV1 = 127;
    public static readonly DAY = 128;
    public static readonly DAYS_ADD = 129;
    public static readonly DAYS_SUB = 130;
    public static readonly DECIMAL = 131;
    public static readonly DECIMALV2 = 132;
    public static readonly DECIMALV3 = 133;
    public static readonly DECOMMISSION = 134;
    public static readonly DEFAULT = 135;
    public static readonly DEFERRED = 136;
    public static readonly DELETE = 137;
    public static readonly DEMAND = 138;
    public static readonly DESC = 139;
    public static readonly DESCRIBE = 140;
    public static readonly DIAGNOSE = 141;
    public static readonly DIAGNOSIS = 142;
    public static readonly DISK = 143;
    public static readonly DISTINCT = 144;
    public static readonly DISTINCTPC = 145;
    public static readonly DISTINCTPCSA = 146;
    public static readonly DISTRIBUTED = 147;
    public static readonly DISTRIBUTION = 148;
    public static readonly DIV = 149;
    public static readonly DO = 150;
    public static readonly DORIS_INTERNAL_TABLE_ID = 151;
    public static readonly DOUBLE = 152;
    public static readonly DROP = 153;
    public static readonly DROPP = 154;
    public static readonly DUAL = 155;
    public static readonly DUMP = 156;
    public static readonly DUPLICATE = 157;
    public static readonly DYNAMIC = 158;
    public static readonly E = 159;
    public static readonly ELSE = 160;
    public static readonly ENABLE = 161;
    public static readonly ENCRYPTKEY = 162;
    public static readonly ENCRYPTKEYS = 163;
    public static readonly END = 164;
    public static readonly ENDS = 165;
    public static readonly ENGINE = 166;
    public static readonly ENGINES = 167;
    public static readonly ENTER = 168;
    public static readonly ERRORS = 169;
    public static readonly EVENTS = 170;
    public static readonly EVERY = 171;
    public static readonly EXCEPT = 172;
    public static readonly EXCLUDE = 173;
    public static readonly EXECUTE = 174;
    public static readonly EXISTS = 175;
    public static readonly EXPIRED = 176;
    public static readonly EXPLAIN = 177;
    public static readonly EXPORT = 178;
    public static readonly EXTENDED = 179;
    public static readonly EXTERNAL = 180;
    public static readonly EXTRACT = 181;
    public static readonly FAILED_LOGIN_ATTEMPTS = 182;
    public static readonly FALSE = 183;
    public static readonly FAST = 184;
    public static readonly FEATURE = 185;
    public static readonly FIELDS = 186;
    public static readonly FILE = 187;
    public static readonly FILTER = 188;
    public static readonly FIRST = 189;
    public static readonly FLOAT = 190;
    public static readonly FOLLOWER = 191;
    public static readonly FOLLOWING = 192;
    public static readonly FOR = 193;
    public static readonly FOREIGN = 194;
    public static readonly FORCE = 195;
    public static readonly FORMAT = 196;
    public static readonly FREE = 197;
    public static readonly FROM = 198;
    public static readonly FRONTEND = 199;
    public static readonly FRONTENDS = 200;
    public static readonly FULL = 201;
    public static readonly FUNCTION = 202;
    public static readonly FUNCTIONS = 203;
    public static readonly GENERATED = 204;
    public static readonly GENERIC = 205;
    public static readonly GLOBAL = 206;
    public static readonly GRANT = 207;
    public static readonly GRANTS = 208;
    public static readonly GRAPH = 209;
    public static readonly GROUP = 210;
    public static readonly GROUPING = 211;
    public static readonly GROUPS = 212;
    public static readonly HASH = 213;
    public static readonly HAVING = 214;
    public static readonly HDFS = 215;
    public static readonly HELP = 216;
    public static readonly HISTOGRAM = 217;
    public static readonly HLL = 218;
    public static readonly HLL_UNION = 219;
    public static readonly HOSTNAME = 220;
    public static readonly HOTSPOT = 221;
    public static readonly HOUR = 222;
    public static readonly HUB = 223;
    public static readonly IDENTIFIED = 224;
    public static readonly IF = 225;
    public static readonly IGNORE = 226;
    public static readonly IMMEDIATE = 227;
    public static readonly IN = 228;
    public static readonly INCREMENTAL = 229;
    public static readonly INDEX = 230;
    public static readonly INDEXES = 231;
    public static readonly INFILE = 232;
    public static readonly INNER = 233;
    public static readonly INSERT = 234;
    public static readonly INSTALL = 235;
    public static readonly INT = 236;
    public static readonly INTEGER = 237;
    public static readonly INTERMEDIATE = 238;
    public static readonly INTERSECT = 239;
    public static readonly INTERVAL = 240;
    public static readonly INTO = 241;
    public static readonly INVERTED = 242;
    public static readonly IPV4 = 243;
    public static readonly IPV6 = 244;
    public static readonly IS = 245;
    public static readonly IS_NOT_NULL_PRED = 246;
    public static readonly IS_NULL_PRED = 247;
    public static readonly ISNULL = 248;
    public static readonly ISOLATION = 249;
    public static readonly JOB = 250;
    public static readonly JOBS = 251;
    public static readonly JOIN = 252;
    public static readonly JSON = 253;
    public static readonly JSONB = 254;
    public static readonly KEY = 255;
    public static readonly KEYS = 256;
    public static readonly KILL = 257;
    public static readonly LABEL = 258;
    public static readonly LARGEINT = 259;
    public static readonly LAST = 260;
    public static readonly LATERAL = 261;
    public static readonly LDAP = 262;
    public static readonly LDAP_ADMIN_PASSWORD = 263;
    public static readonly LEFT = 264;
    public static readonly LESS = 265;
    public static readonly LEVEL = 266;
    public static readonly LIKE = 267;
    public static readonly LIMIT = 268;
    public static readonly LINES = 269;
    public static readonly LINK = 270;
    public static readonly LIST = 271;
    public static readonly LOAD = 272;
    public static readonly LOCAL = 273;
    public static readonly LOCALTIME = 274;
    public static readonly LOCALTIMESTAMP = 275;
    public static readonly LOCATION = 276;
    public static readonly LOCK = 277;
    public static readonly LOGICAL = 278;
    public static readonly LOW_PRIORITY = 279;
    public static readonly MANUAL = 280;
    public static readonly MAP = 281;
    public static readonly MATCH = 282;
    public static readonly MATCH_ALL = 283;
    public static readonly MATCH_ANY = 284;
    public static readonly MATCH_PHRASE = 285;
    public static readonly MATCH_PHRASE_EDGE = 286;
    public static readonly MATCH_PHRASE_PREFIX = 287;
    public static readonly MATCH_REGEXP = 288;
    public static readonly MATERIALIZED = 289;
    public static readonly MAX = 290;
    public static readonly MAXVALUE = 291;
    public static readonly MEMO = 292;
    public static readonly MERGE = 293;
    public static readonly MIGRATE = 294;
    public static readonly MIGRATIONS = 295;
    public static readonly MIN = 296;
    public static readonly MINUS = 297;
    public static readonly MINUTE = 298;
    public static readonly MODIFY = 299;
    public static readonly MONTH = 300;
    public static readonly MTMV = 301;
    public static readonly NAME = 302;
    public static readonly NAMES = 303;
    public static readonly NATURAL = 304;
    public static readonly NEGATIVE = 305;
    public static readonly NEVER = 306;
    public static readonly NEXT = 307;
    public static readonly NGRAM_BF = 308;
    public static readonly NO = 309;
    public static readonly NON_NULLABLE = 310;
    public static readonly NOT = 311;
    public static readonly NULL = 312;
    public static readonly NULLS = 313;
    public static readonly OBSERVER = 314;
    public static readonly OF = 315;
    public static readonly OFFSET = 316;
    public static readonly ON = 317;
    public static readonly ONLY = 318;
    public static readonly OPEN = 319;
    public static readonly OPTIMIZED = 320;
    public static readonly OR = 321;
    public static readonly ORDER = 322;
    public static readonly OUTER = 323;
    public static readonly OUTFILE = 324;
    public static readonly OVER = 325;
    public static readonly OVERWRITE = 326;
    public static readonly PARAMETER = 327;
    public static readonly PARSED = 328;
    public static readonly PARTITION = 329;
    public static readonly PARTITIONS = 330;
    public static readonly PASSWORD = 331;
    public static readonly PASSWORD_EXPIRE = 332;
    public static readonly PASSWORD_HISTORY = 333;
    public static readonly PASSWORD_LOCK_TIME = 334;
    public static readonly PASSWORD_REUSE = 335;
    public static readonly PATH = 336;
    public static readonly PAUSE = 337;
    public static readonly PERCENT = 338;
    public static readonly PERIOD = 339;
    public static readonly PERMISSIVE = 340;
    public static readonly PHYSICAL = 341;
    public static readonly PI = 342;
    public static readonly PLACEHOLDER = 343;
    public static readonly PLAN = 344;
    public static readonly PLAY = 345;
    public static readonly PRIVILEGES = 346;
    public static readonly PROCESS = 347;
    public static readonly PLUGIN = 348;
    public static readonly PLUGINS = 349;
    public static readonly POLICY = 350;
    public static readonly PRECEDING = 351;
    public static readonly PREPARE = 352;
    public static readonly PRIMARY = 353;
    public static readonly PROC = 354;
    public static readonly PROCEDURE = 355;
    public static readonly PROCESSLIST = 356;
    public static readonly PROFILE = 357;
    public static readonly PROPERTIES = 358;
    public static readonly PROPERTY = 359;
    public static readonly QUANTILE_STATE = 360;
    public static readonly QUANTILE_UNION = 361;
    public static readonly QUERY = 362;
    public static readonly QUOTA = 363;
    public static readonly QUALIFY = 364;
    public static readonly RANDOM = 365;
    public static readonly RANGE = 366;
    public static readonly READ = 367;
    public static readonly REAL = 368;
    public static readonly REBALANCE = 369;
    public static readonly RECENT = 370;
    public static readonly RECOVER = 371;
    public static readonly RECYCLE = 372;
    public static readonly REFRESH = 373;
    public static readonly REFERENCES = 374;
    public static readonly REGEXP = 375;
    public static readonly RELEASE = 376;
    public static readonly RENAME = 377;
    public static readonly REPAIR = 378;
    public static readonly REPEATABLE = 379;
    public static readonly REPLACE = 380;
    public static readonly REPLACE_IF_NOT_NULL = 381;
    public static readonly REPLAYER = 382;
    public static readonly REPLICA = 383;
    public static readonly REPOSITORIES = 384;
    public static readonly REPOSITORY = 385;
    public static readonly RESOURCE = 386;
    public static readonly RESOURCES = 387;
    public static readonly RESTORE = 388;
    public static readonly RESTRICTIVE = 389;
    public static readonly RESUME = 390;
    public static readonly RETURNS = 391;
    public static readonly REVOKE = 392;
    public static readonly REWRITTEN = 393;
    public static readonly RIGHT = 394;
    public static readonly RLIKE = 395;
    public static readonly ROLE = 396;
    public static readonly ROLES = 397;
    public static readonly ROLLBACK = 398;
    public static readonly ROLLUP = 399;
    public static readonly ROUTINE = 400;
    public static readonly ROW = 401;
    public static readonly ROWS = 402;
    public static readonly S3 = 403;
    public static readonly SAMPLE = 404;
    public static readonly SCHEDULE = 405;
    public static readonly SCHEDULER = 406;
    public static readonly SCHEMA = 407;
    public static readonly SCHEMAS = 408;
    public static readonly SECOND = 409;
    public static readonly SELECT = 410;
    public static readonly SEMI = 411;
    public static readonly SEQUENCE = 412;
    public static readonly SERIALIZABLE = 413;
    public static readonly SESSION = 414;
    public static readonly SESSION_USER = 415;
    public static readonly SET = 416;
    public static readonly SETS = 417;
    public static readonly SET_SESSION_VARIABLE = 418;
    public static readonly SHAPE = 419;
    public static readonly SHOW = 420;
    public static readonly SIGNED = 421;
    public static readonly SKEW = 422;
    public static readonly SMALLINT = 423;
    public static readonly SNAPSHOT = 424;
    public static readonly SONAME = 425;
    public static readonly SPLIT = 426;
    public static readonly SQL = 427;
    public static readonly SQL_BLOCK_RULE = 428;
    public static readonly STAGE = 429;
    public static readonly STAGES = 430;
    public static readonly START = 431;
    public static readonly STARTS = 432;
    public static readonly STATS = 433;
    public static readonly STATUS = 434;
    public static readonly STOP = 435;
    public static readonly STORAGE = 436;
    public static readonly STREAM = 437;
    public static readonly STREAMING = 438;
    public static readonly STRING = 439;
    public static readonly STRUCT = 440;
    public static readonly SUBDATE = 441;
    public static readonly SUM = 442;
    public static readonly SUPERUSER = 443;
    public static readonly SWITCH = 444;
    public static readonly SYNC = 445;
    public static readonly SYSTEM = 446;
    public static readonly TABLE = 447;
    public static readonly TABLES = 448;
    public static readonly TABLESAMPLE = 449;
    public static readonly TABLET = 450;
    public static readonly TABLETS = 451;
    public static readonly TASK = 452;
    public static readonly TASKS = 453;
    public static readonly TEMPORARY = 454;
    public static readonly TERMINATED = 455;
    public static readonly TEXT = 456;
    public static readonly THAN = 457;
    public static readonly THEN = 458;
    public static readonly TIME = 459;
    public static readonly TIMESTAMP = 460;
    public static readonly TIMESTAMPADD = 461;
    public static readonly TIMESTAMPDIFF = 462;
    public static readonly TINYINT = 463;
    public static readonly TO = 464;
    public static readonly TRANSACTION = 465;
    public static readonly TRASH = 466;
    public static readonly TREE = 467;
    public static readonly TRIGGERS = 468;
    public static readonly TRIM = 469;
    public static readonly TRUE = 470;
    public static readonly TRUNCATE = 471;
    public static readonly TYPE = 472;
    public static readonly TYPECAST = 473;
    public static readonly TYPES = 474;
    public static readonly UNBOUNDED = 475;
    public static readonly UNCOMMITTED = 476;
    public static readonly UNINSTALL = 477;
    public static readonly UNION = 478;
    public static readonly UNIQUE = 479;
    public static readonly UNLOCK = 480;
    public static readonly UNSET = 481;
    public static readonly UNSIGNED = 482;
    public static readonly UP = 483;
    public static readonly UPDATE = 484;
    public static readonly USE = 485;
    public static readonly USER = 486;
    public static readonly USING = 487;
    public static readonly VALUE = 488;
    public static readonly VALUES = 489;
    public static readonly VARCHAR = 490;
    public static readonly VARIABLE = 491;
    public static readonly VARIABLES = 492;
    public static readonly VARIANT = 493;
    public static readonly VAULT = 494;
    public static readonly VAULTS = 495;
    public static readonly VERBOSE = 496;
    public static readonly VERSION = 497;
    public static readonly VIEW = 498;
    public static readonly VIEWS = 499;
    public static readonly WARM = 500;
    public static readonly WARNINGS = 501;
    public static readonly WEEK = 502;
    public static readonly WHEN = 503;
    public static readonly WHERE = 504;
    public static readonly WHITELIST = 505;
    public static readonly WITH = 506;
    public static readonly WORK = 507;
    public static readonly WORKLOAD = 508;
    public static readonly WRITE = 509;
    public static readonly XOR = 510;
    public static readonly YEAR = 511;
    public static readonly EQ = 512;
    public static readonly NSEQ = 513;
    public static readonly NEQ = 514;
    public static readonly LT = 515;
    public static readonly LTE = 516;
    public static readonly GT = 517;
    public static readonly GTE = 518;
    public static readonly PLUS = 519;
    public static readonly SUBTRACT = 520;
    public static readonly ASTERISK = 521;
    public static readonly SLASH = 522;
    public static readonly MOD = 523;
    public static readonly TILDE = 524;
    public static readonly AMPERSAND = 525;
    public static readonly LOGICALAND = 526;
    public static readonly LOGICALNOT = 527;
    public static readonly PIPE = 528;
    public static readonly DOUBLEPIPES = 529;
    public static readonly HAT = 530;
    public static readonly COLON = 531;
    public static readonly ARROW = 532;
    public static readonly HINT_START = 533;
    public static readonly HINT_END = 534;
    public static readonly COMMENT_START = 535;
    public static readonly ATSIGN = 536;
    public static readonly DOUBLEATSIGN = 537;
    public static readonly STRING_LITERAL = 538;
    public static readonly LEADING_STRING = 539;
    public static readonly BIGINT_LITERAL = 540;
    public static readonly SMALLINT_LITERAL = 541;
    public static readonly TINYINT_LITERAL = 542;
    public static readonly INTEGER_VALUE = 543;
    public static readonly EXPONENT_VALUE = 544;
    public static readonly DECIMAL_VALUE = 545;
    public static readonly BIGDECIMAL_LITERAL = 546;
    public static readonly IDENTIFIER = 547;
    public static readonly BACKQUOTED_IDENTIFIER = 548;
    public static readonly SIMPLE_COMMENT = 549;
    public static readonly BRACKETED_COMMENT = 550;
    public static readonly FROM_DUAL = 551;
    public static readonly WS = 552;
    public static readonly UNRECOGNIZED = 553;
    public static readonly RULE_program = 0;
    public static readonly RULE_multiStatements = 1;
    public static readonly RULE_singleStatement = 2;
    public static readonly RULE_statement = 3;
    public static readonly RULE_statementBase = 4;
    public static readonly RULE_unsupportedStatement = 5;
    public static readonly RULE_materializedViewStatement = 6;
    public static readonly RULE_supportedJobStatement = 7;
    public static readonly RULE_constraintStatement = 8;
    public static readonly RULE_supportedDmlStatement = 9;
    public static readonly RULE_supportedCreateStatement = 10;
    public static readonly RULE_supportedAlterStatement = 11;
    public static readonly RULE_supportedDropStatement = 12;
    public static readonly RULE_supportedShowStatement = 13;
    public static readonly RULE_supportedLoadStatement = 14;
    public static readonly RULE_unsupportedOtherStatement = 15;
    public static readonly RULE_warmUpItem = 16;
    public static readonly RULE_lockTable = 17;
    public static readonly RULE_unsupportedShowStatement = 18;
    public static readonly RULE_createRoutineLoad = 19;
    public static readonly RULE_unsupportedLoadStatement = 20;
    public static readonly RULE_loadProperty = 21;
    public static readonly RULE_importSequenceStatement = 22;
    public static readonly RULE_importDeleteOnStatement = 23;
    public static readonly RULE_importWhereStatement = 24;
    public static readonly RULE_importPrecedingFilterStatement = 25;
    public static readonly RULE_importColumnsStatement = 26;
    public static readonly RULE_importColumnDesc = 27;
    public static readonly RULE_channelDescriptions = 28;
    public static readonly RULE_channelDescription = 29;
    public static readonly RULE_supportedRefreshStatement = 30;
    public static readonly RULE_supportedCleanStatement = 31;
    public static readonly RULE_unsupportedRefreshStatement = 32;
    public static readonly RULE_unsupportedCleanStatement = 33;
    public static readonly RULE_supportedCancelStatement = 34;
    public static readonly RULE_unsupportedCancelStatement = 35;
    public static readonly RULE_supportedAdminStatement = 36;
    public static readonly RULE_supportedRecoverStatement = 37;
    public static readonly RULE_unsupportedAdminStatement = 38;
    public static readonly RULE_baseTableRef = 39;
    public static readonly RULE_wildWhere = 40;
    public static readonly RULE_unsupportedTransactionStatement = 41;
    public static readonly RULE_unsupportedGrantRevokeStatement = 42;
    public static readonly RULE_privilege = 43;
    public static readonly RULE_privilegeList = 44;
    public static readonly RULE_unsupportedAlterStatement = 45;
    public static readonly RULE_alterSystemClause = 46;
    public static readonly RULE_dropRollupClause = 47;
    public static readonly RULE_addRollupClause = 48;
    public static readonly RULE_alterTableClause = 49;
    public static readonly RULE_columnPosition = 50;
    public static readonly RULE_toRollup = 51;
    public static readonly RULE_fromRollup = 52;
    public static readonly RULE_unsupportedDropStatement = 53;
    public static readonly RULE_unsupportedStatsStatement = 54;
    public static readonly RULE_analyzeProperties = 55;
    public static readonly RULE_unsupportedCreateStatement = 56;
    public static readonly RULE_workloadPolicyActions = 57;
    public static readonly RULE_workloadPolicyAction = 58;
    public static readonly RULE_workloadPolicyConditions = 59;
    public static readonly RULE_workloadPolicyCondition = 60;
    public static readonly RULE_storageBackend = 61;
    public static readonly RULE_passwordOption = 62;
    public static readonly RULE_functionArguments = 63;
    public static readonly RULE_functionArgument = 64;
    public static readonly RULE_supportedSetStatement = 65;
    public static readonly RULE_optionWithType = 66;
    public static readonly RULE_optionWithoutType = 67;
    public static readonly RULE_variable = 68;
    public static readonly RULE_transactionAccessMode = 69;
    public static readonly RULE_isolationLevel = 70;
    public static readonly RULE_supportedUnsetStatement = 71;
    public static readonly RULE_unsupportedUseStatement = 72;
    public static readonly RULE_unsupportedDmlStatement = 73;
    public static readonly RULE_stageAndPattern = 74;
    public static readonly RULE_unsupportedKillStatement = 75;
    public static readonly RULE_unsupportedDescribeStatement = 76;
    public static readonly RULE_constraint = 77;
    public static readonly RULE_partitionSpec = 78;
    public static readonly RULE_partitionTable = 79;
    public static readonly RULE_identityOrFunctionList = 80;
    public static readonly RULE_identityOrFunction = 81;
    public static readonly RULE_dataDesc = 82;
    public static readonly RULE_buildMode = 83;
    public static readonly RULE_refreshTrigger = 84;
    public static readonly RULE_refreshSchedule = 85;
    public static readonly RULE_refreshMethod = 86;
    public static readonly RULE_mvPartition = 87;
    public static readonly RULE_identifierOrText = 88;
    public static readonly RULE_identifierOrTextOrAsterisk = 89;
    public static readonly RULE_multipartIdentifierOrAsterisk = 90;
    public static readonly RULE_identifierOrAsterisk = 91;
    public static readonly RULE_userIdentify = 92;
    public static readonly RULE_grantUserIdentify = 93;
    public static readonly RULE_explain = 94;
    public static readonly RULE_explainCommand = 95;
    public static readonly RULE_planType = 96;
    public static readonly RULE_replayCommand = 97;
    public static readonly RULE_replayType = 98;
    public static readonly RULE_mergeType = 99;
    public static readonly RULE_preFilterClause = 100;
    public static readonly RULE_deleteOnClause = 101;
    public static readonly RULE_sequenceColClause = 102;
    public static readonly RULE_colFromPath = 103;
    public static readonly RULE_colMappingList = 104;
    public static readonly RULE_mappingExpr = 105;
    public static readonly RULE_withRemoteStorageSystem = 106;
    public static readonly RULE_resourceDesc = 107;
    public static readonly RULE_mysqlDataDesc = 108;
    public static readonly RULE_skipLines = 109;
    public static readonly RULE_outFileClause = 110;
    public static readonly RULE_query = 111;
    public static readonly RULE_queryTerm = 112;
    public static readonly RULE_setQuantifier = 113;
    public static readonly RULE_queryPrimary = 114;
    public static readonly RULE_querySpecification = 115;
    public static readonly RULE_cte = 116;
    public static readonly RULE_aliasQuery = 117;
    public static readonly RULE_columnAliases = 118;
    public static readonly RULE_selectClause = 119;
    public static readonly RULE_selectColumnClause = 120;
    public static readonly RULE_whereClause = 121;
    public static readonly RULE_fromClause = 122;
    public static readonly RULE_intoClause = 123;
    public static readonly RULE_bulkCollectClause = 124;
    public static readonly RULE_tableRow = 125;
    public static readonly RULE_relations = 126;
    public static readonly RULE_relation = 127;
    public static readonly RULE_joinRelation = 128;
    public static readonly RULE_distributeType = 129;
    public static readonly RULE_relationHint = 130;
    public static readonly RULE_aggClause = 131;
    public static readonly RULE_groupingElement = 132;
    public static readonly RULE_groupingSet = 133;
    public static readonly RULE_havingClause = 134;
    public static readonly RULE_qualifyClause = 135;
    public static readonly RULE_selectHint = 136;
    public static readonly RULE_hintStatement = 137;
    public static readonly RULE_hintAssignment = 138;
    public static readonly RULE_updateAssignment = 139;
    public static readonly RULE_updateAssignmentSeq = 140;
    public static readonly RULE_lateralView = 141;
    public static readonly RULE_queryOrganization = 142;
    public static readonly RULE_sortClause = 143;
    public static readonly RULE_sortItem = 144;
    public static readonly RULE_limitClause = 145;
    public static readonly RULE_partitionClause = 146;
    public static readonly RULE_joinType = 147;
    public static readonly RULE_joinCriteria = 148;
    public static readonly RULE_identifierList = 149;
    public static readonly RULE_identifierSeq = 150;
    public static readonly RULE_optScanParams = 151;
    public static readonly RULE_relationPrimary = 152;
    public static readonly RULE_materializedViewName = 153;
    public static readonly RULE_propertyClause = 154;
    public static readonly RULE_propertyItemList = 155;
    public static readonly RULE_propertyItem = 156;
    public static readonly RULE_propertyKey = 157;
    public static readonly RULE_propertyValue = 158;
    public static readonly RULE_tableAlias = 159;
    public static readonly RULE_multipartIdentifier = 160;
    public static readonly RULE_simpleColumnDefs = 161;
    public static readonly RULE_simpleColumnDef = 162;
    public static readonly RULE_columnDefs = 163;
    public static readonly RULE_columnDef = 164;
    public static readonly RULE_indexDefs = 165;
    public static readonly RULE_indexDef = 166;
    public static readonly RULE_partitionsDef = 167;
    public static readonly RULE_partitionDef = 168;
    public static readonly RULE_lessThanPartitionDef = 169;
    public static readonly RULE_fixedPartitionDef = 170;
    public static readonly RULE_stepPartitionDef = 171;
    public static readonly RULE_inPartitionDef = 172;
    public static readonly RULE_partitionValueList = 173;
    public static readonly RULE_partitionValueDef = 174;
    public static readonly RULE_rollupDefs = 175;
    public static readonly RULE_rollupDef = 176;
    public static readonly RULE_aggTypeDef = 177;
    public static readonly RULE_tabletList = 178;
    public static readonly RULE_inlineTable = 179;
    public static readonly RULE_namedExpression = 180;
    public static readonly RULE_namedExpressionSeq = 181;
    public static readonly RULE_expression = 182;
    public static readonly RULE_lambdaExpression = 183;
    public static readonly RULE_booleanExpression = 184;
    public static readonly RULE_rowConstructor = 185;
    public static readonly RULE_rowConstructorItem = 186;
    public static readonly RULE_predicate = 187;
    public static readonly RULE_valueExpression = 188;
    public static readonly RULE_datetimeUnit = 189;
    public static readonly RULE_primaryExpression = 190;
    public static readonly RULE_exceptOrReplace = 191;
    public static readonly RULE_castDataType = 192;
    public static readonly RULE_functionCallExpression = 193;
    public static readonly RULE_functionIdentifier = 194;
    public static readonly RULE_functionNameIdentifier = 195;
    public static readonly RULE_windowSpec = 196;
    public static readonly RULE_windowFrame = 197;
    public static readonly RULE_frameUnits = 198;
    public static readonly RULE_frameBoundary = 199;
    public static readonly RULE_qualifiedName = 200;
    public static readonly RULE_specifiedPartition = 201;
    public static readonly RULE_constant = 202;
    public static readonly RULE_comparisonOperator = 203;
    public static readonly RULE_booleanValue = 204;
    public static readonly RULE_whenClause = 205;
    public static readonly RULE_interval = 206;
    public static readonly RULE_unitIdentifier = 207;
    public static readonly RULE_dataTypeWithNullable = 208;
    public static readonly RULE_dataType = 209;
    public static readonly RULE_primitiveColType = 210;
    public static readonly RULE_complexColTypeList = 211;
    public static readonly RULE_complexColType = 212;
    public static readonly RULE_commentSpec = 213;
    public static readonly RULE_sample = 214;
    public static readonly RULE_sampleMethod = 215;
    public static readonly RULE_tableSnapshot = 216;
    public static readonly RULE_errorCapturingIdentifier = 217;
    public static readonly RULE_errorCapturingIdentifierExtra = 218;
    public static readonly RULE_identifier = 219;
    public static readonly RULE_strictIdentifier = 220;
    public static readonly RULE_quotedIdentifier = 221;
    public static readonly RULE_number = 222;
    public static readonly RULE_nonReserved = 223;

    public static readonly literalNames = [
        null, "';'", "'('", "')'", "','", "'.'", "'...'", "'['", "']'", 
        "'{'", "'}'", "'ACCOUNT_LOCK'", "'ACCOUNT_UNLOCK'", "'ACTIONS'", 
        "'ADD'", "'ADDDATE'", "'ADMIN'", "'AFTER'", "'AGG_STATE'", "'AGGREGATE'", 
        "'ALIAS'", "'ALL'", "'ALTER'", "'ANALYZE'", "'ANALYZED'", "'AND'", 
        "'ANTI'", "'APPEND'", "'ARRAY'", "'ARRAY_RANGE'", "'AS'", "'ASC'", 
        "'AT'", "'AUTHORS'", "'AUTO'", "'AUTO_INCREMENT'", "'ALWAYS'", "'BACKEND'", 
        "'BACKENDS'", "'BACKUP'", "'BEGIN'", "'BELONG'", "'BETWEEN'", "'BIGINT'", 
        "'BIN'", "'BINARY'", "'BINLOG'", "'BITAND'", "'BITMAP'", "'BITMAP_EMPTY'", 
        "'BITMAP_UNION'", "'BITOR'", "'BITXOR'", "'BLOB'", "'BOOLEAN'", 
        "'BRIEF'", "'BROKER'", "'BUCKETS'", "'BUILD'", "'BUILTIN'", "'BULK'", 
        "'BY'", "'CACHE'", "'CACHED'", "'CALL'", "'CANCEL'", "'CASE'", "'CAST'", 
        "'CATALOG'", "'CATALOGS'", "'CHAIN'", null, "'CHARSET'", "'CHECK'", 
        "'CLEAN'", "'CLUSTER'", "'CLUSTERS'", "'COLLATE'", "'COLLATION'", 
        "'COLLECT'", "'COLOCATE'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
        "'COMMIT'", "'COMMITTED'", "'COMPACT'", "'COMPLETE'", "'COMPRESS_TYPE'", 
        "'COMPUTE'", "'CONDITIONS'", "'CONFIG'", "'CONNECTION'", "'CONNECTION_ID'", 
        "'CONSISTENT'", "'CONSTRAINT'", "'CONSTRAINTS'", "'CONVERT'", "'CONVERT_LIGHT_SCHEMA_CHANGE_PROCESS'", 
        "'COPY'", "'COUNT'", "'CREATE'", "'CREATION'", "'CRON'", "'CROSS'", 
        "'CUBE'", "'CURRENT'", "'CURRENT_CATALOG'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", "'DATABASE'", 
        "'DATABASES'", "'DATE'", "'DATE_ADD'", "'DATE_CEIL'", "'DATE_DIFF'", 
        "'DATE_FLOOR'", "'DATE_SUB'", "'DATEADD'", "'DATEDIFF'", "'DATETIME'", 
        "'DATETIMEV2'", "'DATEV2'", "'DATETIMEV1'", "'DATEV1'", "'DAY'", 
        "'DAYS_ADD'", "'DAYS_SUB'", "'DECIMAL'", "'DECIMALV2'", "'DECIMALV3'", 
        "'DECOMMISSION'", "'DEFAULT'", "'DEFERRED'", "'DELETE'", "'DEMAND'", 
        "'DESC'", "'DESCRIBE'", "'DIAGNOSE'", "'DIAGNOSIS'", "'DISK'", "'DISTINCT'", 
        "'DISTINCTPC'", "'DISTINCTPCSA'", "'DISTRIBUTED'", "'DISTRIBUTION'", 
        "'DIV'", "'DO'", "'DORIS_INTERNAL_TABLE_ID'", "'DOUBLE'", "'DROP'", 
        "'DROPP'", "'DUAL'", "'DUMP'", "'DUPLICATE'", "'DYNAMIC'", "'E'", 
        "'ELSE'", "'ENABLE'", "'ENCRYPTKEY'", "'ENCRYPTKEYS'", "'END'", 
        "'ENDS'", "'ENGINE'", "'ENGINES'", "'ENTER'", "'ERRORS'", "'EVENTS'", 
        "'EVERY'", "'EXCEPT'", "'EXCLUDE'", "'EXECUTE'", "'EXISTS'", "'EXPIRED'", 
        "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", 
        "'FAILED_LOGIN_ATTEMPTS'", "'FALSE'", "'FAST'", "'FEATURE'", "'FIELDS'", 
        "'FILE'", "'FILTER'", "'FIRST'", "'FLOAT'", "'FOLLOWER'", "'FOLLOWING'", 
        "'FOR'", "'FOREIGN'", "'FORCE'", "'FORMAT'", "'FREE'", "'FROM'", 
        "'FRONTEND'", "'FRONTENDS'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", 
        "'GENERATED'", "'GENERIC'", "'GLOBAL'", "'GRANT'", "'GRANTS'", "'GRAPH'", 
        "'GROUP'", "'GROUPING'", "'GROUPS'", "'HASH'", "'HAVING'", "'HDFS'", 
        "'HELP'", "'HISTOGRAM'", "'HLL'", "'HLL_UNION'", "'HOSTNAME'", "'HOTSPOT'", 
        "'HOUR'", "'HUB'", "'IDENTIFIED'", "'IF'", "'IGNORE'", "'IMMEDIATE'", 
        "'IN'", "'INCREMENTAL'", "'INDEX'", "'INDEXES'", "'INFILE'", "'INNER'", 
        "'INSERT'", "'INSTALL'", "'INT'", "'INTEGER'", "'INTERMEDIATE'", 
        "'INTERSECT'", "'INTERVAL'", "'INTO'", "'INVERTED'", "'IPV4'", "'IPV6'", 
        "'IS'", "'IS_NOT_NULL_PRED'", "'IS_NULL_PRED'", "'ISNULL'", "'ISOLATION'", 
        "'JOB'", "'JOBS'", "'JOIN'", "'JSON'", "'JSONB'", "'KEY'", "'KEYS'", 
        "'KILL'", "'LABEL'", "'LARGEINT'", "'LAST'", "'LATERAL'", "'LDAP'", 
        "'LDAP_ADMIN_PASSWORD'", "'LEFT'", "'LESS'", "'LEVEL'", "'LIKE'", 
        "'LIMIT'", "'LINES'", "'LINK'", "'LIST'", "'LOAD'", "'LOCAL'", "'LOCALTIME'", 
        "'LOCALTIMESTAMP'", "'LOCATION'", "'LOCK'", "'LOGICAL'", "'LOW_PRIORITY'", 
        "'MANUAL'", "'MAP'", "'MATCH'", "'MATCH_ALL'", "'MATCH_ANY'", "'MATCH_PHRASE'", 
        "'MATCH_PHRASE_EDGE'", "'MATCH_PHRASE_PREFIX'", "'MATCH_REGEXP'", 
        "'MATERIALIZED'", "'MAX'", "'MAXVALUE'", "'MEMO'", "'MERGE'", "'MIGRATE'", 
        "'MIGRATIONS'", "'MIN'", "'MINUS'", "'MINUTE'", "'MODIFY'", "'MONTH'", 
        "'MTMV'", "'NAME'", "'NAMES'", "'NATURAL'", "'NEGATIVE'", "'NEVER'", 
        "'NEXT'", "'NGRAM_BF'", "'NO'", "'NON_NULLABLE'", "'NOT'", "'NULL'", 
        "'NULLS'", "'OBSERVER'", "'OF'", "'OFFSET'", "'ON'", "'ONLY'", "'OPEN'", 
        "'OPTIMIZED'", "'OR'", "'ORDER'", "'OUTER'", "'OUTFILE'", "'OVER'", 
        "'OVERWRITE'", "'PARAMETER'", "'PARSED'", "'PARTITION'", "'PARTITIONS'", 
        "'PASSWORD'", "'PASSWORD_EXPIRE'", "'PASSWORD_HISTORY'", "'PASSWORD_LOCK_TIME'", 
        "'PASSWORD_REUSE'", "'PATH'", "'PAUSE'", "'PERCENT'", "'PERIOD'", 
        "'PERMISSIVE'", "'PHYSICAL'", "'PI'", "'?'", "'PLAN'", "'PLAY'", 
        "'PRIVILEGES'", "'PROCESS'", "'PLUGIN'", "'PLUGINS'", "'POLICY'", 
        "'PRECEDING'", "'PREPARE'", "'PRIMARY'", "'PROC'", "'PROCEDURE'", 
        "'PROCESSLIST'", "'PROFILE'", "'PROPERTIES'", "'PROPERTY'", "'QUANTILE_STATE'", 
        "'QUANTILE_UNION'", "'QUERY'", "'QUOTA'", "'QUALIFY'", "'RANDOM'", 
        "'RANGE'", "'READ'", "'REAL'", "'REBALANCE'", "'RECENT'", "'RECOVER'", 
        "'RECYCLE'", "'REFRESH'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
        "'RENAME'", "'REPAIR'", "'REPEATABLE'", "'REPLACE'", "'REPLACE_IF_NOT_NULL'", 
        "'REPLAYER'", "'REPLICA'", "'REPOSITORIES'", "'REPOSITORY'", "'RESOURCE'", 
        "'RESOURCES'", "'RESTORE'", "'RESTRICTIVE'", "'RESUME'", "'RETURNS'", 
        "'REVOKE'", "'REWRITTEN'", "'RIGHT'", "'RLIKE'", "'ROLE'", "'ROLES'", 
        "'ROLLBACK'", "'ROLLUP'", "'ROUTINE'", "'ROW'", "'ROWS'", "'S3'", 
        "'SAMPLE'", "'SCHEDULE'", "'SCHEDULER'", "'SCHEMA'", "'SCHEMAS'", 
        "'SECOND'", "'SELECT'", "'SEMI'", "'SEQUENCE'", "'SERIALIZABLE'", 
        "'SESSION'", "'SESSION_USER'", "'SET'", "'SETS'", "'SET_SESSION_VARIABLE'", 
        "'SHAPE'", "'SHOW'", "'SIGNED'", "'SKEW'", "'SMALLINT'", "'SNAPSHOT'", 
        "'SONAME'", "'SPLIT'", "'SQL'", "'SQL_BLOCK_RULE'", "'STAGE'", "'STAGES'", 
        "'START'", "'STARTS'", "'STATS'", "'STATUS'", "'STOP'", "'STORAGE'", 
        "'STREAM'", "'STREAMING'", "'STRING'", "'STRUCT'", "'SUBDATE'", 
        "'SUM'", "'SUPERUSER'", "'SWITCH'", "'SYNC'", "'SYSTEM'", "'TABLE'", 
        "'TABLES'", "'TABLESAMPLE'", "'TABLET'", "'TABLETS'", "'TASK'", 
        "'TASKS'", "'TEMPORARY'", "'TERMINATED'", "'TEXT'", "'THAN'", "'THEN'", 
        "'TIME'", "'TIMESTAMP'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TINYINT'", 
        "'TO'", "'TRANSACTION'", "'TRASH'", "'TREE'", "'TRIGGERS'", "'TRIM'", 
        "'TRUE'", "'TRUNCATE'", "'TYPE'", "'TYPE_CAST'", "'TYPES'", "'UNBOUNDED'", 
        "'UNCOMMITTED'", "'UNINSTALL'", "'UNION'", "'UNIQUE'", "'UNLOCK'", 
        "'UNSET'", "'UNSIGNED'", "'UP'", "'UPDATE'", "'USE'", "'USER'", 
        "'USING'", "'VALUE'", "'VALUES'", "'VARCHAR'", "'VARIABLE'", "'VARIABLES'", 
        "'VARIANT'", "'VAULT'", "'VAULTS'", "'VERBOSE'", "'VERSION'", "'VIEW'", 
        "'VIEWS'", "'WARM'", "'WARNINGS'", "'WEEK'", "'WHEN'", "'WHERE'", 
        "'WHITELIST'", "'WITH'", "'WORK'", "'WORKLOAD'", "'WRITE'", "'XOR'", 
        "'YEAR'", null, "'<=>'", null, "'<'", null, "'>'", null, "'+'", 
        "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'&&'", "'!'", "'|'", 
        "'||'", "'^'", "':'", "'->'", "'/*+'", "'*/'", "'/*'", "'@'", "'@@'"
    ];

    public static readonly symbolicNames = [
        null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", 
        "DOTDOTDOT", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_BRACE", "RIGHT_BRACE", 
        "ACCOUNT_LOCK", "ACCOUNT_UNLOCK", "ACTIONS", "ADD", "ADDDATE", "ADMIN", 
        "AFTER", "AGG_STATE", "AGGREGATE", "ALIAS", "ALL", "ALTER", "ANALYZE", 
        "ANALYZED", "AND", "ANTI", "APPEND", "ARRAY", "ARRAY_RANGE", "AS", 
        "ASC", "AT", "AUTHORS", "AUTO", "AUTO_INCREMENT", "ALWAYS", "BACKEND", 
        "BACKENDS", "BACKUP", "BEGIN", "BELONG", "BETWEEN", "BIGINT", "BIN", 
        "BINARY", "BINLOG", "BITAND", "BITMAP", "BITMAP_EMPTY", "BITMAP_UNION", 
        "BITOR", "BITXOR", "BLOB", "BOOLEAN", "BRIEF", "BROKER", "BUCKETS", 
        "BUILD", "BUILTIN", "BULK", "BY", "CACHE", "CACHED", "CALL", "CANCEL", 
        "CASE", "CAST", "CATALOG", "CATALOGS", "CHAIN", "CHAR", "CHARSET", 
        "CHECK", "CLEAN", "CLUSTER", "CLUSTERS", "COLLATE", "COLLATION", 
        "COLLECT", "COLOCATE", "COLUMN", "COLUMNS", "COMMENT", "COMMIT", 
        "COMMITTED", "COMPACT", "COMPLETE", "COMPRESS_TYPE", "COMPUTE", 
        "CONDITIONS", "CONFIG", "CONNECTION", "CONNECTION_ID", "CONSISTENT", 
        "CONSTRAINT", "CONSTRAINTS", "CONVERT", "CONVERT_LSC", "COPY", "COUNT", 
        "CREATE", "CREATION", "CRON", "CROSS", "CUBE", "CURRENT", "CURRENT_CATALOG", 
        "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
        "DATA", "DATABASE", "DATABASES", "DATE", "DATE_ADD", "DATE_CEIL", 
        "DATE_DIFF", "DATE_FLOOR", "DATE_SUB", "DATEADD", "DATEDIFF", "DATETIME", 
        "DATETIMEV2", "DATEV2", "DATETIMEV1", "DATEV1", "DAY", "DAYS_ADD", 
        "DAYS_SUB", "DECIMAL", "DECIMALV2", "DECIMALV3", "DECOMMISSION", 
        "DEFAULT", "DEFERRED", "DELETE", "DEMAND", "DESC", "DESCRIBE", "DIAGNOSE", 
        "DIAGNOSIS", "DISK", "DISTINCT", "DISTINCTPC", "DISTINCTPCSA", "DISTRIBUTED", 
        "DISTRIBUTION", "DIV", "DO", "DORIS_INTERNAL_TABLE_ID", "DOUBLE", 
        "DROP", "DROPP", "DUAL", "DUMP", "DUPLICATE", "DYNAMIC", "E", "ELSE", 
        "ENABLE", "ENCRYPTKEY", "ENCRYPTKEYS", "END", "ENDS", "ENGINE", 
        "ENGINES", "ENTER", "ERRORS", "EVENTS", "EVERY", "EXCEPT", "EXCLUDE", 
        "EXECUTE", "EXISTS", "EXPIRED", "EXPLAIN", "EXPORT", "EXTENDED", 
        "EXTERNAL", "EXTRACT", "FAILED_LOGIN_ATTEMPTS", "FALSE", "FAST", 
        "FEATURE", "FIELDS", "FILE", "FILTER", "FIRST", "FLOAT", "FOLLOWER", 
        "FOLLOWING", "FOR", "FOREIGN", "FORCE", "FORMAT", "FREE", "FROM", 
        "FRONTEND", "FRONTENDS", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", 
        "GENERIC", "GLOBAL", "GRANT", "GRANTS", "GRAPH", "GROUP", "GROUPING", 
        "GROUPS", "HASH", "HAVING", "HDFS", "HELP", "HISTOGRAM", "HLL", 
        "HLL_UNION", "HOSTNAME", "HOTSPOT", "HOUR", "HUB", "IDENTIFIED", 
        "IF", "IGNORE", "IMMEDIATE", "IN", "INCREMENTAL", "INDEX", "INDEXES", 
        "INFILE", "INNER", "INSERT", "INSTALL", "INT", "INTEGER", "INTERMEDIATE", 
        "INTERSECT", "INTERVAL", "INTO", "INVERTED", "IPV4", "IPV6", "IS", 
        "IS_NOT_NULL_PRED", "IS_NULL_PRED", "ISNULL", "ISOLATION", "JOB", 
        "JOBS", "JOIN", "JSON", "JSONB", "KEY", "KEYS", "KILL", "LABEL", 
        "LARGEINT", "LAST", "LATERAL", "LDAP", "LDAP_ADMIN_PASSWORD", "LEFT", 
        "LESS", "LEVEL", "LIKE", "LIMIT", "LINES", "LINK", "LIST", "LOAD", 
        "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK", "LOGICAL", 
        "LOW_PRIORITY", "MANUAL", "MAP", "MATCH", "MATCH_ALL", "MATCH_ANY", 
        "MATCH_PHRASE", "MATCH_PHRASE_EDGE", "MATCH_PHRASE_PREFIX", "MATCH_REGEXP", 
        "MATERIALIZED", "MAX", "MAXVALUE", "MEMO", "MERGE", "MIGRATE", "MIGRATIONS", 
        "MIN", "MINUS", "MINUTE", "MODIFY", "MONTH", "MTMV", "NAME", "NAMES", 
        "NATURAL", "NEGATIVE", "NEVER", "NEXT", "NGRAM_BF", "NO", "NON_NULLABLE", 
        "NOT", "NULL", "NULLS", "OBSERVER", "OF", "OFFSET", "ON", "ONLY", 
        "OPEN", "OPTIMIZED", "OR", "ORDER", "OUTER", "OUTFILE", "OVER", 
        "OVERWRITE", "PARAMETER", "PARSED", "PARTITION", "PARTITIONS", "PASSWORD", 
        "PASSWORD_EXPIRE", "PASSWORD_HISTORY", "PASSWORD_LOCK_TIME", "PASSWORD_REUSE", 
        "PATH", "PAUSE", "PERCENT", "PERIOD", "PERMISSIVE", "PHYSICAL", 
        "PI", "PLACEHOLDER", "PLAN", "PLAY", "PRIVILEGES", "PROCESS", "PLUGIN", 
        "PLUGINS", "POLICY", "PRECEDING", "PREPARE", "PRIMARY", "PROC", 
        "PROCEDURE", "PROCESSLIST", "PROFILE", "PROPERTIES", "PROPERTY", 
        "QUANTILE_STATE", "QUANTILE_UNION", "QUERY", "QUOTA", "QUALIFY", 
        "RANDOM", "RANGE", "READ", "REAL", "REBALANCE", "RECENT", "RECOVER", 
        "RECYCLE", "REFRESH", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
        "REPAIR", "REPEATABLE", "REPLACE", "REPLACE_IF_NOT_NULL", "REPLAYER", 
        "REPLICA", "REPOSITORIES", "REPOSITORY", "RESOURCE", "RESOURCES", 
        "RESTORE", "RESTRICTIVE", "RESUME", "RETURNS", "REVOKE", "REWRITTEN", 
        "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROUTINE", 
        "ROW", "ROWS", "S3", "SAMPLE", "SCHEDULE", "SCHEDULER", "SCHEMA", 
        "SCHEMAS", "SECOND", "SELECT", "SEMI", "SEQUENCE", "SERIALIZABLE", 
        "SESSION", "SESSION_USER", "SET", "SETS", "SET_SESSION_VARIABLE", 
        "SHAPE", "SHOW", "SIGNED", "SKEW", "SMALLINT", "SNAPSHOT", "SONAME", 
        "SPLIT", "SQL", "SQL_BLOCK_RULE", "STAGE", "STAGES", "START", "STARTS", 
        "STATS", "STATUS", "STOP", "STORAGE", "STREAM", "STREAMING", "STRING", 
        "STRUCT", "SUBDATE", "SUM", "SUPERUSER", "SWITCH", "SYNC", "SYSTEM", 
        "TABLE", "TABLES", "TABLESAMPLE", "TABLET", "TABLETS", "TASK", "TASKS", 
        "TEMPORARY", "TERMINATED", "TEXT", "THAN", "THEN", "TIME", "TIMESTAMP", 
        "TIMESTAMPADD", "TIMESTAMPDIFF", "TINYINT", "TO", "TRANSACTION", 
        "TRASH", "TREE", "TRIGGERS", "TRIM", "TRUE", "TRUNCATE", "TYPE", 
        "TYPECAST", "TYPES", "UNBOUNDED", "UNCOMMITTED", "UNINSTALL", "UNION", 
        "UNIQUE", "UNLOCK", "UNSET", "UNSIGNED", "UP", "UPDATE", "USE", 
        "USER", "USING", "VALUE", "VALUES", "VARCHAR", "VARIABLE", "VARIABLES", 
        "VARIANT", "VAULT", "VAULTS", "VERBOSE", "VERSION", "VIEW", "VIEWS", 
        "WARM", "WARNINGS", "WEEK", "WHEN", "WHERE", "WHITELIST", "WITH", 
        "WORK", "WORKLOAD", "WRITE", "XOR", "YEAR", "EQ", "NSEQ", "NEQ", 
        "LT", "LTE", "GT", "GTE", "PLUS", "SUBTRACT", "ASTERISK", "SLASH", 
        "MOD", "TILDE", "AMPERSAND", "LOGICALAND", "LOGICALNOT", "PIPE", 
        "DOUBLEPIPES", "HAT", "COLON", "ARROW", "HINT_START", "HINT_END", 
        "COMMENT_START", "ATSIGN", "DOUBLEATSIGN", "STRING_LITERAL", "LEADING_STRING", 
        "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL", "INTEGER_VALUE", 
        "EXPONENT_VALUE", "DECIMAL_VALUE", "BIGDECIMAL_LITERAL", "IDENTIFIER", 
        "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", 
        "FROM_DUAL", "WS", "UNRECOGNIZED"
    ];
    public static readonly ruleNames = [
        "program", "multiStatements", "singleStatement", "statement", "statementBase", 
        "unsupportedStatement", "materializedViewStatement", "supportedJobStatement", 
        "constraintStatement", "supportedDmlStatement", "supportedCreateStatement", 
        "supportedAlterStatement", "supportedDropStatement", "supportedShowStatement", 
        "supportedLoadStatement", "unsupportedOtherStatement", "warmUpItem", 
        "lockTable", "unsupportedShowStatement", "createRoutineLoad", "unsupportedLoadStatement", 
        "loadProperty", "importSequenceStatement", "importDeleteOnStatement", 
        "importWhereStatement", "importPrecedingFilterStatement", "importColumnsStatement", 
        "importColumnDesc", "channelDescriptions", "channelDescription", 
        "supportedRefreshStatement", "supportedCleanStatement", "unsupportedRefreshStatement", 
        "unsupportedCleanStatement", "supportedCancelStatement", "unsupportedCancelStatement", 
        "supportedAdminStatement", "supportedRecoverStatement", "unsupportedAdminStatement", 
        "baseTableRef", "wildWhere", "unsupportedTransactionStatement", 
        "unsupportedGrantRevokeStatement", "privilege", "privilegeList", 
        "unsupportedAlterStatement", "alterSystemClause", "dropRollupClause", 
        "addRollupClause", "alterTableClause", "columnPosition", "toRollup", 
        "fromRollup", "unsupportedDropStatement", "unsupportedStatsStatement", 
        "analyzeProperties", "unsupportedCreateStatement", "workloadPolicyActions", 
        "workloadPolicyAction", "workloadPolicyConditions", "workloadPolicyCondition", 
        "storageBackend", "passwordOption", "functionArguments", "functionArgument", 
        "supportedSetStatement", "optionWithType", "optionWithoutType", 
        "variable", "transactionAccessMode", "isolationLevel", "supportedUnsetStatement", 
        "unsupportedUseStatement", "unsupportedDmlStatement", "stageAndPattern", 
        "unsupportedKillStatement", "unsupportedDescribeStatement", "constraint", 
        "partitionSpec", "partitionTable", "identityOrFunctionList", "identityOrFunction", 
        "dataDesc", "buildMode", "refreshTrigger", "refreshSchedule", "refreshMethod", 
        "mvPartition", "identifierOrText", "identifierOrTextOrAsterisk", 
        "multipartIdentifierOrAsterisk", "identifierOrAsterisk", "userIdentify", 
        "grantUserIdentify", "explain", "explainCommand", "planType", "replayCommand", 
        "replayType", "mergeType", "preFilterClause", "deleteOnClause", 
        "sequenceColClause", "colFromPath", "colMappingList", "mappingExpr", 
        "withRemoteStorageSystem", "resourceDesc", "mysqlDataDesc", "skipLines", 
        "outFileClause", "query", "queryTerm", "setQuantifier", "queryPrimary", 
        "querySpecification", "cte", "aliasQuery", "columnAliases", "selectClause", 
        "selectColumnClause", "whereClause", "fromClause", "intoClause", 
        "bulkCollectClause", "tableRow", "relations", "relation", "joinRelation", 
        "distributeType", "relationHint", "aggClause", "groupingElement", 
        "groupingSet", "havingClause", "qualifyClause", "selectHint", "hintStatement", 
        "hintAssignment", "updateAssignment", "updateAssignmentSeq", "lateralView", 
        "queryOrganization", "sortClause", "sortItem", "limitClause", "partitionClause", 
        "joinType", "joinCriteria", "identifierList", "identifierSeq", "optScanParams", 
        "relationPrimary", "materializedViewName", "propertyClause", "propertyItemList", 
        "propertyItem", "propertyKey", "propertyValue", "tableAlias", "multipartIdentifier", 
        "simpleColumnDefs", "simpleColumnDef", "columnDefs", "columnDef", 
        "indexDefs", "indexDef", "partitionsDef", "partitionDef", "lessThanPartitionDef", 
        "fixedPartitionDef", "stepPartitionDef", "inPartitionDef", "partitionValueList", 
        "partitionValueDef", "rollupDefs", "rollupDef", "aggTypeDef", "tabletList", 
        "inlineTable", "namedExpression", "namedExpressionSeq", "expression", 
        "lambdaExpression", "booleanExpression", "rowConstructor", "rowConstructorItem", 
        "predicate", "valueExpression", "datetimeUnit", "primaryExpression", 
        "exceptOrReplace", "castDataType", "functionCallExpression", "functionIdentifier", 
        "functionNameIdentifier", "windowSpec", "windowFrame", "frameUnits", 
        "frameBoundary", "qualifiedName", "specifiedPartition", "constant", 
        "comparisonOperator", "booleanValue", "whenClause", "interval", 
        "unitIdentifier", "dataTypeWithNullable", "dataType", "primitiveColType", 
        "complexColTypeList", "complexColType", "commentSpec", "sample", 
        "sampleMethod", "tableSnapshot", "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
        "identifier", "strictIdentifier", "quotedIdentifier", "number", 
        "nonReserved",
    ];

    public get grammarFileName(): string { return "DorisParser.g4"; }
    public get literalNames(): (string | null)[] { return DorisParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return DorisParser.symbolicNames; }
    public get ruleNames(): string[] { return DorisParser.ruleNames; }
    public get serializedATN(): number[] { return DorisParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }


        public doris_legacy_SQL_syntax = true;

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, DorisParser._ATN, DorisParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, DorisParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 451;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 12648452) !== 0) || ((((_la - 39)) & ~0x1F) === 0 && ((1 << (_la - 39)) & 101187587) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & 167773185) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & 65549) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & 1073741827) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 786433) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 1081345) !== 0) || _la === 337 || _la === 344 || ((((_la - 371)) & ~0x1F) === 0 && ((1 << (_la - 371)) & 136970757) !== 0) || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & 35652673) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & 134217731) !== 0) || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & 545264025) !== 0)) {
                {
                {
                this.state = 448;
                this.statement();
                }
                }
                this.state = 453;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 454;
            this.match(DorisParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiStatements(): MultiStatementsContext {
        let localContext = new MultiStatementsContext(this.context, this.state);
        this.enterRule(localContext, 2, DorisParser.RULE_multiStatements);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 459;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 456;
                    this.match(DorisParser.SEMICOLON);
                    }
                    }
                }
                this.state = 461;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1, this.context);
            }
            this.state = 463;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 12648452) !== 0) || ((((_la - 39)) & ~0x1F) === 0 && ((1 << (_la - 39)) & 101187587) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & 167773185) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & 65549) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & 1073741827) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 786433) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 1081345) !== 0) || _la === 337 || _la === 344 || ((((_la - 371)) & ~0x1F) === 0 && ((1 << (_la - 371)) & 136970757) !== 0) || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & 35652673) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & 134217731) !== 0) || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & 545264025) !== 0)) {
                {
                this.state = 462;
                this.statement();
                }
            }

            this.state = 473;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 4, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 466;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 465;
                        this.match(DorisParser.SEMICOLON);
                        }
                        }
                        this.state = 468;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 1);
                    this.state = 470;
                    this.statement();
                    }
                    }
                }
                this.state = 475;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 4, this.context);
            }
            this.state = 479;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1) {
                {
                {
                this.state = 476;
                this.match(DorisParser.SEMICOLON);
                }
                }
                this.state = 481;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 482;
            this.match(DorisParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleStatement(): SingleStatementContext {
        let localContext = new SingleStatementContext(this.context, this.state);
        this.enterRule(localContext, 4, DorisParser.RULE_singleStatement);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 487;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 6, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 484;
                    this.match(DorisParser.SEMICOLON);
                    }
                    }
                }
                this.state = 489;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 6, this.context);
            }
            this.state = 491;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 12648452) !== 0) || ((((_la - 39)) & ~0x1F) === 0 && ((1 << (_la - 39)) & 101187587) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & 167773185) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & 65549) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & 1073741827) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 786433) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 1081345) !== 0) || _la === 337 || _la === 344 || ((((_la - 371)) & ~0x1F) === 0 && ((1 << (_la - 371)) & 136970757) !== 0) || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & 35652673) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & 134217731) !== 0) || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & 545264025) !== 0)) {
                {
                this.state = 490;
                this.statement();
                }
            }

            this.state = 496;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 1) {
                {
                {
                this.state = 493;
                this.match(DorisParser.SEMICOLON);
                }
                }
                this.state = 498;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 499;
            this.match(DorisParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 6, DorisParser.RULE_statement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 575;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 20, this.context) ) {
            case 1:
                localContext = new StatementBaseAliasContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 501;
                this.statementBase();
                }
                break;
            case 2:
                localContext = new CallProcedureContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 502;
                this.match(DorisParser.CALL);
                this.state = 503;
                (localContext as CallProcedureContext)._name = this.multipartIdentifier();
                this.state = 504;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 513;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824108676) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343357) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294703327) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 536401791) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 4290488147) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2810112005) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915135) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124779511) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277237887) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984157) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259731579) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 2156429309) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461889683) !== 0)) {
                    {
                    this.state = 505;
                    this.expression();
                    this.state = 510;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 506;
                        this.match(DorisParser.COMMA);
                        this.state = 507;
                        this.expression();
                        }
                        }
                        this.state = 512;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 515;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 3:
                localContext = new CreateProcedureContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 524;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.ALTER:
                    {
                    this.state = 517;
                    this.match(DorisParser.ALTER);
                    }
                    break;
                case DorisParser.CREATE:
                    {
                    this.state = 518;
                    this.match(DorisParser.CREATE);
                    this.state = 521;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 321) {
                        {
                        this.state = 519;
                        this.match(DorisParser.OR);
                        this.state = 520;
                        this.match(DorisParser.REPLACE);
                        }
                    }

                    }
                    break;
                case DorisParser.REPLACE:
                    {
                    this.state = 523;
                    this.match(DorisParser.REPLACE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 526;
                _la = this.tokenStream.LA(1);
                if(!(_la === 354 || _la === 355)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 527;
                (localContext as CreateProcedureContext)._name = this.multipartIdentifier();
                this.state = 528;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 532;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 13, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 529;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 534;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 13, this.context);
                }
                this.state = 535;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 539;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 14, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 536;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 541;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 14, this.context);
                }
                }
                break;
            case 4:
                localContext = new DropProcedureContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 542;
                this.match(DorisParser.DROP);
                this.state = 543;
                _la = this.tokenStream.LA(1);
                if(!(_la === 354 || _la === 355)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 546;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 544;
                    this.match(DorisParser.IF);
                    this.state = 545;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 548;
                (localContext as DropProcedureContext)._name = this.multipartIdentifier();
                }
                break;
            case 5:
                localContext = new ShowProcedureStatusContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 549;
                this.match(DorisParser.SHOW);
                this.state = 550;
                _la = this.tokenStream.LA(1);
                if(!(_la === 202 || _la === 355)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 551;
                this.match(DorisParser.STATUS);
                this.state = 555;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LIKE:
                    {
                    this.state = 552;
                    this.match(DorisParser.LIKE);
                    this.state = 553;
                    (localContext as ShowProcedureStatusContext)._pattern = this.valueExpression(0);
                    }
                    break;
                case DorisParser.WHERE:
                    {
                    this.state = 554;
                    this.whereClause();
                    }
                    break;
                case DorisParser.EOF:
                case DorisParser.SEMICOLON:
                case DorisParser.LEFT_PAREN:
                case DorisParser.ADMIN:
                case DorisParser.ALTER:
                case DorisParser.ANALYZE:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BUILD:
                case DorisParser.CALL:
                case DorisParser.CANCEL:
                case DorisParser.CLEAN:
                case DorisParser.COMMIT:
                case DorisParser.COPY:
                case DorisParser.CREATE:
                case DorisParser.DELETE:
                case DorisParser.DESC:
                case DorisParser.DESCRIBE:
                case DorisParser.DROP:
                case DorisParser.EXPLAIN:
                case DorisParser.EXPORT:
                case DorisParser.GRANT:
                case DorisParser.HELP:
                case DorisParser.INSERT:
                case DorisParser.INSTALL:
                case DorisParser.KILL:
                case DorisParser.LOAD:
                case DorisParser.LOCK:
                case DorisParser.PAUSE:
                case DorisParser.PLAN:
                case DorisParser.RECOVER:
                case DorisParser.REFRESH:
                case DorisParser.REPLACE:
                case DorisParser.RESTORE:
                case DorisParser.RESUME:
                case DorisParser.REVOKE:
                case DorisParser.ROLLBACK:
                case DorisParser.SELECT:
                case DorisParser.SET:
                case DorisParser.SHOW:
                case DorisParser.START:
                case DorisParser.STOP:
                case DorisParser.SWITCH:
                case DorisParser.SYNC:
                case DorisParser.TRUNCATE:
                case DorisParser.UNINSTALL:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UPDATE:
                case DorisParser.USE:
                case DorisParser.VALUES:
                case DorisParser.WARM:
                case DorisParser.WITH:
                    break;
                default:
                    break;
                }
                }
                break;
            case 6:
                localContext = new ShowCreateProcedureContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 557;
                this.match(DorisParser.SHOW);
                this.state = 558;
                this.match(DorisParser.CREATE);
                this.state = 559;
                this.match(DorisParser.PROCEDURE);
                this.state = 560;
                (localContext as ShowCreateProcedureContext)._name = this.multipartIdentifier();
                }
                break;
            case 7:
                localContext = new ShowConfigContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 562;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 16) {
                    {
                    this.state = 561;
                    this.match(DorisParser.ADMIN);
                    }
                }

                this.state = 564;
                this.match(DorisParser.SHOW);
                this.state = 565;
                (localContext as ShowConfigContext)._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 199)) {
                    (localContext as ShowConfigContext)._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 566;
                this.match(DorisParser.CONFIG);
                this.state = 569;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267) {
                    {
                    this.state = 567;
                    this.match(DorisParser.LIKE);
                    this.state = 568;
                    (localContext as ShowConfigContext)._pattern = this.valueExpression(0);
                    }
                }

                this.state = 573;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 571;
                    this.match(DorisParser.FROM);
                    this.state = 572;
                    (localContext as ShowConfigContext)._backendId = this.match(DorisParser.INTEGER_VALUE);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statementBase(): StatementBaseContext {
        let localContext = new StatementBaseContext(this.context, this.state);
        this.enterRule(localContext, 8, DorisParser.RULE_statementBase);
        let _la: number;
        try {
            this.state = 601;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
            case 1:
                localContext = new StatementDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 578;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139 || _la === 140 || _la === 177) {
                    {
                    this.state = 577;
                    this.explain();
                    }
                }

                this.state = 580;
                this.query();
                this.state = 582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 241) {
                    {
                    this.state = 581;
                    this.outFileClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new SupportedDmlStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 584;
                this.supportedDmlStatement();
                }
                break;
            case 3:
                localContext = new SupportedCreateStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 585;
                this.supportedCreateStatement();
                }
                break;
            case 4:
                localContext = new SupportedAlterStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 586;
                this.supportedAlterStatement();
                }
                break;
            case 5:
                localContext = new MaterializedViewStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 587;
                this.materializedViewStatement();
                }
                break;
            case 6:
                localContext = new SupportedJobStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 588;
                this.supportedJobStatement();
                }
                break;
            case 7:
                localContext = new ConstraintStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 589;
                this.constraintStatement();
                }
                break;
            case 8:
                localContext = new SupportedCleanStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 590;
                this.supportedCleanStatement();
                }
                break;
            case 9:
                localContext = new SupportedDropStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 591;
                this.supportedDropStatement();
                }
                break;
            case 10:
                localContext = new SupportedSetStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 592;
                this.supportedSetStatement();
                }
                break;
            case 11:
                localContext = new SupportedUnsetStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 593;
                this.supportedUnsetStatement();
                }
                break;
            case 12:
                localContext = new SupportedRefreshStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 594;
                this.supportedRefreshStatement();
                }
                break;
            case 13:
                localContext = new SupportedShowStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 595;
                this.supportedShowStatement();
                }
                break;
            case 14:
                localContext = new SupportedLoadStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 596;
                this.supportedLoadStatement();
                }
                break;
            case 15:
                localContext = new SupportedCancelStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 597;
                this.supportedCancelStatement();
                }
                break;
            case 16:
                localContext = new SupportedRecoverStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 598;
                this.supportedRecoverStatement();
                }
                break;
            case 17:
                localContext = new SupportedAdminStatementAliasContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 599;
                this.supportedAdminStatement();
                }
                break;
            case 18:
                localContext = new UnsupportedContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 600;
                this.unsupportedStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedStatement(): UnsupportedStatementContext {
        let localContext = new UnsupportedStatementContext(this.context, this.state);
        this.enterRule(localContext, 10, DorisParser.RULE_unsupportedStatement);
        try {
            this.state = 620;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 603;
                this.unsupportedUseStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 604;
                this.unsupportedDmlStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 605;
                this.unsupportedKillStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 606;
                this.unsupportedDescribeStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 607;
                this.unsupportedCreateStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 608;
                this.unsupportedDropStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 609;
                this.unsupportedStatsStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 610;
                this.unsupportedAlterStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 611;
                this.unsupportedGrantRevokeStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 612;
                this.unsupportedAdminStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 613;
                this.unsupportedTransactionStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 614;
                this.unsupportedCancelStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 615;
                this.unsupportedCleanStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 616;
                this.unsupportedRefreshStatement();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 617;
                this.unsupportedLoadStatement();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 618;
                this.unsupportedShowStatement();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 619;
                this.unsupportedOtherStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public materializedViewStatement(): MaterializedViewStatementContext {
        let localContext = new MaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 12, DorisParser.RULE_materializedViewStatement);
        let _la: number;
        try {
            this.state = 761;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.CREATE:
                localContext = new CreateMTMVContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 622;
                this.match(DorisParser.CREATE);
                this.state = 623;
                this.match(DorisParser.MATERIALIZED);
                this.state = 624;
                this.match(DorisParser.VIEW);
                this.state = 628;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 625;
                    this.match(DorisParser.IF);
                    this.state = 626;
                    this.match(DorisParser.NOT);
                    this.state = 627;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 630;
                (localContext as CreateMTMVContext)._mvName = this.multipartIdentifier();
                this.state = 635;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 631;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 632;
                    (localContext as CreateMTMVContext)._cols = this.simpleColumnDefs();
                    this.state = 633;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                this.state = 638;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 58) {
                    {
                    this.state = 637;
                    this.buildMode();
                    }
                }

                this.state = 647;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 373) {
                    {
                    this.state = 640;
                    this.match(DorisParser.REFRESH);
                    this.state = 642;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 34 || _la === 87) {
                        {
                        this.state = 641;
                        this.refreshMethod();
                        }
                    }

                    this.state = 645;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 317) {
                        {
                        this.state = 644;
                        this.refreshTrigger();
                        }
                    }

                    }
                }

                this.state = 654;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 157 || _la === 255) {
                    {
                    this.state = 650;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 157) {
                        {
                        this.state = 649;
                        this.match(DorisParser.DUPLICATE);
                        }
                    }

                    this.state = 652;
                    this.match(DorisParser.KEY);
                    this.state = 653;
                    (localContext as CreateMTMVContext)._keys = this.identifierList();
                    }
                }

                this.state = 658;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 656;
                    this.match(DorisParser.COMMENT);
                    this.state = 657;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                }

                this.state = 666;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 660;
                    this.match(DorisParser.PARTITION);
                    this.state = 661;
                    this.match(DorisParser.BY);
                    this.state = 662;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 663;
                    this.mvPartition();
                    this.state = 664;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                this.state = 679;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 668;
                    this.match(DorisParser.DISTRIBUTED);
                    this.state = 669;
                    this.match(DorisParser.BY);
                    this.state = 673;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case DorisParser.HASH:
                        {
                        this.state = 670;
                        this.match(DorisParser.HASH);
                        this.state = 671;
                        (localContext as CreateMTMVContext)._hashKeys = this.identifierList();
                        }
                        break;
                    case DorisParser.RANDOM:
                        {
                        this.state = 672;
                        this.match(DorisParser.RANDOM);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 677;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 57) {
                        {
                        this.state = 675;
                        this.match(DorisParser.BUCKETS);
                        this.state = 676;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 34 || _la === 543)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                }

                this.state = 682;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 681;
                    this.propertyClause();
                    }
                }

                this.state = 684;
                this.match(DorisParser.AS);
                this.state = 685;
                this.query();
                }
                break;
            case DorisParser.REFRESH:
                localContext = new RefreshMTMVContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 687;
                this.match(DorisParser.REFRESH);
                this.state = 688;
                this.match(DorisParser.MATERIALIZED);
                this.state = 689;
                this.match(DorisParser.VIEW);
                this.state = 690;
                (localContext as RefreshMTMVContext)._mvName = this.multipartIdentifier();
                this.state = 694;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.PARTITION:
                case DorisParser.PARTITIONS:
                case DorisParser.TEMPORARY:
                    {
                    this.state = 691;
                    this.partitionSpec();
                    }
                    break;
                case DorisParser.COMPLETE:
                    {
                    this.state = 692;
                    this.match(DorisParser.COMPLETE);
                    }
                    break;
                case DorisParser.AUTO:
                    {
                    this.state = 693;
                    this.match(DorisParser.AUTO);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case DorisParser.ALTER:
                localContext = new AlterMTMVContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 696;
                this.match(DorisParser.ALTER);
                this.state = 697;
                this.match(DorisParser.MATERIALIZED);
                this.state = 698;
                this.match(DorisParser.VIEW);
                this.state = 699;
                (localContext as AlterMTMVContext)._mvName = this.multipartIdentifier();
                this.state = 723;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.RENAME:
                    {
                    {
                    this.state = 700;
                    this.match(DorisParser.RENAME);
                    this.state = 701;
                    (localContext as AlterMTMVContext)._newName = this.identifier();
                    }
                    }
                    break;
                case DorisParser.REFRESH:
                    {
                    {
                    this.state = 702;
                    this.match(DorisParser.REFRESH);
                    this.state = 708;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 40, this.context) ) {
                    case 1:
                        {
                        this.state = 703;
                        this.refreshMethod();
                        }
                        break;
                    case 2:
                        {
                        this.state = 704;
                        this.refreshTrigger();
                        }
                        break;
                    case 3:
                        {
                        this.state = 705;
                        this.refreshMethod();
                        this.state = 706;
                        this.refreshTrigger();
                        }
                        break;
                    }
                    }
                    }
                    break;
                case DorisParser.REPLACE:
                    {
                    this.state = 710;
                    this.match(DorisParser.REPLACE);
                    this.state = 711;
                    this.match(DorisParser.WITH);
                    this.state = 712;
                    this.match(DorisParser.MATERIALIZED);
                    this.state = 713;
                    this.match(DorisParser.VIEW);
                    this.state = 714;
                    (localContext as AlterMTMVContext)._newName = this.identifier();
                    this.state = 716;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 358) {
                        {
                        this.state = 715;
                        this.propertyClause();
                        }
                    }

                    }
                    break;
                case DorisParser.SET:
                    {
                    {
                    this.state = 718;
                    this.match(DorisParser.SET);
                    this.state = 719;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 720;
                    (localContext as AlterMTMVContext)._fileProperties = this.propertyItemList();
                    this.state = 721;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case DorisParser.DROP:
                localContext = new DropMTMVContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 725;
                this.match(DorisParser.DROP);
                this.state = 726;
                this.match(DorisParser.MATERIALIZED);
                this.state = 727;
                this.match(DorisParser.VIEW);
                this.state = 730;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 728;
                    this.match(DorisParser.IF);
                    this.state = 729;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 732;
                (localContext as DropMTMVContext)._mvName = this.multipartIdentifier();
                this.state = 735;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 317) {
                    {
                    this.state = 733;
                    this.match(DorisParser.ON);
                    this.state = 734;
                    (localContext as DropMTMVContext)._tableName = this.multipartIdentifier();
                    }
                }

                }
                break;
            case DorisParser.PAUSE:
                localContext = new PauseMTMVContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 737;
                this.match(DorisParser.PAUSE);
                this.state = 738;
                this.match(DorisParser.MATERIALIZED);
                this.state = 739;
                this.match(DorisParser.VIEW);
                this.state = 740;
                this.match(DorisParser.JOB);
                this.state = 741;
                this.match(DorisParser.ON);
                this.state = 742;
                (localContext as PauseMTMVContext)._mvName = this.multipartIdentifier();
                }
                break;
            case DorisParser.RESUME:
                localContext = new ResumeMTMVContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 743;
                this.match(DorisParser.RESUME);
                this.state = 744;
                this.match(DorisParser.MATERIALIZED);
                this.state = 745;
                this.match(DorisParser.VIEW);
                this.state = 746;
                this.match(DorisParser.JOB);
                this.state = 747;
                this.match(DorisParser.ON);
                this.state = 748;
                (localContext as ResumeMTMVContext)._mvName = this.multipartIdentifier();
                }
                break;
            case DorisParser.CANCEL:
                localContext = new CancelMTMVTaskContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 749;
                this.match(DorisParser.CANCEL);
                this.state = 750;
                this.match(DorisParser.MATERIALIZED);
                this.state = 751;
                this.match(DorisParser.VIEW);
                this.state = 752;
                this.match(DorisParser.TASK);
                this.state = 753;
                (localContext as CancelMTMVTaskContext)._taskId = this.match(DorisParser.INTEGER_VALUE);
                this.state = 754;
                this.match(DorisParser.ON);
                this.state = 755;
                (localContext as CancelMTMVTaskContext)._mvName = this.multipartIdentifier();
                }
                break;
            case DorisParser.SHOW:
                localContext = new ShowCreateMTMVContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 756;
                this.match(DorisParser.SHOW);
                this.state = 757;
                this.match(DorisParser.CREATE);
                this.state = 758;
                this.match(DorisParser.MATERIALIZED);
                this.state = 759;
                this.match(DorisParser.VIEW);
                this.state = 760;
                (localContext as ShowCreateMTMVContext)._mvName = this.multipartIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedJobStatement(): SupportedJobStatementContext {
        let localContext = new SupportedJobStatementContext(this.context, this.state);
        this.enterRule(localContext, 14, DorisParser.RULE_supportedJobStatement);
        let _la: number;
        try {
            this.state = 819;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.CREATE:
                localContext = new CreateScheduledJobContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 763;
                this.match(DorisParser.CREATE);
                this.state = 764;
                this.match(DorisParser.JOB);
                this.state = 765;
                (localContext as CreateScheduledJobContext)._label = this.multipartIdentifier();
                this.state = 766;
                this.match(DorisParser.ON);
                this.state = 767;
                this.match(DorisParser.SCHEDULE);
                this.state = 787;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.EVERY:
                    {
                    {
                    this.state = 768;
                    this.match(DorisParser.EVERY);
                    this.state = 769;
                    (localContext as CreateScheduledJobContext)._timeInterval = this.match(DorisParser.INTEGER_VALUE);
                    this.state = 770;
                    (localContext as CreateScheduledJobContext)._timeUnit = this.identifier();
                    this.state = 776;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 432) {
                        {
                        this.state = 771;
                        this.match(DorisParser.STARTS);
                        this.state = 774;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case DorisParser.STRING_LITERAL:
                            {
                            this.state = 772;
                            (localContext as CreateScheduledJobContext)._startTime = this.match(DorisParser.STRING_LITERAL);
                            }
                            break;
                        case DorisParser.CURRENT_TIMESTAMP:
                            {
                            this.state = 773;
                            this.match(DorisParser.CURRENT_TIMESTAMP);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                    }

                    this.state = 780;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 165) {
                        {
                        this.state = 778;
                        this.match(DorisParser.ENDS);
                        this.state = 779;
                        (localContext as CreateScheduledJobContext)._endsTime = this.match(DorisParser.STRING_LITERAL);
                        }
                    }

                    }
                    }
                    break;
                case DorisParser.AT:
                    {
                    {
                    this.state = 782;
                    this.match(DorisParser.AT);
                    this.state = 785;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case DorisParser.STRING_LITERAL:
                        {
                        this.state = 783;
                        (localContext as CreateScheduledJobContext)._atTime = this.match(DorisParser.STRING_LITERAL);
                        }
                        break;
                    case DorisParser.CURRENT_TIMESTAMP:
                        {
                        this.state = 784;
                        this.match(DorisParser.CURRENT_TIMESTAMP);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 790;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 789;
                    this.commentSpec();
                    }
                }

                this.state = 792;
                this.match(DorisParser.DO);
                this.state = 793;
                this.supportedDmlStatement();
                }
                break;
            case DorisParser.PAUSE:
                localContext = new PauseJobContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 795;
                this.match(DorisParser.PAUSE);
                this.state = 796;
                this.match(DorisParser.JOB);
                this.state = 798;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 797;
                    this.wildWhere();
                    }
                }

                }
                break;
            case DorisParser.DROP:
                localContext = new DropJobContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 800;
                this.match(DorisParser.DROP);
                this.state = 801;
                this.match(DorisParser.JOB);
                this.state = 804;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 802;
                    this.match(DorisParser.IF);
                    this.state = 803;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 807;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 806;
                    this.wildWhere();
                    }
                }

                }
                break;
            case DorisParser.RESUME:
                localContext = new ResumeJobContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 809;
                this.match(DorisParser.RESUME);
                this.state = 810;
                this.match(DorisParser.JOB);
                this.state = 812;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 811;
                    this.wildWhere();
                    }
                }

                }
                break;
            case DorisParser.CANCEL:
                localContext = new CancelJobTaskContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 814;
                this.match(DorisParser.CANCEL);
                this.state = 815;
                this.match(DorisParser.TASK);
                this.state = 817;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 816;
                    this.wildWhere();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintStatement(): ConstraintStatementContext {
        let localContext = new ConstraintStatementContext(this.context, this.state);
        this.enterRule(localContext, 16, DorisParser.RULE_constraintStatement);
        try {
            this.state = 840;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
            case 1:
                localContext = new AddConstraintContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 821;
                this.match(DorisParser.ALTER);
                this.state = 822;
                this.match(DorisParser.TABLE);
                this.state = 823;
                (localContext as AddConstraintContext)._table = this.multipartIdentifier();
                this.state = 824;
                this.match(DorisParser.ADD);
                this.state = 825;
                this.match(DorisParser.CONSTRAINT);
                this.state = 826;
                (localContext as AddConstraintContext)._constraintName = this.errorCapturingIdentifier();
                this.state = 827;
                this.constraint();
                }
                break;
            case 2:
                localContext = new DropConstraintContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 829;
                this.match(DorisParser.ALTER);
                this.state = 830;
                this.match(DorisParser.TABLE);
                this.state = 831;
                (localContext as DropConstraintContext)._table = this.multipartIdentifier();
                this.state = 832;
                this.match(DorisParser.DROP);
                this.state = 833;
                this.match(DorisParser.CONSTRAINT);
                this.state = 834;
                (localContext as DropConstraintContext)._constraintName = this.errorCapturingIdentifier();
                }
                break;
            case 3:
                localContext = new ShowConstraintContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 836;
                this.match(DorisParser.SHOW);
                this.state = 837;
                this.match(DorisParser.CONSTRAINTS);
                this.state = 838;
                this.match(DorisParser.FROM);
                this.state = 839;
                (localContext as ShowConstraintContext)._table = this.multipartIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedDmlStatement(): SupportedDmlStatementContext {
        let localContext = new SupportedDmlStatementContext(this.context, this.state);
        this.enterRule(localContext, 18, DorisParser.RULE_supportedDmlStatement);
        let _la: number;
        try {
            this.state = 957;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
            case 1:
                localContext = new InsertTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 843;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139 || _la === 140 || _la === 177) {
                    {
                    this.state = 842;
                    this.explain();
                    }
                }

                this.state = 846;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 506) {
                    {
                    this.state = 845;
                    this.cte();
                    }
                }

                this.state = 848;
                this.match(DorisParser.INSERT);
                this.state = 852;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.INTO:
                    {
                    this.state = 849;
                    this.match(DorisParser.INTO);
                    }
                    break;
                case DorisParser.OVERWRITE:
                    {
                    this.state = 850;
                    this.match(DorisParser.OVERWRITE);
                    this.state = 851;
                    this.match(DorisParser.TABLE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 859;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 62, this.context) ) {
                case 1:
                    {
                    this.state = 854;
                    (localContext as InsertTableContext)._tableName = this.multipartIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 855;
                    this.match(DorisParser.DORIS_INTERNAL_TABLE_ID);
                    this.state = 856;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 857;
                    (localContext as InsertTableContext)._tableId = this.match(DorisParser.INTEGER_VALUE);
                    this.state = 858;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 862;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 861;
                    this.partitionSpec();
                    }
                }

                this.state = 867;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 64, this.context) ) {
                case 1:
                    {
                    this.state = 864;
                    this.match(DorisParser.WITH);
                    this.state = 865;
                    this.match(DorisParser.LABEL);
                    this.state = 866;
                    (localContext as InsertTableContext)._labelName = this.identifier();
                    }
                    break;
                }
                this.state = 870;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 65, this.context) ) {
                case 1:
                    {
                    this.state = 869;
                    (localContext as InsertTableContext)._cols = this.identifierList();
                    }
                    break;
                }
                this.state = 876;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 7) {
                    {
                    this.state = 872;
                    this.match(DorisParser.LEFT_BRACKET);
                    this.state = 873;
                    (localContext as InsertTableContext)._hints = this.identifierSeq();
                    this.state = 874;
                    this.match(DorisParser.RIGHT_BRACKET);
                    }
                }

                this.state = 878;
                this.query();
                }
                break;
            case 2:
                localContext = new UpdateContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 880;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139 || _la === 140 || _la === 177) {
                    {
                    this.state = 879;
                    this.explain();
                    }
                }

                this.state = 883;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 506) {
                    {
                    this.state = 882;
                    this.cte();
                    }
                }

                this.state = 885;
                this.match(DorisParser.UPDATE);
                this.state = 886;
                (localContext as UpdateContext)._tableName = this.multipartIdentifier();
                this.state = 887;
                this.tableAlias();
                this.state = 888;
                this.match(DorisParser.SET);
                this.state = 889;
                this.updateAssignmentSeq();
                this.state = 891;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 890;
                    this.fromClause();
                    }
                }

                this.state = 894;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 504) {
                    {
                    this.state = 893;
                    this.whereClause();
                    }
                }

                }
                break;
            case 3:
                localContext = new DeleteContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 897;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139 || _la === 140 || _la === 177) {
                    {
                    this.state = 896;
                    this.explain();
                    }
                }

                this.state = 900;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 506) {
                    {
                    this.state = 899;
                    this.cte();
                    }
                }

                this.state = 902;
                this.match(DorisParser.DELETE);
                this.state = 903;
                this.match(DorisParser.FROM);
                this.state = 904;
                (localContext as DeleteContext)._tableName = this.multipartIdentifier();
                this.state = 906;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 73, this.context) ) {
                case 1:
                    {
                    this.state = 905;
                    this.partitionSpec();
                    }
                    break;
                }
                this.state = 908;
                this.tableAlias();
                this.state = 911;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 487) {
                    {
                    this.state = 909;
                    this.match(DorisParser.USING);
                    this.state = 910;
                    this.relations();
                    }
                }

                this.state = 914;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 504) {
                    {
                    this.state = 913;
                    this.whereClause();
                    }
                }

                }
                break;
            case 4:
                localContext = new LoadContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 916;
                this.match(DorisParser.LOAD);
                this.state = 917;
                this.match(DorisParser.LABEL);
                this.state = 918;
                (localContext as LoadContext)._lableName = this.multipartIdentifier();
                this.state = 919;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 920;
                (localContext as LoadContext)._dataDesc = this.dataDesc();
                (localContext as LoadContext)._dataDescs.push((localContext as LoadContext)._dataDesc);
                this.state = 925;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 921;
                    this.match(DorisParser.COMMA);
                    this.state = 922;
                    (localContext as LoadContext)._dataDesc = this.dataDesc();
                    (localContext as LoadContext)._dataDescs.push((localContext as LoadContext)._dataDesc);
                    }
                    }
                    this.state = 927;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 928;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 930;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 929;
                    this.withRemoteStorageSystem();
                    }
                    break;
                }
                this.state = 933;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 932;
                    this.propertyClause();
                    }
                }

                this.state = 936;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 935;
                    this.commentSpec();
                    }
                }

                }
                break;
            case 5:
                localContext = new ExportContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 938;
                this.match(DorisParser.EXPORT);
                this.state = 939;
                this.match(DorisParser.TABLE);
                this.state = 940;
                (localContext as ExportContext)._tableName = this.multipartIdentifier();
                this.state = 943;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 941;
                    this.match(DorisParser.PARTITION);
                    this.state = 942;
                    (localContext as ExportContext)._partition = this.identifierList();
                    }
                }

                this.state = 946;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 504) {
                    {
                    this.state = 945;
                    this.whereClause();
                    }
                }

                this.state = 948;
                this.match(DorisParser.TO);
                this.state = 949;
                (localContext as ExportContext)._filePath = this.match(DorisParser.STRING_LITERAL);
                this.state = 951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 950;
                    this.propertyClause();
                    }
                }

                this.state = 954;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 83, this.context) ) {
                case 1:
                    {
                    this.state = 953;
                    this.withRemoteStorageSystem();
                    }
                    break;
                }
                }
                break;
            case 6:
                localContext = new ReplayContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 956;
                this.replayCommand();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedCreateStatement(): SupportedCreateStatementContext {
        let localContext = new SupportedCreateStatementContext(this.context, this.state);
        this.enterRule(localContext, 20, DorisParser.RULE_supportedCreateStatement);
        let _la: number;
        try {
            this.state = 1111;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 114, this.context) ) {
            case 1:
                localContext = new CreateTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 959;
                this.match(DorisParser.CREATE);
                this.state = 961;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 180) {
                    {
                    this.state = 960;
                    this.match(DorisParser.EXTERNAL);
                    }
                }

                this.state = 963;
                this.match(DorisParser.TABLE);
                this.state = 967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 964;
                    this.match(DorisParser.IF);
                    this.state = 965;
                    this.match(DorisParser.NOT);
                    this.state = 966;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 969;
                (localContext as CreateTableContext)._name = this.multipartIdentifier();
                this.state = 984;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 90, this.context) ) {
                case 1:
                    {
                    this.state = 971;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 87, this.context) ) {
                    case 1:
                        {
                        this.state = 970;
                        (localContext as CreateTableContext)._ctasCols = this.identifierList();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 973;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 974;
                    this.columnDefs();
                    this.state = 977;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
                    case 1:
                        {
                        this.state = 975;
                        this.match(DorisParser.COMMA);
                        this.state = 976;
                        this.indexDefs();
                        }
                        break;
                    }
                    this.state = 980;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4) {
                        {
                        this.state = 979;
                        this.match(DorisParser.COMMA);
                        }
                    }

                    this.state = 982;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                this.state = 989;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 166) {
                    {
                    this.state = 986;
                    this.match(DorisParser.ENGINE);
                    this.state = 987;
                    this.match(DorisParser.EQ);
                    this.state = 988;
                    (localContext as CreateTableContext)._engine = this.identifier();
                    }
                }

                this.state = 999;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 19 || _la === 157 || _la === 479) {
                    {
                    this.state = 991;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 19 || _la === 157 || _la === 479)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 992;
                    this.match(DorisParser.KEY);
                    this.state = 993;
                    (localContext as CreateTableContext)._keys = this.identifierList();
                    this.state = 997;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 75) {
                        {
                        this.state = 994;
                        this.match(DorisParser.CLUSTER);
                        this.state = 995;
                        this.match(DorisParser.BY);
                        this.state = 996;
                        (localContext as CreateTableContext)._clusterKeys = this.identifierList();
                        }
                    }

                    }
                }

                this.state = 1003;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 1001;
                    this.match(DorisParser.COMMENT);
                    this.state = 1002;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                }

                this.state = 1006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 329) {
                    {
                    this.state = 1005;
                    (localContext as CreateTableContext)._partition = this.partitionTable();
                    }
                }

                this.state = 1022;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 1008;
                    this.match(DorisParser.DISTRIBUTED);
                    this.state = 1009;
                    this.match(DorisParser.BY);
                    this.state = 1013;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case DorisParser.HASH:
                        {
                        this.state = 1010;
                        this.match(DorisParser.HASH);
                        this.state = 1011;
                        (localContext as CreateTableContext)._hashKeys = this.identifierList();
                        }
                        break;
                    case DorisParser.RANDOM:
                        {
                        this.state = 1012;
                        this.match(DorisParser.RANDOM);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1020;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 57) {
                        {
                        this.state = 1015;
                        this.match(DorisParser.BUCKETS);
                        this.state = 1018;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case DorisParser.INTEGER_VALUE:
                            {
                            this.state = 1016;
                            this.match(DorisParser.INTEGER_VALUE);
                            }
                            break;
                        case DorisParser.AUTO:
                            {
                            this.state = 1017;
                            (localContext as CreateTableContext)._autoBucket = this.match(DorisParser.AUTO);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                    }

                    }
                }

                this.state = 1029;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 399) {
                    {
                    this.state = 1024;
                    this.match(DorisParser.ROLLUP);
                    this.state = 1025;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 1026;
                    this.rollupDefs();
                    this.state = 1027;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                this.state = 1032;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 1031;
                    (localContext as CreateTableContext)._properties = this.propertyClause();
                    }
                }

                this.state = 1036;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 56) {
                    {
                    this.state = 1034;
                    this.match(DorisParser.BROKER);
                    this.state = 1035;
                    (localContext as CreateTableContext)._extProperties = this.propertyClause();
                    }
                }

                this.state = 1040;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 1038;
                    this.match(DorisParser.AS);
                    this.state = 1039;
                    this.query();
                    }
                }

                }
                break;
            case 2:
                localContext = new CreateViewContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1042;
                this.match(DorisParser.CREATE);
                this.state = 1045;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 321) {
                    {
                    this.state = 1043;
                    this.match(DorisParser.OR);
                    this.state = 1044;
                    this.match(DorisParser.REPLACE);
                    }
                }

                this.state = 1047;
                this.match(DorisParser.VIEW);
                this.state = 1051;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 1048;
                    this.match(DorisParser.IF);
                    this.state = 1049;
                    this.match(DorisParser.NOT);
                    this.state = 1050;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 1053;
                (localContext as CreateViewContext)._name = this.multipartIdentifier();
                this.state = 1058;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 1054;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 1055;
                    (localContext as CreateViewContext)._cols = this.simpleColumnDefs();
                    this.state = 1056;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                this.state = 1062;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 1060;
                    this.match(DorisParser.COMMENT);
                    this.state = 1061;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                }

                this.state = 1064;
                this.match(DorisParser.AS);
                this.state = 1065;
                this.query();
                }
                break;
            case 3:
                localContext = new CreateTableLikeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1067;
                this.match(DorisParser.CREATE);
                this.state = 1069;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 180) {
                    {
                    this.state = 1068;
                    this.match(DorisParser.EXTERNAL);
                    }
                }

                this.state = 1071;
                this.match(DorisParser.TABLE);
                this.state = 1075;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 1072;
                    this.match(DorisParser.IF);
                    this.state = 1073;
                    this.match(DorisParser.NOT);
                    this.state = 1074;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 1077;
                (localContext as CreateTableLikeContext)._name = this.multipartIdentifier();
                this.state = 1078;
                this.match(DorisParser.LIKE);
                this.state = 1079;
                (localContext as CreateTableLikeContext)._existedTable = this.multipartIdentifier();
                this.state = 1085;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
                case 1:
                    {
                    this.state = 1080;
                    this.match(DorisParser.WITH);
                    this.state = 1081;
                    this.match(DorisParser.ROLLUP);
                    this.state = 1083;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 110, this.context) ) {
                    case 1:
                        {
                        this.state = 1082;
                        (localContext as CreateTableLikeContext)._rollupNames = this.identifierList();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new CreateRowPolicyContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1087;
                this.match(DorisParser.CREATE);
                this.state = 1088;
                this.match(DorisParser.ROW);
                this.state = 1089;
                this.match(DorisParser.POLICY);
                this.state = 1093;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 1090;
                    this.match(DorisParser.IF);
                    this.state = 1091;
                    this.match(DorisParser.NOT);
                    this.state = 1092;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 1095;
                (localContext as CreateRowPolicyContext)._name = this.identifier();
                this.state = 1096;
                this.match(DorisParser.ON);
                this.state = 1097;
                (localContext as CreateRowPolicyContext)._table = this.multipartIdentifier();
                this.state = 1098;
                this.match(DorisParser.AS);
                this.state = 1099;
                (localContext as CreateRowPolicyContext)._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 340 || _la === 389)) {
                    (localContext as CreateRowPolicyContext)._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1100;
                this.match(DorisParser.TO);
                this.state = 1104;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.STRING_LITERAL:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 1101;
                    (localContext as CreateRowPolicyContext)._user = this.userIdentify();
                    }
                    break;
                case DorisParser.ROLE:
                    {
                    this.state = 1102;
                    this.match(DorisParser.ROLE);
                    this.state = 1103;
                    (localContext as CreateRowPolicyContext)._roleName = this.identifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1106;
                this.match(DorisParser.USING);
                this.state = 1107;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 1108;
                this.booleanExpression(0);
                this.state = 1109;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedAlterStatement(): SupportedAlterStatementContext {
        let localContext = new SupportedAlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 22, DorisParser.RULE_supportedAlterStatement);
        let _la: number;
        try {
            this.state = 1150;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 118, this.context) ) {
            case 1:
                localContext = new AlterViewContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1113;
                this.match(DorisParser.ALTER);
                this.state = 1114;
                this.match(DorisParser.VIEW);
                this.state = 1115;
                (localContext as AlterViewContext)._name = this.multipartIdentifier();
                this.state = 1120;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 1116;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 1117;
                    (localContext as AlterViewContext)._cols = this.simpleColumnDefs();
                    this.state = 1118;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                this.state = 1122;
                this.match(DorisParser.AS);
                this.state = 1123;
                this.query();
                }
                break;
            case 2:
                localContext = new AlterStorageVaultContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1125;
                this.match(DorisParser.ALTER);
                this.state = 1126;
                this.match(DorisParser.STORAGE);
                this.state = 1127;
                this.match(DorisParser.VAULT);
                this.state = 1128;
                (localContext as AlterStorageVaultContext)._name = this.multipartIdentifier();
                this.state = 1129;
                (localContext as AlterStorageVaultContext)._properties = this.propertyClause();
                }
                break;
            case 3:
                localContext = new AlterRoleContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1131;
                this.match(DorisParser.ALTER);
                this.state = 1132;
                this.match(DorisParser.ROLE);
                this.state = 1133;
                (localContext as AlterRoleContext)._role = this.identifier();
                this.state = 1134;
                this.commentSpec();
                }
                break;
            case 4:
                localContext = new AlterWorkloadGroupContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1136;
                this.match(DorisParser.ALTER);
                this.state = 1137;
                this.match(DorisParser.WORKLOAD);
                this.state = 1138;
                this.match(DorisParser.GROUP);
                this.state = 1139;
                (localContext as AlterWorkloadGroupContext)._name = this.identifierOrText();
                this.state = 1141;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 1140;
                    (localContext as AlterWorkloadGroupContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 5:
                localContext = new AlterWorkloadPolicyContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1143;
                this.match(DorisParser.ALTER);
                this.state = 1144;
                this.match(DorisParser.WORKLOAD);
                this.state = 1145;
                this.match(DorisParser.POLICY);
                this.state = 1146;
                (localContext as AlterWorkloadPolicyContext)._name = this.identifierOrText();
                this.state = 1148;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 1147;
                    (localContext as AlterWorkloadPolicyContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedDropStatement(): SupportedDropStatementContext {
        let localContext = new SupportedDropStatementContext(this.context, this.state);
        this.enterRule(localContext, 24, DorisParser.RULE_supportedDropStatement);
        let _la: number;
        try {
            this.state = 1212;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 126, this.context) ) {
            case 1:
                localContext = new DropCatalogRecycleBinContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1152;
                this.match(DorisParser.DROP);
                this.state = 1153;
                this.match(DorisParser.CATALOG);
                this.state = 1154;
                this.match(DorisParser.RECYCLE);
                this.state = 1155;
                this.match(DorisParser.BIN);
                this.state = 1156;
                this.match(DorisParser.WHERE);
                this.state = 1157;
                (localContext as DropCatalogRecycleBinContext)._idType = this.match(DorisParser.STRING_LITERAL);
                this.state = 1158;
                this.match(DorisParser.EQ);
                this.state = 1159;
                (localContext as DropCatalogRecycleBinContext)._id = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 2:
                localContext = new DropEncryptkeyContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1160;
                this.match(DorisParser.DROP);
                this.state = 1161;
                this.match(DorisParser.ENCRYPTKEY);
                this.state = 1164;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 1162;
                    this.match(DorisParser.IF);
                    this.state = 1163;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 1166;
                (localContext as DropEncryptkeyContext)._name = this.multipartIdentifier();
                }
                break;
            case 3:
                localContext = new DropRoleContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1167;
                this.match(DorisParser.DROP);
                this.state = 1168;
                this.match(DorisParser.ROLE);
                this.state = 1171;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 1169;
                    this.match(DorisParser.IF);
                    this.state = 1170;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 1173;
                (localContext as DropRoleContext)._name = this.identifier();
                }
                break;
            case 4:
                localContext = new DropSqlBlockRuleContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1174;
                this.match(DorisParser.DROP);
                this.state = 1175;
                this.match(DorisParser.SQL_BLOCK_RULE);
                this.state = 1178;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 1176;
                    this.match(DorisParser.IF);
                    this.state = 1177;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 1180;
                this.identifierSeq();
                }
                break;
            case 5:
                localContext = new DropUserContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1181;
                this.match(DorisParser.DROP);
                this.state = 1182;
                this.match(DorisParser.USER);
                this.state = 1185;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 1183;
                    this.match(DorisParser.IF);
                    this.state = 1184;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 1187;
                this.userIdentify();
                }
                break;
            case 6:
                localContext = new DropWorkloadGroupContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1188;
                this.match(DorisParser.DROP);
                this.state = 1189;
                this.match(DorisParser.WORKLOAD);
                this.state = 1190;
                this.match(DorisParser.GROUP);
                this.state = 1193;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 1191;
                    this.match(DorisParser.IF);
                    this.state = 1192;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 1195;
                (localContext as DropWorkloadGroupContext)._name = this.identifierOrText();
                }
                break;
            case 7:
                localContext = new DropFileContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1196;
                this.match(DorisParser.DROP);
                this.state = 1197;
                this.match(DorisParser.FILE);
                this.state = 1198;
                (localContext as DropFileContext)._name = this.match(DorisParser.STRING_LITERAL);
                this.state = 1201;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1199;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1200;
                    (localContext as DropFileContext)._database = this.identifier();
                    }
                }

                this.state = 1203;
                (localContext as DropFileContext)._properties = this.propertyClause();
                }
                break;
            case 8:
                localContext = new DropWorkloadPolicyContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1204;
                this.match(DorisParser.DROP);
                this.state = 1205;
                this.match(DorisParser.WORKLOAD);
                this.state = 1206;
                this.match(DorisParser.POLICY);
                this.state = 1209;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 1207;
                    this.match(DorisParser.IF);
                    this.state = 1208;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 1211;
                (localContext as DropWorkloadPolicyContext)._name = this.identifierOrText();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedShowStatement(): SupportedShowStatementContext {
        let localContext = new SupportedShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 26, DorisParser.RULE_supportedShowStatement);
        let _la: number;
        try {
            this.state = 1371;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 144, this.context) ) {
            case 1:
                localContext = new ShowVariablesContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1214;
                this.match(DorisParser.SHOW);
                this.state = 1216;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206 || _la === 273 || _la === 414) {
                    {
                    this.state = 1215;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 206 || _la === 273 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1218;
                this.match(DorisParser.VARIABLES);
                this.state = 1220;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1219;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 2:
                localContext = new ShowAuthorsContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1222;
                this.match(DorisParser.SHOW);
                this.state = 1223;
                this.match(DorisParser.AUTHORS);
                }
                break;
            case 3:
                localContext = new ShowBrokerContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1224;
                this.match(DorisParser.SHOW);
                this.state = 1225;
                this.match(DorisParser.BROKER);
                }
                break;
            case 4:
                localContext = new ShowDynamicPartitionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1226;
                this.match(DorisParser.SHOW);
                this.state = 1227;
                this.match(DorisParser.DYNAMIC);
                this.state = 1228;
                this.match(DorisParser.PARTITION);
                this.state = 1229;
                this.match(DorisParser.TABLES);
                this.state = 1232;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1230;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1231;
                    (localContext as ShowDynamicPartitionContext)._database = this.multipartIdentifier();
                    }
                }

                }
                break;
            case 5:
                localContext = new ShowEventsContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1234;
                this.match(DorisParser.SHOW);
                this.state = 1235;
                this.match(DorisParser.EVENTS);
                this.state = 1238;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1236;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1237;
                    (localContext as ShowEventsContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1241;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1240;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 6:
                localContext = new ShowLastInsertContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1243;
                this.match(DorisParser.SHOW);
                this.state = 1244;
                this.match(DorisParser.LAST);
                this.state = 1245;
                this.match(DorisParser.INSERT);
                }
                break;
            case 7:
                localContext = new ShowDeleteContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1246;
                this.match(DorisParser.SHOW);
                this.state = 1247;
                this.match(DorisParser.DELETE);
                this.state = 1250;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1248;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1249;
                    (localContext as ShowDeleteContext)._database = this.multipartIdentifier();
                    }
                }

                }
                break;
            case 8:
                localContext = new ShowGrantsContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1252;
                this.match(DorisParser.SHOW);
                this.state = 1254;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 21) {
                    {
                    this.state = 1253;
                    this.match(DorisParser.ALL);
                    }
                }

                this.state = 1256;
                this.match(DorisParser.GRANTS);
                }
                break;
            case 9:
                localContext = new ShowGrantsForUserContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1257;
                this.match(DorisParser.SHOW);
                this.state = 1258;
                this.match(DorisParser.GRANTS);
                this.state = 1259;
                this.match(DorisParser.FOR);
                this.state = 1260;
                this.userIdentify();
                }
                break;
            case 10:
                localContext = new ShowLoadProfileContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1261;
                this.match(DorisParser.SHOW);
                this.state = 1262;
                this.match(DorisParser.LOAD);
                this.state = 1263;
                this.match(DorisParser.PROFILE);
                this.state = 1264;
                (localContext as ShowLoadProfileContext)._loadIdPath = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 11:
                localContext = new ShowViewContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1265;
                this.match(DorisParser.SHOW);
                this.state = 1266;
                this.match(DorisParser.VIEW);
                this.state = 1267;
                _la = this.tokenStream.LA(1);
                if(!(_la === 198 || _la === 228)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1268;
                (localContext as ShowViewContext)._tableName = this.multipartIdentifier();
                this.state = 1271;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1269;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1270;
                    (localContext as ShowViewContext)._database = this.identifier();
                    }
                }

                }
                break;
            case 12:
                localContext = new ShowPluginsContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1273;
                this.match(DorisParser.SHOW);
                this.state = 1274;
                this.match(DorisParser.PLUGINS);
                }
                break;
            case 13:
                localContext = new ShowRepositoriesContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1275;
                this.match(DorisParser.SHOW);
                this.state = 1276;
                this.match(DorisParser.REPOSITORIES);
                }
                break;
            case 14:
                localContext = new ShowCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1277;
                this.match(DorisParser.SHOW);
                this.state = 1279;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 55) {
                    {
                    this.state = 1278;
                    this.match(DorisParser.BRIEF);
                    }
                }

                this.state = 1281;
                this.match(DorisParser.CREATE);
                this.state = 1282;
                this.match(DorisParser.TABLE);
                this.state = 1283;
                (localContext as ShowCreateTableContext)._name = this.multipartIdentifier();
                }
                break;
            case 15:
                localContext = new ShowRolesContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1284;
                this.match(DorisParser.SHOW);
                this.state = 1285;
                this.match(DorisParser.ROLES);
                }
                break;
            case 16:
                localContext = new ShowPartitionIdContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1286;
                this.match(DorisParser.SHOW);
                this.state = 1287;
                this.match(DorisParser.PARTITION);
                this.state = 1288;
                (localContext as ShowPartitionIdContext)._partitionId = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 17:
                localContext = new ShowPrivilegesContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1289;
                this.match(DorisParser.SHOW);
                this.state = 1290;
                this.match(DorisParser.PRIVILEGES);
                }
                break;
            case 18:
                localContext = new ShowProcContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1291;
                this.match(DorisParser.SHOW);
                this.state = 1292;
                this.match(DorisParser.PROC);
                this.state = 1293;
                (localContext as ShowProcContext)._path = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 19:
                localContext = new ShowSmallFilesContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1294;
                this.match(DorisParser.SHOW);
                this.state = 1295;
                this.match(DorisParser.FILE);
                this.state = 1298;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1296;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1297;
                    (localContext as ShowSmallFilesContext)._database = this.multipartIdentifier();
                    }
                }

                }
                break;
            case 20:
                localContext = new ShowStorageEnginesContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1300;
                this.match(DorisParser.SHOW);
                this.state = 1302;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 436) {
                    {
                    this.state = 1301;
                    this.match(DorisParser.STORAGE);
                    }
                }

                this.state = 1304;
                this.match(DorisParser.ENGINES);
                }
                break;
            case 21:
                localContext = new ShowCreateCatalogContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1305;
                this.match(DorisParser.SHOW);
                this.state = 1306;
                this.match(DorisParser.CREATE);
                this.state = 1307;
                this.match(DorisParser.CATALOG);
                this.state = 1308;
                (localContext as ShowCreateCatalogContext)._name = this.identifier();
                }
                break;
            case 22:
                localContext = new ShowSqlBlockRuleContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1309;
                this.match(DorisParser.SHOW);
                this.state = 1310;
                this.match(DorisParser.SQL_BLOCK_RULE);
                this.state = 1313;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 1311;
                    this.match(DorisParser.FOR);
                    this.state = 1312;
                    (localContext as ShowSqlBlockRuleContext)._ruleName = this.identifier();
                    }
                }

                }
                break;
            case 23:
                localContext = new ShowCreateViewContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1315;
                this.match(DorisParser.SHOW);
                this.state = 1316;
                this.match(DorisParser.CREATE);
                this.state = 1317;
                this.match(DorisParser.VIEW);
                this.state = 1318;
                (localContext as ShowCreateViewContext)._name = this.multipartIdentifier();
                }
                break;
            case 24:
                localContext = new ShowCreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1319;
                this.match(DorisParser.SHOW);
                this.state = 1320;
                this.match(DorisParser.CREATE);
                this.state = 1321;
                this.match(DorisParser.MATERIALIZED);
                this.state = 1322;
                this.match(DorisParser.VIEW);
                this.state = 1323;
                (localContext as ShowCreateMaterializedViewContext)._mvName = this.identifier();
                this.state = 1324;
                this.match(DorisParser.ON);
                this.state = 1325;
                (localContext as ShowCreateMaterializedViewContext)._tableName = this.multipartIdentifier();
                }
                break;
            case 25:
                localContext = new ShowBackendsContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1327;
                this.match(DorisParser.SHOW);
                this.state = 1328;
                this.match(DorisParser.BACKENDS);
                }
                break;
            case 26:
                localContext = new ShowReplicaDistributionContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1329;
                this.match(DorisParser.SHOW);
                this.state = 1330;
                this.match(DorisParser.REPLICA);
                this.state = 1331;
                this.match(DorisParser.DISTRIBUTION);
                this.state = 1332;
                this.match(DorisParser.FROM);
                this.state = 1333;
                this.baseTableRef();
                }
                break;
            case 27:
                localContext = new ShowTriggersContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1334;
                this.match(DorisParser.SHOW);
                this.state = 1336;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 201) {
                    {
                    this.state = 1335;
                    this.match(DorisParser.FULL);
                    }
                }

                this.state = 1338;
                this.match(DorisParser.TRIGGERS);
                this.state = 1341;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1339;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1340;
                    (localContext as ShowTriggersContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1344;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1343;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 28:
                localContext = new ShowDiagnoseTabletContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1346;
                this.match(DorisParser.SHOW);
                this.state = 1347;
                this.match(DorisParser.TABLET);
                this.state = 1348;
                this.match(DorisParser.DIAGNOSIS);
                this.state = 1349;
                (localContext as ShowDiagnoseTabletContext)._tabletId = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 29:
                localContext = new ShowFrontendsContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1350;
                this.match(DorisParser.SHOW);
                this.state = 1351;
                this.match(DorisParser.FRONTENDS);
                this.state = 1353;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 142, this.context) ) {
                case 1:
                    {
                    this.state = 1352;
                    (localContext as ShowFrontendsContext)._name = this.identifier();
                    }
                    break;
                }
                }
                break;
            case 30:
                localContext = new ShowTableIdContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1355;
                this.match(DorisParser.SHOW);
                this.state = 1356;
                this.match(DorisParser.TABLE);
                this.state = 1357;
                (localContext as ShowTableIdContext)._tableId = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 31:
                localContext = new ShowWhitelistContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1358;
                this.match(DorisParser.SHOW);
                this.state = 1359;
                this.match(DorisParser.WHITELIST);
                }
                break;
            case 32:
                localContext = new ShowTabletsBelongContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 1360;
                this.match(DorisParser.SHOW);
                this.state = 1361;
                this.match(DorisParser.TABLETS);
                this.state = 1362;
                this.match(DorisParser.BELONG);
                this.state = 1363;
                (localContext as ShowTabletsBelongContext)._INTEGER_VALUE = this.match(DorisParser.INTEGER_VALUE);
                (localContext as ShowTabletsBelongContext)._tabletIds.push((localContext as ShowTabletsBelongContext)._INTEGER_VALUE);
                this.state = 1368;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1364;
                    this.match(DorisParser.COMMA);
                    this.state = 1365;
                    (localContext as ShowTabletsBelongContext)._INTEGER_VALUE = this.match(DorisParser.INTEGER_VALUE);
                    (localContext as ShowTabletsBelongContext)._tabletIds.push((localContext as ShowTabletsBelongContext)._INTEGER_VALUE);
                    }
                    }
                    this.state = 1370;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedLoadStatement(): SupportedLoadStatementContext {
        let localContext = new SupportedLoadStatementContext(this.context, this.state);
        this.enterRule(localContext, 28, DorisParser.RULE_supportedLoadStatement);
        try {
            this.state = 1375;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.SYNC:
                localContext = new SyncContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1373;
                this.match(DorisParser.SYNC);
                }
                break;
            case DorisParser.CREATE:
                localContext = new CreateRoutineLoadAliasContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1374;
                this.createRoutineLoad();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedOtherStatement(): UnsupportedOtherStatementContext {
        let localContext = new UnsupportedOtherStatementContext(this.context, this.state);
        this.enterRule(localContext, 30, DorisParser.RULE_unsupportedOtherStatement);
        let _la: number;
        try {
            this.state = 1482;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.HELP:
                localContext = new HelpContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1377;
                this.match(DorisParser.HELP);
                this.state = 1378;
                (localContext as HelpContext)._mark = this.identifierOrText();
                }
                break;
            case DorisParser.INSTALL:
                localContext = new InstallPluginContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1379;
                this.match(DorisParser.INSTALL);
                this.state = 1380;
                this.match(DorisParser.PLUGIN);
                this.state = 1381;
                this.match(DorisParser.FROM);
                this.state = 1382;
                (localContext as InstallPluginContext)._source = this.identifierOrText();
                this.state = 1384;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 1383;
                    (localContext as InstallPluginContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case DorisParser.UNINSTALL:
                localContext = new UninstallPluginContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1386;
                this.match(DorisParser.UNINSTALL);
                this.state = 1387;
                this.match(DorisParser.PLUGIN);
                this.state = 1388;
                (localContext as UninstallPluginContext)._name = this.identifierOrText();
                }
                break;
            case DorisParser.LOCK:
                localContext = new LockTablesContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1389;
                this.match(DorisParser.LOCK);
                this.state = 1390;
                this.match(DorisParser.TABLES);
                this.state = 1399;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 148, this.context) ) {
                case 1:
                    {
                    this.state = 1391;
                    this.lockTable();
                    this.state = 1396;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1392;
                        this.match(DorisParser.COMMA);
                        this.state = 1393;
                        this.lockTable();
                        }
                        }
                        this.state = 1398;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                }
                break;
            case DorisParser.UNLOCK:
                localContext = new UnlockTablesContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1401;
                this.match(DorisParser.UNLOCK);
                this.state = 1402;
                this.match(DorisParser.TABLES);
                }
                break;
            case DorisParser.WARM:
                localContext = new WarmUpClusterContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1403;
                this.match(DorisParser.WARM);
                this.state = 1404;
                this.match(DorisParser.UP);
                this.state = 1408;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.CLUSTER:
                    {
                    this.state = 1405;
                    this.match(DorisParser.CLUSTER);
                    }
                    break;
                case DorisParser.COMPUTE:
                    {
                    this.state = 1406;
                    this.match(DorisParser.COMPUTE);
                    this.state = 1407;
                    this.match(DorisParser.GROUP);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1410;
                (localContext as WarmUpClusterContext)._destination = this.identifier();
                this.state = 1411;
                this.match(DorisParser.WITH);
                this.state = 1426;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.CLUSTER:
                case DorisParser.COMPUTE:
                    {
                    this.state = 1415;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case DorisParser.CLUSTER:
                        {
                        this.state = 1412;
                        this.match(DorisParser.CLUSTER);
                        }
                        break;
                    case DorisParser.COMPUTE:
                        {
                        this.state = 1413;
                        this.match(DorisParser.COMPUTE);
                        this.state = 1414;
                        this.match(DorisParser.GROUP);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1417;
                    (localContext as WarmUpClusterContext)._source = this.identifier();
                    }
                    break;
                case DorisParser.TABLE:
                    {
                    {
                    this.state = 1418;
                    this.warmUpItem();
                    this.state = 1423;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 25) {
                        {
                        {
                        this.state = 1419;
                        this.match(DorisParser.AND);
                        this.state = 1420;
                        this.warmUpItem();
                        }
                        }
                        this.state = 1425;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1429;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 1428;
                    this.match(DorisParser.FORCE);
                    }
                }

                }
                break;
            case DorisParser.BACKUP:
                localContext = new BackupContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1431;
                this.match(DorisParser.BACKUP);
                this.state = 1432;
                this.match(DorisParser.SNAPSHOT);
                this.state = 1433;
                (localContext as BackupContext)._label = this.multipartIdentifier();
                this.state = 1434;
                this.match(DorisParser.TO);
                this.state = 1435;
                (localContext as BackupContext)._repo = this.identifier();
                this.state = 1448;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 173 || _la === 317) {
                    {
                    this.state = 1436;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 173 || _la === 317)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1437;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 1438;
                    this.baseTableRef();
                    this.state = 1443;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1439;
                        this.match(DorisParser.COMMA);
                        this.state = 1440;
                        this.baseTableRef();
                        }
                        }
                        this.state = 1445;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 1446;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                this.state = 1451;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 1450;
                    (localContext as BackupContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case DorisParser.RESTORE:
                localContext = new RestoreContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1453;
                this.match(DorisParser.RESTORE);
                this.state = 1454;
                this.match(DorisParser.SNAPSHOT);
                this.state = 1455;
                (localContext as RestoreContext)._label = this.multipartIdentifier();
                this.state = 1456;
                this.match(DorisParser.FROM);
                this.state = 1457;
                (localContext as RestoreContext)._repo = this.identifier();
                this.state = 1470;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 173 || _la === 317) {
                    {
                    this.state = 1458;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 173 || _la === 317)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1459;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 1460;
                    this.baseTableRef();
                    this.state = 1465;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1461;
                        this.match(DorisParser.COMMA);
                        this.state = 1462;
                        this.baseTableRef();
                        }
                        }
                        this.state = 1467;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 1468;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                this.state = 1473;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 1472;
                    (localContext as RestoreContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case DorisParser.START:
                localContext = new UnsupportedStartTransactionContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1475;
                this.match(DorisParser.START);
                this.state = 1476;
                this.match(DorisParser.TRANSACTION);
                this.state = 1480;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 160, this.context) ) {
                case 1:
                    {
                    this.state = 1477;
                    this.match(DorisParser.WITH);
                    this.state = 1478;
                    this.match(DorisParser.CONSISTENT);
                    this.state = 1479;
                    this.match(DorisParser.SNAPSHOT);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public warmUpItem(): WarmUpItemContext {
        let localContext = new WarmUpItemContext(this.context, this.state);
        this.enterRule(localContext, 32, DorisParser.RULE_warmUpItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1484;
            this.match(DorisParser.TABLE);
            this.state = 1485;
            localContext._tableName = this.multipartIdentifier();
            this.state = 1488;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 329) {
                {
                this.state = 1486;
                this.match(DorisParser.PARTITION);
                this.state = 1487;
                localContext._partitionName = this.identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockTable(): LockTableContext {
        let localContext = new LockTableContext(this.context, this.state);
        this.enterRule(localContext, 34, DorisParser.RULE_lockTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1490;
            localContext._name = this.multipartIdentifier();
            this.state = 1493;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 1491;
                this.match(DorisParser.AS);
                this.state = 1492;
                localContext._alias = this.identifierOrText();
                }
            }

            this.state = 1503;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.READ:
                {
                this.state = 1495;
                this.match(DorisParser.READ);
                this.state = 1497;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 273) {
                    {
                    this.state = 1496;
                    this.match(DorisParser.LOCAL);
                    }
                }

                }
                break;
            case DorisParser.LOW_PRIORITY:
            case DorisParser.WRITE:
                {
                this.state = 1500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 279) {
                    {
                    this.state = 1499;
                    this.match(DorisParser.LOW_PRIORITY);
                    }
                }

                this.state = 1502;
                this.match(DorisParser.WRITE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedShowStatement(): UnsupportedShowStatementContext {
        let localContext = new UnsupportedShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 36, DorisParser.RULE_unsupportedShowStatement);
        let _la: number;
        try {
            this.state = 2038;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 272, this.context) ) {
            case 1:
                localContext = new ShowRowPolicyContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1505;
                this.match(DorisParser.SHOW);
                this.state = 1506;
                this.match(DorisParser.ROW);
                this.state = 1507;
                this.match(DorisParser.POLICY);
                this.state = 1514;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 1508;
                    this.match(DorisParser.FOR);
                    this.state = 1512;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case DorisParser.LEFT_BRACE:
                    case DorisParser.RIGHT_BRACE:
                    case DorisParser.ACTIONS:
                    case DorisParser.ADDDATE:
                    case DorisParser.AFTER:
                    case DorisParser.AGG_STATE:
                    case DorisParser.AGGREGATE:
                    case DorisParser.ALIAS:
                    case DorisParser.ANALYZED:
                    case DorisParser.ARRAY:
                    case DorisParser.ARRAY_RANGE:
                    case DorisParser.AT:
                    case DorisParser.AUTHORS:
                    case DorisParser.AUTO_INCREMENT:
                    case DorisParser.ALWAYS:
                    case DorisParser.BACKENDS:
                    case DorisParser.BACKUP:
                    case DorisParser.BEGIN:
                    case DorisParser.BELONG:
                    case DorisParser.BIN:
                    case DorisParser.BITAND:
                    case DorisParser.BITMAP:
                    case DorisParser.BITMAP_EMPTY:
                    case DorisParser.BITMAP_UNION:
                    case DorisParser.BITOR:
                    case DorisParser.BITXOR:
                    case DorisParser.BLOB:
                    case DorisParser.BOOLEAN:
                    case DorisParser.BRIEF:
                    case DorisParser.BROKER:
                    case DorisParser.BUCKETS:
                    case DorisParser.BUILD:
                    case DorisParser.BUILTIN:
                    case DorisParser.BULK:
                    case DorisParser.CACHE:
                    case DorisParser.CACHED:
                    case DorisParser.CALL:
                    case DorisParser.CATALOG:
                    case DorisParser.CATALOGS:
                    case DorisParser.CHAIN:
                    case DorisParser.CHAR:
                    case DorisParser.CHARSET:
                    case DorisParser.CHECK:
                    case DorisParser.CLUSTER:
                    case DorisParser.CLUSTERS:
                    case DorisParser.COLLATION:
                    case DorisParser.COLLECT:
                    case DorisParser.COLOCATE:
                    case DorisParser.COLUMNS:
                    case DorisParser.COMMENT:
                    case DorisParser.COMMIT:
                    case DorisParser.COMMITTED:
                    case DorisParser.COMPACT:
                    case DorisParser.COMPLETE:
                    case DorisParser.COMPRESS_TYPE:
                    case DorisParser.COMPUTE:
                    case DorisParser.CONDITIONS:
                    case DorisParser.CONFIG:
                    case DorisParser.CONNECTION:
                    case DorisParser.CONNECTION_ID:
                    case DorisParser.CONSISTENT:
                    case DorisParser.CONSTRAINTS:
                    case DorisParser.CONVERT:
                    case DorisParser.CONVERT_LSC:
                    case DorisParser.COPY:
                    case DorisParser.COUNT:
                    case DorisParser.CREATION:
                    case DorisParser.CRON:
                    case DorisParser.CURRENT_CATALOG:
                    case DorisParser.CURRENT_DATE:
                    case DorisParser.CURRENT_TIME:
                    case DorisParser.CURRENT_TIMESTAMP:
                    case DorisParser.CURRENT_USER:
                    case DorisParser.DATA:
                    case DorisParser.DATE:
                    case DorisParser.DATE_ADD:
                    case DorisParser.DATE_CEIL:
                    case DorisParser.DATE_DIFF:
                    case DorisParser.DATE_FLOOR:
                    case DorisParser.DATE_SUB:
                    case DorisParser.DATEADD:
                    case DorisParser.DATEDIFF:
                    case DorisParser.DATETIME:
                    case DorisParser.DATETIMEV2:
                    case DorisParser.DATEV2:
                    case DorisParser.DATETIMEV1:
                    case DorisParser.DATEV1:
                    case DorisParser.DAY:
                    case DorisParser.DAYS_ADD:
                    case DorisParser.DAYS_SUB:
                    case DorisParser.DECIMAL:
                    case DorisParser.DECIMALV2:
                    case DorisParser.DECIMALV3:
                    case DorisParser.DEFERRED:
                    case DorisParser.DEMAND:
                    case DorisParser.DIAGNOSE:
                    case DorisParser.DIAGNOSIS:
                    case DorisParser.DISTINCTPC:
                    case DorisParser.DISTINCTPCSA:
                    case DorisParser.DO:
                    case DorisParser.DORIS_INTERNAL_TABLE_ID:
                    case DorisParser.DUAL:
                    case DorisParser.DYNAMIC:
                    case DorisParser.E:
                    case DorisParser.ENABLE:
                    case DorisParser.ENCRYPTKEY:
                    case DorisParser.ENCRYPTKEYS:
                    case DorisParser.END:
                    case DorisParser.ENDS:
                    case DorisParser.ENGINE:
                    case DorisParser.ENGINES:
                    case DorisParser.ERRORS:
                    case DorisParser.EVENTS:
                    case DorisParser.EVERY:
                    case DorisParser.EXCLUDE:
                    case DorisParser.EXPIRED:
                    case DorisParser.EXTERNAL:
                    case DorisParser.FAILED_LOGIN_ATTEMPTS:
                    case DorisParser.FAST:
                    case DorisParser.FEATURE:
                    case DorisParser.FIELDS:
                    case DorisParser.FILE:
                    case DorisParser.FILTER:
                    case DorisParser.FIRST:
                    case DorisParser.FORMAT:
                    case DorisParser.FREE:
                    case DorisParser.FRONTENDS:
                    case DorisParser.FUNCTION:
                    case DorisParser.GENERATED:
                    case DorisParser.GENERIC:
                    case DorisParser.GLOBAL:
                    case DorisParser.GRAPH:
                    case DorisParser.GROUPING:
                    case DorisParser.GROUPS:
                    case DorisParser.HASH:
                    case DorisParser.HDFS:
                    case DorisParser.HELP:
                    case DorisParser.HISTOGRAM:
                    case DorisParser.HLL_UNION:
                    case DorisParser.HOSTNAME:
                    case DorisParser.HOTSPOT:
                    case DorisParser.HOUR:
                    case DorisParser.HUB:
                    case DorisParser.IDENTIFIED:
                    case DorisParser.IGNORE:
                    case DorisParser.IMMEDIATE:
                    case DorisParser.INCREMENTAL:
                    case DorisParser.INDEXES:
                    case DorisParser.INVERTED:
                    case DorisParser.IPV4:
                    case DorisParser.IPV6:
                    case DorisParser.IS_NOT_NULL_PRED:
                    case DorisParser.IS_NULL_PRED:
                    case DorisParser.ISNULL:
                    case DorisParser.ISOLATION:
                    case DorisParser.JOB:
                    case DorisParser.JOBS:
                    case DorisParser.JSON:
                    case DorisParser.JSONB:
                    case DorisParser.LABEL:
                    case DorisParser.LAST:
                    case DorisParser.LDAP:
                    case DorisParser.LDAP_ADMIN_PASSWORD:
                    case DorisParser.LESS:
                    case DorisParser.LEVEL:
                    case DorisParser.LINES:
                    case DorisParser.LINK:
                    case DorisParser.LOCAL:
                    case DorisParser.LOCALTIME:
                    case DorisParser.LOCALTIMESTAMP:
                    case DorisParser.LOCATION:
                    case DorisParser.LOCK:
                    case DorisParser.LOGICAL:
                    case DorisParser.MANUAL:
                    case DorisParser.MAP:
                    case DorisParser.MATCH_ALL:
                    case DorisParser.MATCH_ANY:
                    case DorisParser.MATCH_PHRASE:
                    case DorisParser.MATCH_PHRASE_EDGE:
                    case DorisParser.MATCH_PHRASE_PREFIX:
                    case DorisParser.MATCH_REGEXP:
                    case DorisParser.MATERIALIZED:
                    case DorisParser.MAX:
                    case DorisParser.MEMO:
                    case DorisParser.MERGE:
                    case DorisParser.MIGRATE:
                    case DorisParser.MIGRATIONS:
                    case DorisParser.MIN:
                    case DorisParser.MINUTE:
                    case DorisParser.MODIFY:
                    case DorisParser.MONTH:
                    case DorisParser.MTMV:
                    case DorisParser.NAME:
                    case DorisParser.NAMES:
                    case DorisParser.NEGATIVE:
                    case DorisParser.NEVER:
                    case DorisParser.NEXT:
                    case DorisParser.NGRAM_BF:
                    case DorisParser.NO:
                    case DorisParser.NON_NULLABLE:
                    case DorisParser.NULLS:
                    case DorisParser.OF:
                    case DorisParser.OFFSET:
                    case DorisParser.ONLY:
                    case DorisParser.OPEN:
                    case DorisParser.OPTIMIZED:
                    case DorisParser.PARAMETER:
                    case DorisParser.PARSED:
                    case DorisParser.PARTITIONS:
                    case DorisParser.PASSWORD:
                    case DorisParser.PASSWORD_EXPIRE:
                    case DorisParser.PASSWORD_HISTORY:
                    case DorisParser.PASSWORD_LOCK_TIME:
                    case DorisParser.PASSWORD_REUSE:
                    case DorisParser.PATH:
                    case DorisParser.PAUSE:
                    case DorisParser.PERCENT:
                    case DorisParser.PERIOD:
                    case DorisParser.PERMISSIVE:
                    case DorisParser.PHYSICAL:
                    case DorisParser.PI:
                    case DorisParser.PLAN:
                    case DorisParser.PRIVILEGES:
                    case DorisParser.PROCESS:
                    case DorisParser.PLUGIN:
                    case DorisParser.PLUGINS:
                    case DorisParser.POLICY:
                    case DorisParser.PROC:
                    case DorisParser.PROCESSLIST:
                    case DorisParser.PROFILE:
                    case DorisParser.PROPERTIES:
                    case DorisParser.PROPERTY:
                    case DorisParser.QUANTILE_STATE:
                    case DorisParser.QUANTILE_UNION:
                    case DorisParser.QUERY:
                    case DorisParser.QUOTA:
                    case DorisParser.QUALIFY:
                    case DorisParser.RANDOM:
                    case DorisParser.RECENT:
                    case DorisParser.RECOVER:
                    case DorisParser.RECYCLE:
                    case DorisParser.REFRESH:
                    case DorisParser.REPEATABLE:
                    case DorisParser.REPLACE:
                    case DorisParser.REPLACE_IF_NOT_NULL:
                    case DorisParser.REPLAYER:
                    case DorisParser.REPOSITORIES:
                    case DorisParser.REPOSITORY:
                    case DorisParser.RESOURCE:
                    case DorisParser.RESOURCES:
                    case DorisParser.RESTORE:
                    case DorisParser.RESTRICTIVE:
                    case DorisParser.RESUME:
                    case DorisParser.RETURNS:
                    case DorisParser.REWRITTEN:
                    case DorisParser.RLIKE:
                    case DorisParser.ROLLBACK:
                    case DorisParser.ROLLUP:
                    case DorisParser.ROUTINE:
                    case DorisParser.S3:
                    case DorisParser.SAMPLE:
                    case DorisParser.SCHEDULE:
                    case DorisParser.SCHEDULER:
                    case DorisParser.SCHEMA:
                    case DorisParser.SECOND:
                    case DorisParser.SEQUENCE:
                    case DorisParser.SERIALIZABLE:
                    case DorisParser.SESSION:
                    case DorisParser.SESSION_USER:
                    case DorisParser.SET_SESSION_VARIABLE:
                    case DorisParser.SHAPE:
                    case DorisParser.SKEW:
                    case DorisParser.SNAPSHOT:
                    case DorisParser.SONAME:
                    case DorisParser.SPLIT:
                    case DorisParser.SQL:
                    case DorisParser.STAGE:
                    case DorisParser.STAGES:
                    case DorisParser.START:
                    case DorisParser.STARTS:
                    case DorisParser.STATS:
                    case DorisParser.STATUS:
                    case DorisParser.STOP:
                    case DorisParser.STORAGE:
                    case DorisParser.STREAM:
                    case DorisParser.STREAMING:
                    case DorisParser.STRING:
                    case DorisParser.STRUCT:
                    case DorisParser.SUBDATE:
                    case DorisParser.SUM:
                    case DorisParser.TABLES:
                    case DorisParser.TASK:
                    case DorisParser.TASKS:
                    case DorisParser.TEMPORARY:
                    case DorisParser.TEXT:
                    case DorisParser.THAN:
                    case DorisParser.TIME:
                    case DorisParser.TIMESTAMP:
                    case DorisParser.TIMESTAMPADD:
                    case DorisParser.TIMESTAMPDIFF:
                    case DorisParser.TRANSACTION:
                    case DorisParser.TREE:
                    case DorisParser.TRIGGERS:
                    case DorisParser.TRUNCATE:
                    case DorisParser.TYPE:
                    case DorisParser.TYPES:
                    case DorisParser.UNCOMMITTED:
                    case DorisParser.UNLOCK:
                    case DorisParser.UNSET:
                    case DorisParser.UP:
                    case DorisParser.USER:
                    case DorisParser.VALUE:
                    case DorisParser.VARCHAR:
                    case DorisParser.VARIABLE:
                    case DorisParser.VARIABLES:
                    case DorisParser.VARIANT:
                    case DorisParser.VAULT:
                    case DorisParser.VAULTS:
                    case DorisParser.VERBOSE:
                    case DorisParser.VERSION:
                    case DorisParser.VIEW:
                    case DorisParser.VIEWS:
                    case DorisParser.WARM:
                    case DorisParser.WARNINGS:
                    case DorisParser.WEEK:
                    case DorisParser.WORK:
                    case DorisParser.YEAR:
                    case DorisParser.HINT_START:
                    case DorisParser.HINT_END:
                    case DorisParser.COMMENT_START:
                    case DorisParser.STRING_LITERAL:
                    case DorisParser.IDENTIFIER:
                    case DorisParser.BACKQUOTED_IDENTIFIER:
                        {
                        this.state = 1509;
                        this.userIdentify();
                        }
                        break;
                    case DorisParser.ROLE:
                        {
                        {
                        this.state = 1510;
                        this.match(DorisParser.ROLE);
                        this.state = 1511;
                        (localContext as ShowRowPolicyContext)._role = this.identifier();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                }
                break;
            case 2:
                localContext = new ShowStoragePolicyContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1516;
                this.match(DorisParser.SHOW);
                this.state = 1517;
                this.match(DorisParser.STORAGE);
                this.state = 1518;
                this.match(DorisParser.POLICY);
                this.state = 1524;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 487) {
                    {
                    this.state = 1519;
                    this.match(DorisParser.USING);
                    this.state = 1522;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 193) {
                        {
                        this.state = 1520;
                        this.match(DorisParser.FOR);
                        this.state = 1521;
                        (localContext as ShowStoragePolicyContext)._policy = this.identifierOrText();
                        }
                    }

                    }
                }

                }
                break;
            case 3:
                localContext = new ShowStagesContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1526;
                this.match(DorisParser.SHOW);
                this.state = 1527;
                this.match(DorisParser.STAGES);
                }
                break;
            case 4:
                localContext = new ShowStorageVaultContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1528;
                this.match(DorisParser.SHOW);
                this.state = 1529;
                this.match(DorisParser.STORAGE);
                this.state = 1530;
                _la = this.tokenStream.LA(1);
                if(!(_la === 494 || _la === 495)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 5:
                localContext = new ShowCreateRepositoryContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1531;
                this.match(DorisParser.SHOW);
                this.state = 1532;
                this.match(DorisParser.CREATE);
                this.state = 1533;
                this.match(DorisParser.REPOSITORY);
                this.state = 1534;
                this.match(DorisParser.FOR);
                this.state = 1535;
                this.identifier();
                }
                break;
            case 6:
                localContext = new ShowOpenTablesContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1536;
                this.match(DorisParser.SHOW);
                this.state = 1537;
                this.match(DorisParser.OPEN);
                this.state = 1538;
                this.match(DorisParser.TABLES);
                this.state = 1541;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1539;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1540;
                    (localContext as ShowOpenTablesContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1544;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1543;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 7:
                localContext = new ShowTableStatusContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1546;
                this.match(DorisParser.SHOW);
                this.state = 1547;
                this.match(DorisParser.TABLE);
                this.state = 1548;
                this.match(DorisParser.STATUS);
                this.state = 1551;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1549;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1550;
                    (localContext as ShowTableStatusContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1554;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1553;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 8:
                localContext = new ShowTablesContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1556;
                this.match(DorisParser.SHOW);
                this.state = 1558;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 201) {
                    {
                    this.state = 1557;
                    this.match(DorisParser.FULL);
                    }
                }

                this.state = 1560;
                this.match(DorisParser.TABLES);
                this.state = 1563;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1561;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1562;
                    (localContext as ShowTablesContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1566;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1565;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 9:
                localContext = new ShowViewsContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1568;
                this.match(DorisParser.SHOW);
                this.state = 1570;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 201) {
                    {
                    this.state = 1569;
                    this.match(DorisParser.FULL);
                    }
                }

                this.state = 1572;
                this.match(DorisParser.VIEWS);
                this.state = 1575;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1573;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1574;
                    (localContext as ShowViewsContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1578;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1577;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 10:
                localContext = new ShowProcessListContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1580;
                this.match(DorisParser.SHOW);
                this.state = 1582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 201) {
                    {
                    this.state = 1581;
                    this.match(DorisParser.FULL);
                    }
                }

                this.state = 1584;
                this.match(DorisParser.PROCESSLIST);
                }
                break;
            case 11:
                localContext = new ShowStatusContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1585;
                this.match(DorisParser.SHOW);
                this.state = 1587;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206 || _la === 273 || _la === 414) {
                    {
                    this.state = 1586;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 206 || _la === 273 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1589;
                this.match(DorisParser.STATUS);
                this.state = 1591;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1590;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 12:
                localContext = new ShowMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1593;
                this.match(DorisParser.SHOW);
                this.state = 1594;
                this.match(DorisParser.CREATE);
                this.state = 1595;
                this.match(DorisParser.MATERIALIZED);
                this.state = 1596;
                this.match(DorisParser.VIEW);
                this.state = 1597;
                (localContext as ShowMaterializedViewContext)._name = this.multipartIdentifier();
                }
                break;
            case 13:
                localContext = new ShowCreateDatabaseContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1598;
                this.match(DorisParser.SHOW);
                this.state = 1599;
                this.match(DorisParser.CREATE);
                this.state = 1600;
                _la = this.tokenStream.LA(1);
                if(!(_la === 113 || _la === 407)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1601;
                (localContext as ShowCreateDatabaseContext)._name = this.multipartIdentifier();
                }
                break;
            case 14:
                localContext = new ShowCreateFunctionContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1602;
                this.match(DorisParser.SHOW);
                this.state = 1603;
                this.match(DorisParser.CREATE);
                this.state = 1605;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206 || _la === 273 || _la === 414) {
                    {
                    this.state = 1604;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 206 || _la === 273 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1607;
                this.match(DorisParser.FUNCTION);
                this.state = 1608;
                this.functionIdentifier();
                this.state = 1609;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 1611;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 270794816) !== 0) || ((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & 268437537) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & 466689) !== 0) || _la === 152 || _la === 190 || _la === 218 || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & 8782211) !== 0) || _la === 281 || _la === 360 || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & 196609) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 137) !== 0) || _la === 490 || _la === 493) {
                    {
                    this.state = 1610;
                    this.functionArguments();
                    }
                }

                this.state = 1613;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 1616;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1614;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1615;
                    (localContext as ShowCreateFunctionContext)._database = this.multipartIdentifier();
                    }
                }

                }
                break;
            case 15:
                localContext = new ShowDatabasesContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1618;
                this.match(DorisParser.SHOW);
                this.state = 1619;
                _la = this.tokenStream.LA(1);
                if(!(_la === 114 || _la === 408)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1622;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 1620;
                    this.match(DorisParser.FROM);
                    this.state = 1621;
                    (localContext as ShowDatabasesContext)._catalog = this.identifier();
                    }
                }

                this.state = 1625;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1624;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 16:
                localContext = new ShowDatabaseIdContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1627;
                this.match(DorisParser.SHOW);
                this.state = 1628;
                this.match(DorisParser.DATABASE);
                this.state = 1629;
                (localContext as ShowDatabaseIdContext)._databaseId = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 17:
                localContext = new ShowDataTypesContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1630;
                this.match(DorisParser.SHOW);
                this.state = 1631;
                this.match(DorisParser.DATA);
                this.state = 1632;
                this.match(DorisParser.TYPES);
                }
                break;
            case 18:
                localContext = new ShowCatalogsContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1633;
                this.match(DorisParser.SHOW);
                this.state = 1634;
                this.match(DorisParser.CATALOGS);
                this.state = 1636;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1635;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 19:
                localContext = new ShowCatalogContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1638;
                this.match(DorisParser.SHOW);
                this.state = 1639;
                this.match(DorisParser.CATALOG);
                this.state = 1640;
                (localContext as ShowCatalogContext)._name = this.identifier();
                }
                break;
            case 20:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1641;
                this.match(DorisParser.SHOW);
                this.state = 1643;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 201) {
                    {
                    this.state = 1642;
                    this.match(DorisParser.FULL);
                    }
                }

                this.state = 1645;
                _la = this.tokenStream.LA(1);
                if(!(_la === 82 || _la === 186)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1646;
                _la = this.tokenStream.LA(1);
                if(!(_la === 198 || _la === 228)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1647;
                (localContext as ShowColumnsContext)._tableName = this.multipartIdentifier();
                this.state = 1650;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1648;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1649;
                    (localContext as ShowColumnsContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1653;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1652;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 21:
                localContext = new ShowCollationContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1655;
                this.match(DorisParser.SHOW);
                this.state = 1656;
                this.match(DorisParser.COLLATION);
                this.state = 1658;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1657;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 22:
                localContext = new ShowCharsetContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1660;
                this.match(DorisParser.SHOW);
                this.state = 1664;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.CHAR:
                    {
                    {
                    this.state = 1661;
                    this.match(DorisParser.CHAR);
                    this.state = 1662;
                    this.match(DorisParser.SET);
                    }
                    }
                    break;
                case DorisParser.CHARSET:
                    {
                    this.state = 1663;
                    this.match(DorisParser.CHARSET);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1667;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1666;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 23:
                localContext = new ShowWaringErrorCountContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1669;
                this.match(DorisParser.SHOW);
                this.state = 1670;
                this.match(DorisParser.COUNT);
                this.state = 1671;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 1672;
                this.match(DorisParser.ASTERISK);
                this.state = 1673;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 1674;
                _la = this.tokenStream.LA(1);
                if(!(_la === 169 || _la === 501)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 24:
                localContext = new ShowWaringErrorsContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1675;
                this.match(DorisParser.SHOW);
                this.state = 1676;
                _la = this.tokenStream.LA(1);
                if(!(_la === 169 || _la === 501)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1678;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 1677;
                    this.limitClause();
                    }
                }

                }
                break;
            case 25:
                localContext = new ShowLoadWaringsContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1680;
                this.match(DorisParser.SHOW);
                this.state = 1681;
                this.match(DorisParser.LOAD);
                this.state = 1682;
                this.match(DorisParser.WARNINGS);
                this.state = 1695;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.EOF:
                case DorisParser.SEMICOLON:
                case DorisParser.LEFT_PAREN:
                case DorisParser.ADMIN:
                case DorisParser.ALTER:
                case DorisParser.ANALYZE:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BUILD:
                case DorisParser.CALL:
                case DorisParser.CANCEL:
                case DorisParser.CLEAN:
                case DorisParser.COMMIT:
                case DorisParser.COPY:
                case DorisParser.CREATE:
                case DorisParser.DELETE:
                case DorisParser.DESC:
                case DorisParser.DESCRIBE:
                case DorisParser.DROP:
                case DorisParser.EXPLAIN:
                case DorisParser.EXPORT:
                case DorisParser.FROM:
                case DorisParser.GRANT:
                case DorisParser.HELP:
                case DorisParser.IN:
                case DorisParser.INSERT:
                case DorisParser.INSTALL:
                case DorisParser.KILL:
                case DorisParser.LIKE:
                case DorisParser.LIMIT:
                case DorisParser.LOAD:
                case DorisParser.LOCK:
                case DorisParser.PAUSE:
                case DorisParser.PLAN:
                case DorisParser.RECOVER:
                case DorisParser.REFRESH:
                case DorisParser.REPLACE:
                case DorisParser.RESTORE:
                case DorisParser.RESUME:
                case DorisParser.REVOKE:
                case DorisParser.ROLLBACK:
                case DorisParser.SELECT:
                case DorisParser.SET:
                case DorisParser.SHOW:
                case DorisParser.START:
                case DorisParser.STOP:
                case DorisParser.SWITCH:
                case DorisParser.SYNC:
                case DorisParser.TRUNCATE:
                case DorisParser.UNINSTALL:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UPDATE:
                case DorisParser.USE:
                case DorisParser.VALUES:
                case DorisParser.WARM:
                case DorisParser.WHERE:
                case DorisParser.WITH:
                    {
                    {
                    this.state = 1685;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 198 || _la === 228) {
                        {
                        this.state = 1683;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 198 || _la === 228)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1684;
                        (localContext as ShowLoadWaringsContext)._database = this.multipartIdentifier();
                        }
                    }

                    this.state = 1688;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 267 || _la === 504) {
                        {
                        this.state = 1687;
                        this.wildWhere();
                        }
                    }

                    this.state = 1691;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 268) {
                        {
                        this.state = 1690;
                        this.limitClause();
                        }
                    }

                    }
                    }
                    break;
                case DorisParser.ON:
                    {
                    {
                    this.state = 1693;
                    this.match(DorisParser.ON);
                    this.state = 1694;
                    (localContext as ShowLoadWaringsContext)._url = this.match(DorisParser.STRING_LITERAL);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 26:
                localContext = new ShowLoadContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1697;
                this.match(DorisParser.SHOW);
                this.state = 1699;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 437) {
                    {
                    this.state = 1698;
                    this.match(DorisParser.STREAM);
                    }
                }

                this.state = 1701;
                this.match(DorisParser.LOAD);
                this.state = 1704;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1702;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1703;
                    (localContext as ShowLoadContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1707;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1706;
                    this.wildWhere();
                    }
                }

                this.state = 1710;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 1709;
                    this.sortClause();
                    }
                }

                this.state = 1713;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 1712;
                    this.limitClause();
                    }
                }

                }
                break;
            case 27:
                localContext = new ShowExportContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1715;
                this.match(DorisParser.SHOW);
                this.state = 1716;
                this.match(DorisParser.EXPORT);
                this.state = 1719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1717;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1718;
                    (localContext as ShowExportContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1722;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1721;
                    this.wildWhere();
                    }
                }

                this.state = 1725;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 1724;
                    this.sortClause();
                    }
                }

                this.state = 1728;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 1727;
                    this.limitClause();
                    }
                }

                }
                break;
            case 28:
                localContext = new ShowAlterTableContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1730;
                this.match(DorisParser.SHOW);
                this.state = 1731;
                this.match(DorisParser.ALTER);
                this.state = 1732;
                this.match(DorisParser.TABLE);
                this.state = 1737;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.ROLLUP:
                    {
                    this.state = 1733;
                    this.match(DorisParser.ROLLUP);
                    }
                    break;
                case DorisParser.MATERIALIZED:
                    {
                    {
                    this.state = 1734;
                    this.match(DorisParser.MATERIALIZED);
                    this.state = 1735;
                    this.match(DorisParser.VIEW);
                    }
                    }
                    break;
                case DorisParser.COLUMN:
                    {
                    this.state = 1736;
                    this.match(DorisParser.COLUMN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1741;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1739;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1740;
                    (localContext as ShowAlterTableContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1744;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1743;
                    this.wildWhere();
                    }
                }

                this.state = 1747;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 1746;
                    this.sortClause();
                    }
                }

                this.state = 1750;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 1749;
                    this.limitClause();
                    }
                }

                }
                break;
            case 29:
                localContext = new ShowDataSkewContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1752;
                this.match(DorisParser.SHOW);
                this.state = 1753;
                this.match(DorisParser.DATA);
                this.state = 1754;
                this.match(DorisParser.SKEW);
                this.state = 1755;
                this.match(DorisParser.FROM);
                this.state = 1756;
                this.baseTableRef();
                }
                break;
            case 30:
                localContext = new ShowDataContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1757;
                this.match(DorisParser.SHOW);
                this.state = 1758;
                this.match(DorisParser.DATA);
                this.state = 1761;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 1759;
                    this.match(DorisParser.FROM);
                    this.state = 1760;
                    (localContext as ShowDataContext)._tableName = this.multipartIdentifier();
                    }
                }

                this.state = 1764;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 1763;
                    this.sortClause();
                    }
                }

                this.state = 1767;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 1766;
                    this.propertyClause();
                    }
                }

                }
                break;
            case 31:
                localContext = new ShowPartitionsContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1769;
                this.match(DorisParser.SHOW);
                this.state = 1771;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 454) {
                    {
                    this.state = 1770;
                    this.match(DorisParser.TEMPORARY);
                    }
                }

                this.state = 1773;
                this.match(DorisParser.PARTITIONS);
                this.state = 1774;
                this.match(DorisParser.FROM);
                this.state = 1775;
                (localContext as ShowPartitionsContext)._tableName = this.multipartIdentifier();
                this.state = 1777;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1776;
                    this.wildWhere();
                    }
                }

                this.state = 1780;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 1779;
                    this.sortClause();
                    }
                }

                this.state = 1783;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 1782;
                    this.limitClause();
                    }
                }

                }
                break;
            case 32:
                localContext = new ShowTabletIdContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 1785;
                this.match(DorisParser.SHOW);
                this.state = 1786;
                this.match(DorisParser.TABLET);
                this.state = 1787;
                (localContext as ShowTabletIdContext)._tabletId = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 33:
                localContext = new ShowTabletsFromTableContext(localContext);
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 1788;
                this.match(DorisParser.SHOW);
                this.state = 1789;
                this.match(DorisParser.TABLETS);
                this.state = 1790;
                this.match(DorisParser.FROM);
                this.state = 1791;
                (localContext as ShowTabletsFromTableContext)._tableName = this.multipartIdentifier();
                this.state = 1793;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 1792;
                    this.partitionSpec();
                    }
                }

                this.state = 1796;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1795;
                    this.wildWhere();
                    }
                }

                this.state = 1799;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 1798;
                    this.sortClause();
                    }
                }

                this.state = 1802;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 1801;
                    this.limitClause();
                    }
                }

                }
                break;
            case 34:
                localContext = new ShowUserPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 1804;
                this.match(DorisParser.SHOW);
                this.state = 1805;
                this.match(DorisParser.PROPERTY);
                this.state = 1808;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 1806;
                    this.match(DorisParser.FOR);
                    this.state = 1807;
                    (localContext as ShowUserPropertiesContext)._user = this.identifierOrText();
                    }
                }

                this.state = 1811;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1810;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 35:
                localContext = new ShowAllPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 1813;
                this.match(DorisParser.SHOW);
                this.state = 1814;
                this.match(DorisParser.ALL);
                this.state = 1815;
                this.match(DorisParser.PROPERTIES);
                this.state = 1817;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1816;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 36:
                localContext = new ShowBackupContext(localContext);
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 1819;
                this.match(DorisParser.SHOW);
                this.state = 1820;
                this.match(DorisParser.BACKUP);
                this.state = 1823;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1821;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1822;
                    (localContext as ShowBackupContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1826;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1825;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 37:
                localContext = new ShowRestoreContext(localContext);
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 1828;
                this.match(DorisParser.SHOW);
                this.state = 1830;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 55) {
                    {
                    this.state = 1829;
                    this.match(DorisParser.BRIEF);
                    }
                }

                this.state = 1832;
                this.match(DorisParser.RESTORE);
                this.state = 1835;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1833;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1834;
                    (localContext as ShowRestoreContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1838;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1837;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 38:
                localContext = new ShowResourcesContext(localContext);
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 1840;
                this.match(DorisParser.SHOW);
                this.state = 1841;
                this.match(DorisParser.RESOURCES);
                this.state = 1843;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1842;
                    this.wildWhere();
                    }
                }

                this.state = 1846;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 1845;
                    this.sortClause();
                    }
                }

                this.state = 1849;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 1848;
                    this.limitClause();
                    }
                }

                }
                break;
            case 39:
                localContext = new ShowWorkloadGroupsContext(localContext);
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 1851;
                this.match(DorisParser.SHOW);
                this.state = 1852;
                this.match(DorisParser.WORKLOAD);
                this.state = 1853;
                this.match(DorisParser.GROUPS);
                this.state = 1855;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1854;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 40:
                localContext = new ShowTrashContext(localContext);
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 1857;
                this.match(DorisParser.SHOW);
                this.state = 1858;
                this.match(DorisParser.TRASH);
                this.state = 1861;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 317) {
                    {
                    this.state = 1859;
                    this.match(DorisParser.ON);
                    this.state = 1860;
                    (localContext as ShowTrashContext)._backend = this.match(DorisParser.STRING_LITERAL);
                    }
                }

                }
                break;
            case 41:
                localContext = new ShowSnapshotContext(localContext);
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 1863;
                this.match(DorisParser.SHOW);
                this.state = 1864;
                this.match(DorisParser.SNAPSHOT);
                this.state = 1865;
                this.match(DorisParser.ON);
                this.state = 1866;
                (localContext as ShowSnapshotContext)._repo = this.identifier();
                this.state = 1868;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1867;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 42:
                localContext = new ShowFunctionsContext(localContext);
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 1870;
                this.match(DorisParser.SHOW);
                this.state = 1872;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 201) {
                    {
                    this.state = 1871;
                    this.match(DorisParser.FULL);
                    }
                }

                this.state = 1875;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 59) {
                    {
                    this.state = 1874;
                    this.match(DorisParser.BUILTIN);
                    }
                }

                this.state = 1877;
                this.match(DorisParser.FUNCTIONS);
                this.state = 1880;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1878;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1879;
                    (localContext as ShowFunctionsContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1883;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1882;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 43:
                localContext = new ShowGlobalFunctionsContext(localContext);
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 1885;
                this.match(DorisParser.SHOW);
                this.state = 1886;
                this.match(DorisParser.GLOBAL);
                this.state = 1888;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 201) {
                    {
                    this.state = 1887;
                    this.match(DorisParser.FULL);
                    }
                }

                this.state = 1890;
                this.match(DorisParser.FUNCTIONS);
                this.state = 1892;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1891;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 44:
                localContext = new ShowTypeCastContext(localContext);
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 1894;
                this.match(DorisParser.SHOW);
                this.state = 1895;
                this.match(DorisParser.TYPECAST);
                this.state = 1898;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1896;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1897;
                    (localContext as ShowTypeCastContext)._database = this.multipartIdentifier();
                    }
                }

                }
                break;
            case 45:
                localContext = new ShowIndexContext(localContext);
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 1900;
                this.match(DorisParser.SHOW);
                this.state = 1901;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 100663299) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1902;
                _la = this.tokenStream.LA(1);
                if(!(_la === 198 || _la === 228)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1903;
                (localContext as ShowIndexContext)._tableName = this.multipartIdentifier();
                this.state = 1906;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1904;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1905;
                    (localContext as ShowIndexContext)._database = this.multipartIdentifier();
                    }
                }

                }
                break;
            case 46:
                localContext = new ShowTransactionContext(localContext);
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 1908;
                this.match(DorisParser.SHOW);
                this.state = 1909;
                this.match(DorisParser.TRANSACTION);
                this.state = 1912;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1910;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1911;
                    (localContext as ShowTransactionContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1915;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1914;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 47:
                localContext = new ShowQueryProfileContext(localContext);
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 1917;
                this.match(DorisParser.SHOW);
                this.state = 1918;
                this.match(DorisParser.QUERY);
                this.state = 1919;
                this.match(DorisParser.PROFILE);
                this.state = 1920;
                (localContext as ShowQueryProfileContext)._queryIdPath = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 48:
                localContext = new ShowCacheHotSpotContext(localContext);
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 1921;
                this.match(DorisParser.SHOW);
                this.state = 1922;
                this.match(DorisParser.CACHE);
                this.state = 1923;
                this.match(DorisParser.HOTSPOT);
                this.state = 1924;
                (localContext as ShowCacheHotSpotContext)._tablePath = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 49:
                localContext = new ShowEncryptKeysContext(localContext);
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 1925;
                this.match(DorisParser.SHOW);
                this.state = 1926;
                this.match(DorisParser.ENCRYPTKEYS);
                this.state = 1929;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1927;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1928;
                    (localContext as ShowEncryptKeysContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1932;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1931;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 50:
                localContext = new ShowSyncJobContext(localContext);
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 1934;
                this.match(DorisParser.SHOW);
                this.state = 1935;
                this.match(DorisParser.SYNC);
                this.state = 1936;
                this.match(DorisParser.JOB);
                this.state = 1939;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1937;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1938;
                    (localContext as ShowSyncJobContext)._database = this.multipartIdentifier();
                    }
                }

                }
                break;
            case 51:
                localContext = new ShowTableCreationContext(localContext);
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 1941;
                this.match(DorisParser.SHOW);
                this.state = 1942;
                this.match(DorisParser.TABLE);
                this.state = 1943;
                this.match(DorisParser.CREATION);
                this.state = 1946;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1944;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1945;
                    (localContext as ShowTableCreationContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1949;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1948;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 52:
                localContext = new ShowCatalogRecycleBinContext(localContext);
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 1951;
                this.match(DorisParser.SHOW);
                this.state = 1952;
                this.match(DorisParser.CATALOG);
                this.state = 1953;
                this.match(DorisParser.RECYCLE);
                this.state = 1954;
                this.match(DorisParser.BIN);
                this.state = 1956;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1955;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 53:
                localContext = new ShowQueryStatsContext(localContext);
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 1958;
                this.match(DorisParser.SHOW);
                this.state = 1959;
                this.match(DorisParser.QUERY);
                this.state = 1960;
                this.match(DorisParser.STATS);
                this.state = 1971;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.FOR:
                    {
                    {
                    this.state = 1961;
                    this.match(DorisParser.FOR);
                    this.state = 1962;
                    (localContext as ShowQueryStatsContext)._database = this.identifier();
                    }
                    }
                    break;
                case DorisParser.FROM:
                    {
                    {
                    this.state = 1963;
                    this.match(DorisParser.FROM);
                    this.state = 1964;
                    (localContext as ShowQueryStatsContext)._tableName = this.multipartIdentifier();
                    this.state = 1969;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 21) {
                        {
                        this.state = 1965;
                        this.match(DorisParser.ALL);
                        this.state = 1967;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 496) {
                            {
                            this.state = 1966;
                            this.match(DorisParser.VERBOSE);
                            }
                        }

                        }
                    }

                    }
                    }
                    break;
                case DorisParser.EOF:
                case DorisParser.SEMICOLON:
                case DorisParser.LEFT_PAREN:
                case DorisParser.ADMIN:
                case DorisParser.ALTER:
                case DorisParser.ANALYZE:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BUILD:
                case DorisParser.CALL:
                case DorisParser.CANCEL:
                case DorisParser.CLEAN:
                case DorisParser.COMMIT:
                case DorisParser.COPY:
                case DorisParser.CREATE:
                case DorisParser.DELETE:
                case DorisParser.DESC:
                case DorisParser.DESCRIBE:
                case DorisParser.DROP:
                case DorisParser.EXPLAIN:
                case DorisParser.EXPORT:
                case DorisParser.GRANT:
                case DorisParser.HELP:
                case DorisParser.INSERT:
                case DorisParser.INSTALL:
                case DorisParser.KILL:
                case DorisParser.LOAD:
                case DorisParser.LOCK:
                case DorisParser.PAUSE:
                case DorisParser.PLAN:
                case DorisParser.RECOVER:
                case DorisParser.REFRESH:
                case DorisParser.REPLACE:
                case DorisParser.RESTORE:
                case DorisParser.RESUME:
                case DorisParser.REVOKE:
                case DorisParser.ROLLBACK:
                case DorisParser.SELECT:
                case DorisParser.SET:
                case DorisParser.SHOW:
                case DorisParser.START:
                case DorisParser.STOP:
                case DorisParser.SWITCH:
                case DorisParser.SYNC:
                case DorisParser.TRUNCATE:
                case DorisParser.UNINSTALL:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UPDATE:
                case DorisParser.USE:
                case DorisParser.VALUES:
                case DorisParser.WARM:
                case DorisParser.WITH:
                    break;
                default:
                    break;
                }
                }
                break;
            case 54:
                localContext = new ShowBuildIndexContext(localContext);
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 1973;
                this.match(DorisParser.SHOW);
                this.state = 1974;
                this.match(DorisParser.BUILD);
                this.state = 1975;
                this.match(DorisParser.INDEX);
                this.state = 1978;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1976;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1977;
                    (localContext as ShowBuildIndexContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 1981;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 1980;
                    this.wildWhere();
                    }
                }

                this.state = 1984;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 1983;
                    this.sortClause();
                    }
                }

                this.state = 1987;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 1986;
                    this.limitClause();
                    }
                }

                }
                break;
            case 55:
                localContext = new ShowClustersContext(localContext);
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 1989;
                this.match(DorisParser.SHOW);
                this.state = 1993;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.CLUSTERS:
                    {
                    this.state = 1990;
                    this.match(DorisParser.CLUSTERS);
                    }
                    break;
                case DorisParser.COMPUTE:
                    {
                    {
                    this.state = 1991;
                    this.match(DorisParser.COMPUTE);
                    this.state = 1992;
                    this.match(DorisParser.GROUPS);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 56:
                localContext = new ShowConvertLscContext(localContext);
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 1995;
                this.match(DorisParser.SHOW);
                this.state = 1996;
                this.match(DorisParser.CONVERT_LSC);
                this.state = 1999;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 1997;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1998;
                    (localContext as ShowConvertLscContext)._database = this.multipartIdentifier();
                    }
                }

                }
                break;
            case 57:
                localContext = new ShowReplicaStatusContext(localContext);
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 2001;
                this.match(DorisParser.SHOW);
                this.state = 2002;
                this.match(DorisParser.REPLICA);
                this.state = 2003;
                this.match(DorisParser.STATUS);
                this.state = 2004;
                this.match(DorisParser.FROM);
                this.state = 2005;
                this.baseTableRef();
                this.state = 2007;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 2006;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 58:
                localContext = new ShowTabletStorageFormatContext(localContext);
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 2009;
                this.match(DorisParser.SHOW);
                this.state = 2010;
                this.match(DorisParser.TABLET);
                this.state = 2011;
                this.match(DorisParser.STORAGE);
                this.state = 2012;
                this.match(DorisParser.FORMAT);
                this.state = 2014;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 496) {
                    {
                    this.state = 2013;
                    this.match(DorisParser.VERBOSE);
                    }
                }

                }
                break;
            case 59:
                localContext = new ShowCopyContext(localContext);
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 2016;
                this.match(DorisParser.SHOW);
                this.state = 2017;
                this.match(DorisParser.COPY);
                this.state = 2020;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 2018;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2019;
                    (localContext as ShowCopyContext)._database = this.multipartIdentifier();
                    }
                }

                this.state = 2023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 504) {
                    {
                    this.state = 2022;
                    this.whereClause();
                    }
                }

                this.state = 2026;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 2025;
                    this.sortClause();
                    }
                }

                this.state = 2029;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 2028;
                    this.limitClause();
                    }
                }

                }
                break;
            case 60:
                localContext = new ShowWarmUpJobContext(localContext);
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 2031;
                this.match(DorisParser.SHOW);
                this.state = 2032;
                this.match(DorisParser.WARM);
                this.state = 2033;
                this.match(DorisParser.UP);
                this.state = 2034;
                this.match(DorisParser.JOB);
                this.state = 2036;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 2035;
                    this.wildWhere();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRoutineLoad(): CreateRoutineLoadContext {
        let localContext = new CreateRoutineLoadContext(this.context, this.state);
        this.enterRule(localContext, 38, DorisParser.RULE_createRoutineLoad);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2040;
            this.match(DorisParser.CREATE);
            this.state = 2041;
            this.match(DorisParser.ROUTINE);
            this.state = 2042;
            this.match(DorisParser.LOAD);
            this.state = 2043;
            localContext._label = this.multipartIdentifier();
            this.state = 2046;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 317) {
                {
                this.state = 2044;
                this.match(DorisParser.ON);
                this.state = 2045;
                localContext._table = this.identifier();
                }
            }

            this.state = 2050;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 506) {
                {
                this.state = 2048;
                this.match(DorisParser.WITH);
                this.state = 2049;
                _la = this.tokenStream.LA(1);
                if(!(_la === 27 || _la === 137 || _la === 293)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2060;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82 || _la === 137 || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 536871297) !== 0) || _la === 454 || _la === 504) {
                {
                this.state = 2052;
                this.loadProperty();
                this.state = 2057;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2053;
                    this.match(DorisParser.COMMA);
                    this.state = 2054;
                    this.loadProperty();
                    }
                    }
                    this.state = 2059;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2063;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 358) {
                {
                this.state = 2062;
                this.propertyClause();
                }
            }

            this.state = 2065;
            this.match(DorisParser.FROM);
            this.state = 2066;
            localContext._type_ = this.identifier();
            this.state = 2067;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 2068;
            localContext._customProperties = this.propertyItemList();
            this.state = 2069;
            this.match(DorisParser.RIGHT_PAREN);
            this.state = 2071;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 2070;
                this.commentSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedLoadStatement(): UnsupportedLoadStatementContext {
        let localContext = new UnsupportedLoadStatementContext(this.context, this.state);
        this.enterRule(localContext, 40, DorisParser.RULE_unsupportedLoadStatement);
        let _la: number;
        try {
            this.state = 2172;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 288, this.context) ) {
            case 1:
                localContext = new MysqlLoadContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2073;
                this.match(DorisParser.LOAD);
                this.state = 2074;
                this.mysqlDataDesc();
                this.state = 2080;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2075;
                    this.match(DorisParser.PROPERTIES);
                    this.state = 2076;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 2077;
                    (localContext as MysqlLoadContext)._properties = this.propertyItemList();
                    this.state = 2078;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                this.state = 2083;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 2082;
                    this.commentSpec();
                    }
                }

                }
                break;
            case 2:
                localContext = new CreateDataSyncJobContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2085;
                this.match(DorisParser.CREATE);
                this.state = 2086;
                this.match(DorisParser.SYNC);
                this.state = 2087;
                (localContext as CreateDataSyncJobContext)._label = this.multipartIdentifier();
                this.state = 2088;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 2089;
                this.channelDescriptions();
                this.state = 2090;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 2091;
                this.match(DorisParser.FROM);
                this.state = 2092;
                this.match(DorisParser.BINLOG);
                this.state = 2093;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 2094;
                this.propertyItemList();
                this.state = 2095;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 2097;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2096;
                    (localContext as CreateDataSyncJobContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 3:
                localContext = new StopDataSyncJobContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2099;
                this.match(DorisParser.STOP);
                this.state = 2100;
                this.match(DorisParser.SYNC);
                this.state = 2101;
                this.match(DorisParser.JOB);
                this.state = 2102;
                (localContext as StopDataSyncJobContext)._name = this.multipartIdentifier();
                }
                break;
            case 4:
                localContext = new ResumeDataSyncJobContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2103;
                this.match(DorisParser.RESUME);
                this.state = 2104;
                this.match(DorisParser.SYNC);
                this.state = 2105;
                this.match(DorisParser.JOB);
                this.state = 2106;
                (localContext as ResumeDataSyncJobContext)._name = this.multipartIdentifier();
                }
                break;
            case 5:
                localContext = new PauseDataSyncJobContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2107;
                this.match(DorisParser.PAUSE);
                this.state = 2108;
                this.match(DorisParser.SYNC);
                this.state = 2109;
                this.match(DorisParser.JOB);
                this.state = 2110;
                (localContext as PauseDataSyncJobContext)._name = this.multipartIdentifier();
                }
                break;
            case 6:
                localContext = new PauseRoutineLoadContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2111;
                this.match(DorisParser.PAUSE);
                this.state = 2112;
                this.match(DorisParser.ROUTINE);
                this.state = 2113;
                this.match(DorisParser.LOAD);
                this.state = 2114;
                this.match(DorisParser.FOR);
                this.state = 2115;
                (localContext as PauseRoutineLoadContext)._label = this.multipartIdentifier();
                }
                break;
            case 7:
                localContext = new PauseAllRoutineLoadContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2116;
                this.match(DorisParser.PAUSE);
                this.state = 2117;
                this.match(DorisParser.ALL);
                this.state = 2118;
                this.match(DorisParser.ROUTINE);
                this.state = 2119;
                this.match(DorisParser.LOAD);
                }
                break;
            case 8:
                localContext = new ResumeRoutineLoadContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2120;
                this.match(DorisParser.RESUME);
                this.state = 2121;
                this.match(DorisParser.ROUTINE);
                this.state = 2122;
                this.match(DorisParser.LOAD);
                this.state = 2123;
                this.match(DorisParser.FOR);
                this.state = 2124;
                (localContext as ResumeRoutineLoadContext)._label = this.multipartIdentifier();
                }
                break;
            case 9:
                localContext = new ResumeAllRoutineLoadContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2125;
                this.match(DorisParser.RESUME);
                this.state = 2126;
                this.match(DorisParser.ALL);
                this.state = 2127;
                this.match(DorisParser.ROUTINE);
                this.state = 2128;
                this.match(DorisParser.LOAD);
                }
                break;
            case 10:
                localContext = new StopRoutineLoadContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2129;
                this.match(DorisParser.STOP);
                this.state = 2130;
                this.match(DorisParser.ROUTINE);
                this.state = 2131;
                this.match(DorisParser.LOAD);
                this.state = 2132;
                this.match(DorisParser.FOR);
                this.state = 2133;
                (localContext as StopRoutineLoadContext)._label = this.multipartIdentifier();
                }
                break;
            case 11:
                localContext = new ShowRoutineLoadContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2134;
                this.match(DorisParser.SHOW);
                this.state = 2136;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 21) {
                    {
                    this.state = 2135;
                    this.match(DorisParser.ALL);
                    }
                }

                this.state = 2138;
                this.match(DorisParser.ROUTINE);
                this.state = 2139;
                this.match(DorisParser.LOAD);
                this.state = 2145;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.FOR:
                    {
                    {
                    this.state = 2140;
                    this.match(DorisParser.FOR);
                    this.state = 2141;
                    (localContext as ShowRoutineLoadContext)._label = this.multipartIdentifier();
                    }
                    }
                    break;
                case DorisParser.EOF:
                case DorisParser.SEMICOLON:
                case DorisParser.LEFT_PAREN:
                case DorisParser.ADMIN:
                case DorisParser.ALTER:
                case DorisParser.ANALYZE:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BUILD:
                case DorisParser.CALL:
                case DorisParser.CANCEL:
                case DorisParser.CLEAN:
                case DorisParser.COMMIT:
                case DorisParser.COPY:
                case DorisParser.CREATE:
                case DorisParser.DELETE:
                case DorisParser.DESC:
                case DorisParser.DESCRIBE:
                case DorisParser.DROP:
                case DorisParser.EXPLAIN:
                case DorisParser.EXPORT:
                case DorisParser.GRANT:
                case DorisParser.HELP:
                case DorisParser.INSERT:
                case DorisParser.INSTALL:
                case DorisParser.KILL:
                case DorisParser.LIKE:
                case DorisParser.LOAD:
                case DorisParser.LOCK:
                case DorisParser.PAUSE:
                case DorisParser.PLAN:
                case DorisParser.RECOVER:
                case DorisParser.REFRESH:
                case DorisParser.REPLACE:
                case DorisParser.RESTORE:
                case DorisParser.RESUME:
                case DorisParser.REVOKE:
                case DorisParser.ROLLBACK:
                case DorisParser.SELECT:
                case DorisParser.SET:
                case DorisParser.SHOW:
                case DorisParser.START:
                case DorisParser.STOP:
                case DorisParser.SWITCH:
                case DorisParser.SYNC:
                case DorisParser.TRUNCATE:
                case DorisParser.UNINSTALL:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UPDATE:
                case DorisParser.USE:
                case DorisParser.VALUES:
                case DorisParser.WARM:
                case DorisParser.WHERE:
                case DorisParser.WITH:
                    {
                    this.state = 2143;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 267 || _la === 504) {
                        {
                        this.state = 2142;
                        this.wildWhere();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 12:
                localContext = new ShowRoutineLoadTaskContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2147;
                this.match(DorisParser.SHOW);
                this.state = 2148;
                this.match(DorisParser.ROUTINE);
                this.state = 2149;
                this.match(DorisParser.LOAD);
                this.state = 2150;
                this.match(DorisParser.TASK);
                this.state = 2153;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 2151;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2152;
                    (localContext as ShowRoutineLoadTaskContext)._database = this.identifier();
                    }
                }

                this.state = 2156;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 2155;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 13:
                localContext = new ShowCreateRoutineLoadContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2158;
                this.match(DorisParser.SHOW);
                this.state = 2160;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 21) {
                    {
                    this.state = 2159;
                    this.match(DorisParser.ALL);
                    }
                }

                this.state = 2162;
                this.match(DorisParser.CREATE);
                this.state = 2163;
                this.match(DorisParser.ROUTINE);
                this.state = 2164;
                this.match(DorisParser.LOAD);
                this.state = 2165;
                this.match(DorisParser.FOR);
                this.state = 2166;
                (localContext as ShowCreateRoutineLoadContext)._label = this.multipartIdentifier();
                }
                break;
            case 14:
                localContext = new ShowCreateLoadContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2167;
                this.match(DorisParser.SHOW);
                this.state = 2168;
                this.match(DorisParser.CREATE);
                this.state = 2169;
                this.match(DorisParser.LOAD);
                this.state = 2170;
                this.match(DorisParser.FOR);
                this.state = 2171;
                (localContext as ShowCreateLoadContext)._label = this.multipartIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadProperty(): LoadPropertyContext {
        let localContext = new LoadPropertyContext(this.context, this.state);
        this.enterRule(localContext, 42, DorisParser.RULE_loadProperty);
        try {
            this.state = 2184;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 289, this.context) ) {
            case 1:
                localContext = new SeparatorContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2174;
                this.match(DorisParser.COLUMNS);
                this.state = 2175;
                this.match(DorisParser.TERMINATED);
                this.state = 2176;
                this.match(DorisParser.BY);
                this.state = 2177;
                this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 2:
                localContext = new ImportColumnsContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2178;
                this.importColumnsStatement();
                }
                break;
            case 3:
                localContext = new ImportPrecedingFilterContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2179;
                this.importPrecedingFilterStatement();
                }
                break;
            case 4:
                localContext = new ImportWhereContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2180;
                this.importWhereStatement();
                }
                break;
            case 5:
                localContext = new ImportDeleteOnContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2181;
                this.importDeleteOnStatement();
                }
                break;
            case 6:
                localContext = new ImportSequenceContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2182;
                this.importSequenceStatement();
                }
                break;
            case 7:
                localContext = new ImportPartitionsContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2183;
                this.partitionSpec();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importSequenceStatement(): ImportSequenceStatementContext {
        let localContext = new ImportSequenceStatementContext(this.context, this.state);
        this.enterRule(localContext, 44, DorisParser.RULE_importSequenceStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2186;
            this.match(DorisParser.ORDER);
            this.state = 2187;
            this.match(DorisParser.BY);
            this.state = 2188;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importDeleteOnStatement(): ImportDeleteOnStatementContext {
        let localContext = new ImportDeleteOnStatementContext(this.context, this.state);
        this.enterRule(localContext, 46, DorisParser.RULE_importDeleteOnStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2190;
            this.match(DorisParser.DELETE);
            this.state = 2191;
            this.match(DorisParser.ON);
            this.state = 2192;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importWhereStatement(): ImportWhereStatementContext {
        let localContext = new ImportWhereStatementContext(this.context, this.state);
        this.enterRule(localContext, 48, DorisParser.RULE_importWhereStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2194;
            this.match(DorisParser.WHERE);
            this.state = 2195;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importPrecedingFilterStatement(): ImportPrecedingFilterStatementContext {
        let localContext = new ImportPrecedingFilterStatementContext(this.context, this.state);
        this.enterRule(localContext, 50, DorisParser.RULE_importPrecedingFilterStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2197;
            this.match(DorisParser.PRECEDING);
            this.state = 2198;
            this.match(DorisParser.FILTER);
            this.state = 2199;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importColumnsStatement(): ImportColumnsStatementContext {
        let localContext = new ImportColumnsStatementContext(this.context, this.state);
        this.enterRule(localContext, 52, DorisParser.RULE_importColumnsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2201;
            this.match(DorisParser.COLUMNS);
            this.state = 2202;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 2203;
            this.importColumnDesc();
            this.state = 2208;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2204;
                this.match(DorisParser.COMMA);
                this.state = 2205;
                this.importColumnDesc();
                }
                }
                this.state = 2210;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2211;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importColumnDesc(): ImportColumnDescContext {
        let localContext = new ImportColumnDescContext(this.context, this.state);
        this.enterRule(localContext, 54, DorisParser.RULE_importColumnDesc);
        let _la: number;
        try {
            this.state = 2226;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2213;
                localContext._name = this.identifier();
                this.state = 2216;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 512) {
                    {
                    this.state = 2214;
                    this.match(DorisParser.EQ);
                    this.state = 2215;
                    this.booleanExpression(0);
                    }
                }

                }
                break;
            case DorisParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2218;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 2219;
                localContext._name = this.identifier();
                this.state = 2222;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 512) {
                    {
                    this.state = 2220;
                    this.match(DorisParser.EQ);
                    this.state = 2221;
                    this.booleanExpression(0);
                    }
                }

                this.state = 2224;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public channelDescriptions(): ChannelDescriptionsContext {
        let localContext = new ChannelDescriptionsContext(this.context, this.state);
        this.enterRule(localContext, 56, DorisParser.RULE_channelDescriptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2228;
            this.channelDescription();
            this.state = 2233;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2229;
                this.match(DorisParser.COMMA);
                this.state = 2230;
                this.channelDescription();
                }
                }
                this.state = 2235;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public channelDescription(): ChannelDescriptionContext {
        let localContext = new ChannelDescriptionContext(this.context, this.state);
        this.enterRule(localContext, 58, DorisParser.RULE_channelDescription);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2236;
            this.match(DorisParser.FROM);
            this.state = 2237;
            localContext._source = this.multipartIdentifier();
            this.state = 2238;
            this.match(DorisParser.INTO);
            this.state = 2239;
            localContext._destination = this.multipartIdentifier();
            this.state = 2241;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 329 || _la === 330 || _la === 454) {
                {
                this.state = 2240;
                this.partitionSpec();
                }
            }

            this.state = 2244;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 2243;
                localContext._columnList = this.identifierList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedRefreshStatement(): SupportedRefreshStatementContext {
        let localContext = new SupportedRefreshStatementContext(this.context, this.state);
        this.enterRule(localContext, 60, DorisParser.RULE_supportedRefreshStatement);
        let _la: number;
        try {
            localContext = new RefreshCatalogContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2246;
            this.match(DorisParser.REFRESH);
            this.state = 2247;
            this.match(DorisParser.CATALOG);
            this.state = 2248;
            (localContext as RefreshCatalogContext)._name = this.identifier();
            this.state = 2250;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 358) {
                {
                this.state = 2249;
                this.propertyClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedCleanStatement(): SupportedCleanStatementContext {
        let localContext = new SupportedCleanStatementContext(this.context, this.state);
        this.enterRule(localContext, 62, DorisParser.RULE_supportedCleanStatement);
        try {
            localContext = new CleanAllProfileContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2252;
            this.match(DorisParser.CLEAN);
            this.state = 2253;
            this.match(DorisParser.ALL);
            this.state = 2254;
            this.match(DorisParser.PROFILE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedRefreshStatement(): UnsupportedRefreshStatementContext {
        let localContext = new UnsupportedRefreshStatementContext(this.context, this.state);
        this.enterRule(localContext, 64, DorisParser.RULE_unsupportedRefreshStatement);
        let _la: number;
        try {
            this.state = 2272;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 300, this.context) ) {
            case 1:
                localContext = new RefreshTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2256;
                this.match(DorisParser.REFRESH);
                this.state = 2257;
                this.match(DorisParser.TABLE);
                this.state = 2258;
                (localContext as RefreshTableContext)._name = this.multipartIdentifier();
                }
                break;
            case 2:
                localContext = new RefreshDatabaseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2259;
                this.match(DorisParser.REFRESH);
                this.state = 2260;
                this.match(DorisParser.DATABASE);
                this.state = 2261;
                (localContext as RefreshDatabaseContext)._name = this.multipartIdentifier();
                this.state = 2263;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2262;
                    this.propertyClause();
                    }
                }

                }
                break;
            case 3:
                localContext = new RefreshLdapContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2265;
                this.match(DorisParser.REFRESH);
                this.state = 2266;
                this.match(DorisParser.LDAP);
                this.state = 2270;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.ALL:
                    {
                    this.state = 2267;
                    this.match(DorisParser.ALL);
                    }
                    break;
                case DorisParser.FOR:
                    {
                    {
                    this.state = 2268;
                    this.match(DorisParser.FOR);
                    this.state = 2269;
                    (localContext as RefreshLdapContext)._user = this.identifierOrText();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedCleanStatement(): UnsupportedCleanStatementContext {
        let localContext = new UnsupportedCleanStatementContext(this.context, this.state);
        this.enterRule(localContext, 66, DorisParser.RULE_unsupportedCleanStatement);
        let _la: number;
        try {
            this.state = 2294;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 303, this.context) ) {
            case 1:
                localContext = new CleanLabelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2274;
                this.match(DorisParser.CLEAN);
                this.state = 2275;
                this.match(DorisParser.LABEL);
                this.state = 2277;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824092160) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758068699) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343345) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294572255) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 531142527) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 3753617235) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2743001093) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915099) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124386295) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908763643) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277172351) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984149) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259707003) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 8945661) !== 0) || ((((_la - 533)) & ~0x1F) === 0 && ((1 << (_la - 533)) & 49159) !== 0)) {
                    {
                    this.state = 2276;
                    (localContext as CleanLabelContext)._label = this.identifier();
                    }
                }

                this.state = 2279;
                _la = this.tokenStream.LA(1);
                if(!(_la === 198 || _la === 228)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2280;
                (localContext as CleanLabelContext)._database = this.identifier();
                }
                break;
            case 2:
                localContext = new CleanQueryStatsContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2281;
                this.match(DorisParser.CLEAN);
                this.state = 2282;
                this.match(DorisParser.QUERY);
                this.state = 2283;
                this.match(DorisParser.STATS);
                this.state = 2288;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.FOR:
                    {
                    {
                    this.state = 2284;
                    this.match(DorisParser.FOR);
                    this.state = 2285;
                    (localContext as CleanQueryStatsContext)._database = this.identifier();
                    }
                    }
                    break;
                case DorisParser.FROM:
                case DorisParser.IN:
                    {
                    {
                    this.state = 2286;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2287;
                    (localContext as CleanQueryStatsContext)._table = this.multipartIdentifier();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                localContext = new CleanAllQueryStatsContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2290;
                this.match(DorisParser.CLEAN);
                this.state = 2291;
                this.match(DorisParser.ALL);
                this.state = 2292;
                this.match(DorisParser.QUERY);
                this.state = 2293;
                this.match(DorisParser.STATS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedCancelStatement(): SupportedCancelStatementContext {
        let localContext = new SupportedCancelStatementContext(this.context, this.state);
        this.enterRule(localContext, 68, DorisParser.RULE_supportedCancelStatement);
        let _la: number;
        try {
            this.state = 2321;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 309, this.context) ) {
            case 1:
                localContext = new CancelLoadContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2296;
                this.match(DorisParser.CANCEL);
                this.state = 2297;
                this.match(DorisParser.LOAD);
                this.state = 2300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 2298;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2299;
                    (localContext as CancelLoadContext)._database = this.identifier();
                    }
                }

                this.state = 2303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 2302;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 2:
                localContext = new CancelExportContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2305;
                this.match(DorisParser.CANCEL);
                this.state = 2306;
                this.match(DorisParser.EXPORT);
                this.state = 2309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 2307;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2308;
                    (localContext as CancelExportContext)._database = this.identifier();
                    }
                }

                this.state = 2312;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 2311;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 3:
                localContext = new CancelWarmUpJobContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2314;
                this.match(DorisParser.CANCEL);
                this.state = 2315;
                this.match(DorisParser.WARM);
                this.state = 2316;
                this.match(DorisParser.UP);
                this.state = 2317;
                this.match(DorisParser.JOB);
                this.state = 2319;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 2318;
                    this.wildWhere();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedCancelStatement(): UnsupportedCancelStatementContext {
        let localContext = new UnsupportedCancelStatementContext(this.context, this.state);
        this.enterRule(localContext, 70, DorisParser.RULE_unsupportedCancelStatement);
        let _la: number;
        try {
            this.state = 2386;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
            case 1:
                localContext = new CancelAlterTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2323;
                this.match(DorisParser.CANCEL);
                this.state = 2324;
                this.match(DorisParser.ALTER);
                this.state = 2325;
                this.match(DorisParser.TABLE);
                this.state = 2330;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.ROLLUP:
                    {
                    this.state = 2326;
                    this.match(DorisParser.ROLLUP);
                    }
                    break;
                case DorisParser.MATERIALIZED:
                    {
                    {
                    this.state = 2327;
                    this.match(DorisParser.MATERIALIZED);
                    this.state = 2328;
                    this.match(DorisParser.VIEW);
                    }
                    }
                    break;
                case DorisParser.COLUMN:
                    {
                    this.state = 2329;
                    this.match(DorisParser.COLUMN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2332;
                this.match(DorisParser.FROM);
                this.state = 2333;
                (localContext as CancelAlterTableContext)._tableName = this.multipartIdentifier();
                this.state = 2344;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 312, this.context) ) {
                case 1:
                    {
                    this.state = 2334;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 2335;
                    (localContext as CancelAlterTableContext)._INTEGER_VALUE = this.match(DorisParser.INTEGER_VALUE);
                    (localContext as CancelAlterTableContext)._jobIds.push((localContext as CancelAlterTableContext)._INTEGER_VALUE);
                    this.state = 2340;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2336;
                        this.match(DorisParser.COMMA);
                        this.state = 2337;
                        (localContext as CancelAlterTableContext)._INTEGER_VALUE = this.match(DorisParser.INTEGER_VALUE);
                        (localContext as CancelAlterTableContext)._jobIds.push((localContext as CancelAlterTableContext)._INTEGER_VALUE);
                        }
                        }
                        this.state = 2342;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2343;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new CancelBuildIndexContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2346;
                this.match(DorisParser.CANCEL);
                this.state = 2347;
                this.match(DorisParser.BUILD);
                this.state = 2348;
                this.match(DorisParser.INDEX);
                this.state = 2349;
                this.match(DorisParser.ON);
                this.state = 2350;
                (localContext as CancelBuildIndexContext)._tableName = this.multipartIdentifier();
                this.state = 2361;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
                case 1:
                    {
                    this.state = 2351;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 2352;
                    (localContext as CancelBuildIndexContext)._INTEGER_VALUE = this.match(DorisParser.INTEGER_VALUE);
                    (localContext as CancelBuildIndexContext)._jobIds.push((localContext as CancelBuildIndexContext)._INTEGER_VALUE);
                    this.state = 2357;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2353;
                        this.match(DorisParser.COMMA);
                        this.state = 2354;
                        (localContext as CancelBuildIndexContext)._INTEGER_VALUE = this.match(DorisParser.INTEGER_VALUE);
                        (localContext as CancelBuildIndexContext)._jobIds.push((localContext as CancelBuildIndexContext)._INTEGER_VALUE);
                        }
                        }
                        this.state = 2359;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2360;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new CancelDecommisionBackendContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2363;
                this.match(DorisParser.CANCEL);
                this.state = 2364;
                this.match(DorisParser.DECOMMISSION);
                this.state = 2365;
                this.match(DorisParser.BACKEND);
                this.state = 2366;
                (localContext as CancelDecommisionBackendContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                (localContext as CancelDecommisionBackendContext)._hostPorts.push((localContext as CancelDecommisionBackendContext)._STRING_LITERAL);
                this.state = 2371;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2367;
                    this.match(DorisParser.COMMA);
                    this.state = 2368;
                    (localContext as CancelDecommisionBackendContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as CancelDecommisionBackendContext)._hostPorts.push((localContext as CancelDecommisionBackendContext)._STRING_LITERAL);
                    }
                    }
                    this.state = 2373;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 4:
                localContext = new CancelBackupContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2374;
                this.match(DorisParser.CANCEL);
                this.state = 2375;
                this.match(DorisParser.BACKUP);
                this.state = 2378;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 2376;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2377;
                    (localContext as CancelBackupContext)._database = this.identifier();
                    }
                }

                }
                break;
            case 5:
                localContext = new CancelRestoreContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2380;
                this.match(DorisParser.CANCEL);
                this.state = 2381;
                this.match(DorisParser.RESTORE);
                this.state = 2384;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 2382;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2383;
                    (localContext as CancelRestoreContext)._database = this.identifier();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedAdminStatement(): SupportedAdminStatementContext {
        let localContext = new SupportedAdminStatementContext(this.context, this.state);
        this.enterRule(localContext, 72, DorisParser.RULE_supportedAdminStatement);
        try {
            localContext = new AdminShowReplicaDistributionContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2388;
            this.match(DorisParser.ADMIN);
            this.state = 2389;
            this.match(DorisParser.SHOW);
            this.state = 2390;
            this.match(DorisParser.REPLICA);
            this.state = 2391;
            this.match(DorisParser.DISTRIBUTION);
            this.state = 2392;
            this.match(DorisParser.FROM);
            this.state = 2393;
            this.baseTableRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedRecoverStatement(): SupportedRecoverStatementContext {
        let localContext = new SupportedRecoverStatementContext(this.context, this.state);
        this.enterRule(localContext, 74, DorisParser.RULE_supportedRecoverStatement);
        let _la: number;
        try {
            this.state = 2428;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 325, this.context) ) {
            case 1:
                localContext = new RecoverDatabaseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2395;
                this.match(DorisParser.RECOVER);
                this.state = 2396;
                this.match(DorisParser.DATABASE);
                this.state = 2397;
                (localContext as RecoverDatabaseContext)._name = this.identifier();
                this.state = 2399;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 543) {
                    {
                    this.state = 2398;
                    (localContext as RecoverDatabaseContext)._id = this.match(DorisParser.INTEGER_VALUE);
                    }
                }

                this.state = 2403;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 2401;
                    this.match(DorisParser.AS);
                    this.state = 2402;
                    (localContext as RecoverDatabaseContext)._alias = this.identifier();
                    }
                }

                }
                break;
            case 2:
                localContext = new RecoverTableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2405;
                this.match(DorisParser.RECOVER);
                this.state = 2406;
                this.match(DorisParser.TABLE);
                this.state = 2407;
                (localContext as RecoverTableContext)._name = this.multipartIdentifier();
                this.state = 2409;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 543) {
                    {
                    this.state = 2408;
                    (localContext as RecoverTableContext)._id = this.match(DorisParser.INTEGER_VALUE);
                    }
                }

                this.state = 2413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 2411;
                    this.match(DorisParser.AS);
                    this.state = 2412;
                    (localContext as RecoverTableContext)._alias = this.identifier();
                    }
                }

                }
                break;
            case 3:
                localContext = new RecoverPartitionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2415;
                this.match(DorisParser.RECOVER);
                this.state = 2416;
                this.match(DorisParser.PARTITION);
                this.state = 2417;
                (localContext as RecoverPartitionContext)._name = this.identifier();
                this.state = 2419;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 543) {
                    {
                    this.state = 2418;
                    (localContext as RecoverPartitionContext)._id = this.match(DorisParser.INTEGER_VALUE);
                    }
                }

                this.state = 2423;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 2421;
                    this.match(DorisParser.AS);
                    this.state = 2422;
                    (localContext as RecoverPartitionContext)._alias = this.identifier();
                    }
                }

                this.state = 2425;
                this.match(DorisParser.FROM);
                this.state = 2426;
                (localContext as RecoverPartitionContext)._tableName = this.multipartIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedAdminStatement(): UnsupportedAdminStatementContext {
        let localContext = new UnsupportedAdminStatementContext(this.context, this.state);
        this.enterRule(localContext, 76, DorisParser.RULE_unsupportedAdminStatement);
        let _la: number;
        try {
            this.state = 2569;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 339, this.context) ) {
            case 1:
                localContext = new AdminShowReplicaStatusContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2430;
                this.match(DorisParser.ADMIN);
                this.state = 2431;
                this.match(DorisParser.SHOW);
                this.state = 2432;
                this.match(DorisParser.REPLICA);
                this.state = 2433;
                this.match(DorisParser.STATUS);
                this.state = 2434;
                this.match(DorisParser.FROM);
                this.state = 2435;
                this.baseTableRef();
                this.state = 2437;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 2436;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 2:
                localContext = new AdminSetReplicaStatusContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2439;
                this.match(DorisParser.ADMIN);
                this.state = 2440;
                this.match(DorisParser.SET);
                this.state = 2441;
                this.match(DorisParser.REPLICA);
                this.state = 2442;
                this.match(DorisParser.STATUS);
                this.state = 2443;
                this.match(DorisParser.PROPERTIES);
                this.state = 2444;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 2445;
                this.propertyItemList();
                this.state = 2446;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 3:
                localContext = new AdminSetReplicaVersionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2448;
                this.match(DorisParser.ADMIN);
                this.state = 2449;
                this.match(DorisParser.SET);
                this.state = 2450;
                this.match(DorisParser.REPLICA);
                this.state = 2451;
                this.match(DorisParser.VERSION);
                this.state = 2452;
                this.match(DorisParser.PROPERTIES);
                this.state = 2453;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 2454;
                this.propertyItemList();
                this.state = 2455;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 4:
                localContext = new AdminRepairTableContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2457;
                this.match(DorisParser.ADMIN);
                this.state = 2458;
                this.match(DorisParser.REPAIR);
                this.state = 2459;
                this.match(DorisParser.TABLE);
                this.state = 2460;
                this.baseTableRef();
                }
                break;
            case 5:
                localContext = new AdminCancelRepairTableContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2461;
                this.match(DorisParser.ADMIN);
                this.state = 2462;
                this.match(DorisParser.CANCEL);
                this.state = 2463;
                this.match(DorisParser.REPAIR);
                this.state = 2464;
                this.match(DorisParser.TABLE);
                this.state = 2465;
                this.baseTableRef();
                }
                break;
            case 6:
                localContext = new AdminCompactTableContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2466;
                this.match(DorisParser.ADMIN);
                this.state = 2467;
                this.match(DorisParser.COMPACT);
                this.state = 2468;
                this.match(DorisParser.TABLE);
                this.state = 2469;
                this.baseTableRef();
                this.state = 2471;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 2470;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 7:
                localContext = new AdminSetFrontendConfigContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2473;
                this.match(DorisParser.ADMIN);
                this.state = 2474;
                this.match(DorisParser.SET);
                this.state = 2478;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.FRONTEND:
                    {
                    this.state = 2475;
                    this.match(DorisParser.FRONTEND);
                    }
                    break;
                case DorisParser.ALL:
                    {
                    {
                    this.state = 2476;
                    this.match(DorisParser.ALL);
                    this.state = 2477;
                    this.match(DorisParser.FRONTENDS);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2480;
                this.match(DorisParser.CONFIG);
                this.state = 2485;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
                case 1:
                    {
                    this.state = 2481;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 2482;
                    this.propertyItemList();
                    this.state = 2483;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 2488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 21) {
                    {
                    this.state = 2487;
                    this.match(DorisParser.ALL);
                    }
                }

                }
                break;
            case 8:
                localContext = new AdminCheckTabletsContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2490;
                this.match(DorisParser.ADMIN);
                this.state = 2491;
                this.match(DorisParser.CHECK);
                this.state = 2492;
                this.tabletList();
                this.state = 2494;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2493;
                    (localContext as AdminCheckTabletsContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 9:
                localContext = new AdminRebalanceDiskContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2496;
                this.match(DorisParser.ADMIN);
                this.state = 2497;
                this.match(DorisParser.REBALANCE);
                this.state = 2498;
                this.match(DorisParser.DISK);
                this.state = 2506;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 317) {
                    {
                    this.state = 2499;
                    this.match(DorisParser.ON);
                    this.state = 2500;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 2501;
                    (localContext as AdminRebalanceDiskContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as AdminRebalanceDiskContext)._backends.push((localContext as AdminRebalanceDiskContext)._STRING_LITERAL);
                    {
                    this.state = 2502;
                    this.match(DorisParser.COMMA);
                    this.state = 2503;
                    (localContext as AdminRebalanceDiskContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as AdminRebalanceDiskContext)._backends.push((localContext as AdminRebalanceDiskContext)._STRING_LITERAL);
                    }
                    this.state = 2505;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                }
                break;
            case 10:
                localContext = new AdminCancelRebalanceDiskContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2508;
                this.match(DorisParser.ADMIN);
                this.state = 2509;
                this.match(DorisParser.CANCEL);
                this.state = 2510;
                this.match(DorisParser.REBALANCE);
                this.state = 2511;
                this.match(DorisParser.DISK);
                this.state = 2519;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 317) {
                    {
                    this.state = 2512;
                    this.match(DorisParser.ON);
                    this.state = 2513;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 2514;
                    (localContext as AdminCancelRebalanceDiskContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as AdminCancelRebalanceDiskContext)._backends.push((localContext as AdminCancelRebalanceDiskContext)._STRING_LITERAL);
                    {
                    this.state = 2515;
                    this.match(DorisParser.COMMA);
                    this.state = 2516;
                    (localContext as AdminCancelRebalanceDiskContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as AdminCancelRebalanceDiskContext)._backends.push((localContext as AdminCancelRebalanceDiskContext)._STRING_LITERAL);
                    }
                    this.state = 2518;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                }
                break;
            case 11:
                localContext = new AdminCleanTrashContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2521;
                this.match(DorisParser.ADMIN);
                this.state = 2522;
                this.match(DorisParser.CLEAN);
                this.state = 2523;
                this.match(DorisParser.TRASH);
                this.state = 2531;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 317) {
                    {
                    this.state = 2524;
                    this.match(DorisParser.ON);
                    this.state = 2525;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 2526;
                    (localContext as AdminCleanTrashContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as AdminCleanTrashContext)._backends.push((localContext as AdminCleanTrashContext)._STRING_LITERAL);
                    {
                    this.state = 2527;
                    this.match(DorisParser.COMMA);
                    this.state = 2528;
                    (localContext as AdminCleanTrashContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as AdminCleanTrashContext)._backends.push((localContext as AdminCleanTrashContext)._STRING_LITERAL);
                    }
                    this.state = 2530;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                }
                break;
            case 12:
                localContext = new AdminSetPartitionVersionContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2533;
                this.match(DorisParser.ADMIN);
                this.state = 2534;
                this.match(DorisParser.SET);
                this.state = 2535;
                this.match(DorisParser.TABLE);
                this.state = 2536;
                (localContext as AdminSetPartitionVersionContext)._name = this.multipartIdentifier();
                this.state = 2537;
                this.match(DorisParser.PARTITION);
                this.state = 2538;
                this.match(DorisParser.VERSION);
                this.state = 2540;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2539;
                    (localContext as AdminSetPartitionVersionContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 13:
                localContext = new AdminDiagnoseTabletContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2542;
                this.match(DorisParser.ADMIN);
                this.state = 2543;
                this.match(DorisParser.DIAGNOSE);
                this.state = 2544;
                this.match(DorisParser.TABLET);
                this.state = 2545;
                (localContext as AdminDiagnoseTabletContext)._tabletId = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 14:
                localContext = new AdminShowTabletStorageFormatContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2546;
                this.match(DorisParser.ADMIN);
                this.state = 2547;
                this.match(DorisParser.SHOW);
                this.state = 2548;
                this.match(DorisParser.TABLET);
                this.state = 2549;
                this.match(DorisParser.STORAGE);
                this.state = 2550;
                this.match(DorisParser.FORMAT);
                this.state = 2552;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 496) {
                    {
                    this.state = 2551;
                    this.match(DorisParser.VERBOSE);
                    }
                }

                }
                break;
            case 15:
                localContext = new AdminCopyTabletContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2554;
                this.match(DorisParser.ADMIN);
                this.state = 2555;
                this.match(DorisParser.COPY);
                this.state = 2556;
                this.match(DorisParser.TABLET);
                this.state = 2557;
                (localContext as AdminCopyTabletContext)._tabletId = this.match(DorisParser.INTEGER_VALUE);
                this.state = 2559;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2558;
                    (localContext as AdminCopyTabletContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 16:
                localContext = new AdminSetTableStatusContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2561;
                this.match(DorisParser.ADMIN);
                this.state = 2562;
                this.match(DorisParser.SET);
                this.state = 2563;
                this.match(DorisParser.TABLE);
                this.state = 2564;
                (localContext as AdminSetTableStatusContext)._name = this.multipartIdentifier();
                this.state = 2565;
                this.match(DorisParser.STATUS);
                this.state = 2567;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2566;
                    (localContext as AdminSetTableStatusContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public baseTableRef(): BaseTableRefContext {
        let localContext = new BaseTableRefContext(this.context, this.state);
        this.enterRule(localContext, 78, DorisParser.RULE_baseTableRef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2571;
            this.multipartIdentifier();
            this.state = 2573;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 536) {
                {
                this.state = 2572;
                this.optScanParams();
                }
            }

            this.state = 2576;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 2575;
                this.tableSnapshot();
                }
            }

            this.state = 2579;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 342, this.context) ) {
            case 1:
                {
                this.state = 2578;
                this.specifiedPartition();
                }
                break;
            }
            this.state = 2582;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 450) {
                {
                this.state = 2581;
                this.tabletList();
                }
            }

            this.state = 2584;
            this.tableAlias();
            this.state = 2586;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 449) {
                {
                this.state = 2585;
                this.sample();
                }
            }

            this.state = 2589;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 7 || _la === 533) {
                {
                this.state = 2588;
                this.relationHint();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public wildWhere(): WildWhereContext {
        let localContext = new WildWhereContext(this.context, this.state);
        this.enterRule(localContext, 80, DorisParser.RULE_wildWhere);
        try {
            this.state = 2595;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LIKE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2591;
                this.match(DorisParser.LIKE);
                this.state = 2592;
                this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case DorisParser.WHERE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2593;
                this.match(DorisParser.WHERE);
                this.state = 2594;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedTransactionStatement(): UnsupportedTransactionStatementContext {
        let localContext = new UnsupportedTransactionStatementContext(this.context, this.state);
        this.enterRule(localContext, 82, DorisParser.RULE_unsupportedTransactionStatement);
        let _la: number;
        try {
            this.state = 2639;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.BEGIN:
                localContext = new TransactionBeginContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2597;
                this.match(DorisParser.BEGIN);
                this.state = 2603;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 348, this.context) ) {
                case 1:
                    {
                    this.state = 2598;
                    this.match(DorisParser.WITH);
                    this.state = 2599;
                    this.match(DorisParser.LABEL);
                    this.state = 2601;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 347, this.context) ) {
                    case 1:
                        {
                        this.state = 2600;
                        this.identifier();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case DorisParser.COMMIT:
                localContext = new TranscationCommitContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2605;
                this.match(DorisParser.COMMIT);
                this.state = 2607;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 507) {
                    {
                    this.state = 2606;
                    this.match(DorisParser.WORK);
                    }
                }

                this.state = 2614;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2609;
                    this.match(DorisParser.AND);
                    this.state = 2611;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 309) {
                        {
                        this.state = 2610;
                        this.match(DorisParser.NO);
                        }
                    }

                    this.state = 2613;
                    this.match(DorisParser.CHAIN);
                    }
                }

                this.state = 2620;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 309 || _la === 376) {
                    {
                    this.state = 2617;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 309) {
                        {
                        this.state = 2616;
                        this.match(DorisParser.NO);
                        }
                    }

                    this.state = 2619;
                    this.match(DorisParser.RELEASE);
                    }
                }

                }
                break;
            case DorisParser.ROLLBACK:
                localContext = new TransactionRollbackContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2622;
                this.match(DorisParser.ROLLBACK);
                this.state = 2624;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 507) {
                    {
                    this.state = 2623;
                    this.match(DorisParser.WORK);
                    }
                }

                this.state = 2631;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2626;
                    this.match(DorisParser.AND);
                    this.state = 2628;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 309) {
                        {
                        this.state = 2627;
                        this.match(DorisParser.NO);
                        }
                    }

                    this.state = 2630;
                    this.match(DorisParser.CHAIN);
                    }
                }

                this.state = 2637;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 309 || _la === 376) {
                    {
                    this.state = 2634;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 309) {
                        {
                        this.state = 2633;
                        this.match(DorisParser.NO);
                        }
                    }

                    this.state = 2636;
                    this.match(DorisParser.RELEASE);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedGrantRevokeStatement(): UnsupportedGrantRevokeStatementContext {
        let localContext = new UnsupportedGrantRevokeStatementContext(this.context, this.state);
        this.enterRule(localContext, 84, DorisParser.RULE_unsupportedGrantRevokeStatement);
        let _la: number;
        try {
            this.state = 2725;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
            case 1:
                localContext = new GrantTablePrivilegeContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2641;
                this.match(DorisParser.GRANT);
                this.state = 2642;
                this.privilegeList();
                this.state = 2643;
                this.match(DorisParser.ON);
                this.state = 2644;
                this.multipartIdentifierOrAsterisk();
                this.state = 2645;
                this.match(DorisParser.TO);
                this.state = 2649;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.STRING_LITERAL:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 2646;
                    this.userIdentify();
                    }
                    break;
                case DorisParser.ROLE:
                    {
                    this.state = 2647;
                    this.match(DorisParser.ROLE);
                    this.state = 2648;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                localContext = new GrantResourcePrivilegeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2651;
                this.match(DorisParser.GRANT);
                this.state = 2652;
                this.privilegeList();
                this.state = 2653;
                this.match(DorisParser.ON);
                this.state = 2663;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.RESOURCE:
                    {
                    this.state = 2654;
                    this.match(DorisParser.RESOURCE);
                    }
                    break;
                case DorisParser.CLUSTER:
                    {
                    this.state = 2655;
                    this.match(DorisParser.CLUSTER);
                    }
                    break;
                case DorisParser.COMPUTE:
                    {
                    this.state = 2656;
                    this.match(DorisParser.COMPUTE);
                    this.state = 2657;
                    this.match(DorisParser.GROUP);
                    }
                    break;
                case DorisParser.STAGE:
                    {
                    this.state = 2658;
                    this.match(DorisParser.STAGE);
                    }
                    break;
                case DorisParser.STORAGE:
                    {
                    this.state = 2659;
                    this.match(DorisParser.STORAGE);
                    this.state = 2660;
                    this.match(DorisParser.VAULT);
                    }
                    break;
                case DorisParser.WORKLOAD:
                    {
                    this.state = 2661;
                    this.match(DorisParser.WORKLOAD);
                    this.state = 2662;
                    this.match(DorisParser.GROUP);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2665;
                this.identifierOrTextOrAsterisk();
                this.state = 2666;
                this.match(DorisParser.TO);
                this.state = 2670;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.STRING_LITERAL:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 2667;
                    this.userIdentify();
                    }
                    break;
                case DorisParser.ROLE:
                    {
                    this.state = 2668;
                    this.match(DorisParser.ROLE);
                    this.state = 2669;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                localContext = new GrantRoleContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2672;
                this.match(DorisParser.GRANT);
                this.state = 2673;
                (localContext as GrantRoleContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                (localContext as GrantRoleContext)._roles.push((localContext as GrantRoleContext)._STRING_LITERAL);
                this.state = 2678;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2674;
                    this.match(DorisParser.COMMA);
                    this.state = 2675;
                    (localContext as GrantRoleContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as GrantRoleContext)._roles.push((localContext as GrantRoleContext)._STRING_LITERAL);
                    }
                    }
                    this.state = 2680;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2681;
                this.match(DorisParser.TO);
                this.state = 2682;
                this.userIdentify();
                }
                break;
            case 4:
                localContext = new GrantTablePrivilegeContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2683;
                this.match(DorisParser.REVOKE);
                this.state = 2684;
                this.privilegeList();
                this.state = 2685;
                this.match(DorisParser.ON);
                this.state = 2686;
                this.multipartIdentifierOrAsterisk();
                this.state = 2687;
                this.match(DorisParser.FROM);
                this.state = 2691;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.STRING_LITERAL:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 2688;
                    this.userIdentify();
                    }
                    break;
                case DorisParser.ROLE:
                    {
                    this.state = 2689;
                    this.match(DorisParser.ROLE);
                    this.state = 2690;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 5:
                localContext = new GrantResourcePrivilegeContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2693;
                this.match(DorisParser.REVOKE);
                this.state = 2694;
                this.privilegeList();
                this.state = 2695;
                this.match(DorisParser.ON);
                this.state = 2705;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.RESOURCE:
                    {
                    this.state = 2696;
                    this.match(DorisParser.RESOURCE);
                    }
                    break;
                case DorisParser.CLUSTER:
                    {
                    this.state = 2697;
                    this.match(DorisParser.CLUSTER);
                    }
                    break;
                case DorisParser.COMPUTE:
                    {
                    this.state = 2698;
                    this.match(DorisParser.COMPUTE);
                    this.state = 2699;
                    this.match(DorisParser.GROUP);
                    }
                    break;
                case DorisParser.STAGE:
                    {
                    this.state = 2700;
                    this.match(DorisParser.STAGE);
                    }
                    break;
                case DorisParser.STORAGE:
                    {
                    this.state = 2701;
                    this.match(DorisParser.STORAGE);
                    this.state = 2702;
                    this.match(DorisParser.VAULT);
                    }
                    break;
                case DorisParser.WORKLOAD:
                    {
                    this.state = 2703;
                    this.match(DorisParser.WORKLOAD);
                    this.state = 2704;
                    this.match(DorisParser.GROUP);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2707;
                this.identifierOrTextOrAsterisk();
                this.state = 2708;
                this.match(DorisParser.FROM);
                this.state = 2712;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.STRING_LITERAL:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 2709;
                    this.userIdentify();
                    }
                    break;
                case DorisParser.ROLE:
                    {
                    this.state = 2710;
                    this.match(DorisParser.ROLE);
                    this.state = 2711;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 6:
                localContext = new GrantRoleContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2714;
                this.match(DorisParser.REVOKE);
                this.state = 2715;
                (localContext as GrantRoleContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                (localContext as GrantRoleContext)._roles.push((localContext as GrantRoleContext)._STRING_LITERAL);
                this.state = 2720;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2716;
                    this.match(DorisParser.COMMA);
                    this.state = 2717;
                    (localContext as GrantRoleContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as GrantRoleContext)._roles.push((localContext as GrantRoleContext)._STRING_LITERAL);
                    }
                    }
                    this.state = 2722;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2723;
                this.match(DorisParser.FROM);
                this.state = 2724;
                this.userIdentify();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 86, DorisParser.RULE_privilege);
        let _la: number;
        try {
            this.state = 2732;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2727;
                localContext._name = this.identifier();
                this.state = 2729;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2728;
                    localContext._columns = this.identifierList();
                    }
                }

                }
                break;
            case DorisParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2731;
                this.match(DorisParser.ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeList(): PrivilegeListContext {
        let localContext = new PrivilegeListContext(this.context, this.state);
        this.enterRule(localContext, 88, DorisParser.RULE_privilegeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2734;
            this.privilege();
            this.state = 2739;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2735;
                this.match(DorisParser.COMMA);
                this.state = 2736;
                this.privilege();
                }
                }
                this.state = 2741;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedAlterStatement(): UnsupportedAlterStatementContext {
        let localContext = new UnsupportedAlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 90, DorisParser.RULE_unsupportedAlterStatement);
        let _la: number;
        try {
            this.state = 2898;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
            case 1:
                localContext = new AlterTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2742;
                this.match(DorisParser.ALTER);
                this.state = 2743;
                this.match(DorisParser.TABLE);
                this.state = 2744;
                (localContext as AlterTableContext)._tableName = this.multipartIdentifier();
                this.state = 2745;
                this.alterTableClause();
                this.state = 2750;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2746;
                    this.match(DorisParser.COMMA);
                    this.state = 2747;
                    this.alterTableClause();
                    }
                    }
                    this.state = 2752;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new AlterTableAddRollupContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2753;
                this.match(DorisParser.ALTER);
                this.state = 2754;
                this.match(DorisParser.TABLE);
                this.state = 2755;
                (localContext as AlterTableAddRollupContext)._tableName = this.multipartIdentifier();
                this.state = 2756;
                this.match(DorisParser.ADD);
                this.state = 2757;
                this.match(DorisParser.ROLLUP);
                this.state = 2758;
                this.addRollupClause();
                this.state = 2763;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2759;
                    this.match(DorisParser.COMMA);
                    this.state = 2760;
                    this.addRollupClause();
                    }
                    }
                    this.state = 2765;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 3:
                localContext = new AlterTableDropRollupContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2766;
                this.match(DorisParser.ALTER);
                this.state = 2767;
                this.match(DorisParser.TABLE);
                this.state = 2768;
                (localContext as AlterTableDropRollupContext)._tableName = this.multipartIdentifier();
                this.state = 2769;
                this.match(DorisParser.DROP);
                this.state = 2770;
                this.match(DorisParser.ROLLUP);
                this.state = 2771;
                this.dropRollupClause();
                this.state = 2776;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2772;
                    this.match(DorisParser.COMMA);
                    this.state = 2773;
                    this.dropRollupClause();
                    }
                    }
                    this.state = 2778;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 4:
                localContext = new AlterSystemContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2779;
                this.match(DorisParser.ALTER);
                this.state = 2780;
                this.match(DorisParser.SYSTEM);
                this.state = 2781;
                this.alterSystemClause();
                }
                break;
            case 5:
                localContext = new AlterDatabaseSetQuotaContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2782;
                this.match(DorisParser.ALTER);
                this.state = 2783;
                this.match(DorisParser.DATABASE);
                this.state = 2784;
                (localContext as AlterDatabaseSetQuotaContext)._name = this.identifier();
                this.state = 2785;
                this.match(DorisParser.SET);
                this.state = 2786;
                _la = this.tokenStream.LA(1);
                if(!(_la === 112 || _la === 383 || _la === 465)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2787;
                this.match(DorisParser.QUOTA);
                this.state = 2788;
                this.match(DorisParser.INTEGER_VALUE);
                this.state = 2790;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 375, this.context) ) {
                case 1:
                    {
                    this.state = 2789;
                    this.identifier();
                    }
                    break;
                }
                }
                break;
            case 6:
                localContext = new AlterDatabaseRenameContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2792;
                this.match(DorisParser.ALTER);
                this.state = 2793;
                this.match(DorisParser.DATABASE);
                this.state = 2794;
                (localContext as AlterDatabaseRenameContext)._name = this.identifier();
                this.state = 2795;
                this.match(DorisParser.RENAME);
                this.state = 2796;
                (localContext as AlterDatabaseRenameContext)._newName = this.identifier();
                }
                break;
            case 7:
                localContext = new AlterDatabasePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2798;
                this.match(DorisParser.ALTER);
                this.state = 2799;
                this.match(DorisParser.DATABASE);
                this.state = 2800;
                (localContext as AlterDatabasePropertiesContext)._name = this.identifier();
                this.state = 2801;
                this.match(DorisParser.SET);
                this.state = 2802;
                this.match(DorisParser.PROPERTIES);
                this.state = 2803;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 2804;
                this.propertyItemList();
                this.state = 2805;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 8:
                localContext = new AlterCatalogRenameContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2807;
                this.match(DorisParser.ALTER);
                this.state = 2808;
                this.match(DorisParser.CATALOG);
                this.state = 2809;
                (localContext as AlterCatalogRenameContext)._name = this.identifier();
                this.state = 2810;
                this.match(DorisParser.RENAME);
                this.state = 2811;
                (localContext as AlterCatalogRenameContext)._newName = this.identifier();
                }
                break;
            case 9:
                localContext = new AlterCatalogPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2813;
                this.match(DorisParser.ALTER);
                this.state = 2814;
                this.match(DorisParser.CATALOG);
                this.state = 2815;
                (localContext as AlterCatalogPropertiesContext)._name = this.identifier();
                this.state = 2816;
                this.match(DorisParser.SET);
                this.state = 2817;
                this.match(DorisParser.PROPERTIES);
                this.state = 2818;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 2819;
                this.propertyItemList();
                this.state = 2820;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 10:
                localContext = new AlterCatalogCommentContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2822;
                this.match(DorisParser.ALTER);
                this.state = 2823;
                this.match(DorisParser.CATALOG);
                this.state = 2824;
                (localContext as AlterCatalogCommentContext)._name = this.identifier();
                this.state = 2825;
                this.match(DorisParser.MODIFY);
                this.state = 2826;
                this.match(DorisParser.COMMENT);
                this.state = 2827;
                (localContext as AlterCatalogCommentContext)._comment = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 11:
                localContext = new AlterResourceContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2829;
                this.match(DorisParser.ALTER);
                this.state = 2830;
                this.match(DorisParser.RESOURCE);
                this.state = 2831;
                (localContext as AlterResourceContext)._name = this.identifierOrText();
                this.state = 2833;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2832;
                    (localContext as AlterResourceContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 12:
                localContext = new AlterColocateGroupContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2835;
                this.match(DorisParser.ALTER);
                this.state = 2836;
                this.match(DorisParser.COLOCATE);
                this.state = 2837;
                this.match(DorisParser.GROUP);
                this.state = 2838;
                (localContext as AlterColocateGroupContext)._name = this.multipartIdentifier();
                this.state = 2839;
                this.match(DorisParser.SET);
                this.state = 2840;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 2841;
                this.propertyItemList();
                this.state = 2842;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 13:
                localContext = new AlterRoutineLoadContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2844;
                this.match(DorisParser.ALTER);
                this.state = 2845;
                this.match(DorisParser.ROUTINE);
                this.state = 2846;
                this.match(DorisParser.LOAD);
                this.state = 2847;
                this.match(DorisParser.FOR);
                this.state = 2848;
                (localContext as AlterRoutineLoadContext)._name = this.multipartIdentifier();
                this.state = 2850;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2849;
                    (localContext as AlterRoutineLoadContext)._properties = this.propertyClause();
                    }
                }

                this.state = 2858;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 2852;
                    this.match(DorisParser.FROM);
                    this.state = 2853;
                    (localContext as AlterRoutineLoadContext)._type_ = this.identifier();
                    this.state = 2854;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 2855;
                    this.propertyItemList();
                    this.state = 2856;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                }
                break;
            case 14:
                localContext = new AlterSqlBlockRuleContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2860;
                this.match(DorisParser.ALTER);
                this.state = 2861;
                this.match(DorisParser.SQL_BLOCK_RULE);
                this.state = 2862;
                (localContext as AlterSqlBlockRuleContext)._name = this.identifier();
                this.state = 2864;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2863;
                    (localContext as AlterSqlBlockRuleContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 15:
                localContext = new AlterTablePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2866;
                this.match(DorisParser.ALTER);
                this.state = 2867;
                this.match(DorisParser.TABLE);
                this.state = 2868;
                (localContext as AlterTablePropertiesContext)._name = this.multipartIdentifier();
                this.state = 2869;
                this.match(DorisParser.SET);
                this.state = 2870;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 2871;
                this.propertyItemList();
                this.state = 2872;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 16:
                localContext = new AlterStoragePlicyContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2874;
                this.match(DorisParser.ALTER);
                this.state = 2875;
                this.match(DorisParser.STORAGE);
                this.state = 2876;
                this.match(DorisParser.POLICY);
                this.state = 2877;
                (localContext as AlterStoragePlicyContext)._name = this.identifierOrText();
                this.state = 2878;
                (localContext as AlterStoragePlicyContext)._properties = this.propertyClause();
                }
                break;
            case 17:
                localContext = new AlterUserContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2880;
                this.match(DorisParser.ALTER);
                this.state = 2881;
                this.match(DorisParser.USER);
                this.state = 2884;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 2882;
                    this.match(DorisParser.IF);
                    this.state = 2883;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 2886;
                this.grantUserIdentify();
                this.state = 2887;
                this.passwordOption();
                this.state = 2890;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 2888;
                    this.match(DorisParser.COMMENT);
                    this.state = 2889;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                }

                }
                break;
            case 18:
                localContext = new AlterRepositoryContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2892;
                this.match(DorisParser.ALTER);
                this.state = 2893;
                this.match(DorisParser.REPOSITORY);
                this.state = 2894;
                (localContext as AlterRepositoryContext)._name = this.identifier();
                this.state = 2896;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2895;
                    (localContext as AlterRepositoryContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterSystemClause(): AlterSystemClauseContext {
        let localContext = new AlterSystemClauseContext(this.context, this.state);
        this.enterRule(localContext, 92, DorisParser.RULE_alterSystemClause);
        let _la: number;
        try {
            this.state = 2998;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 392, this.context) ) {
            case 1:
                localContext = new AddBackendClauseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2900;
                this.match(DorisParser.ADD);
                this.state = 2901;
                this.match(DorisParser.BACKEND);
                this.state = 2902;
                (localContext as AddBackendClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                (localContext as AddBackendClauseContext)._hostPorts.push((localContext as AddBackendClauseContext)._STRING_LITERAL);
                this.state = 2907;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2903;
                    this.match(DorisParser.COMMA);
                    this.state = 2904;
                    (localContext as AddBackendClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as AddBackendClauseContext)._hostPorts.push((localContext as AddBackendClauseContext)._STRING_LITERAL);
                    }
                    }
                    this.state = 2909;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2911;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2910;
                    (localContext as AddBackendClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new DropBackendClauseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2913;
                _la = this.tokenStream.LA(1);
                if(!(_la === 153 || _la === 154)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2914;
                this.match(DorisParser.BACKEND);
                this.state = 2915;
                (localContext as DropBackendClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                (localContext as DropBackendClauseContext)._hostPorts.push((localContext as DropBackendClauseContext)._STRING_LITERAL);
                this.state = 2920;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2916;
                    this.match(DorisParser.COMMA);
                    this.state = 2917;
                    (localContext as DropBackendClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as DropBackendClauseContext)._hostPorts.push((localContext as DropBackendClauseContext)._STRING_LITERAL);
                    }
                    }
                    this.state = 2922;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 3:
                localContext = new DecommissionBackendClauseContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2923;
                this.match(DorisParser.DECOMMISSION);
                this.state = 2924;
                this.match(DorisParser.BACKEND);
                this.state = 2925;
                (localContext as DecommissionBackendClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                (localContext as DecommissionBackendClauseContext)._hostPorts.push((localContext as DecommissionBackendClauseContext)._STRING_LITERAL);
                this.state = 2930;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2926;
                    this.match(DorisParser.COMMA);
                    this.state = 2927;
                    (localContext as DecommissionBackendClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as DecommissionBackendClauseContext)._hostPorts.push((localContext as DecommissionBackendClauseContext)._STRING_LITERAL);
                    }
                    }
                    this.state = 2932;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 4:
                localContext = new AddObserverClauseContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2933;
                this.match(DorisParser.ADD);
                this.state = 2934;
                this.match(DorisParser.OBSERVER);
                this.state = 2935;
                (localContext as AddObserverClauseContext)._hostPort = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 5:
                localContext = new DropObserverClauseContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2936;
                this.match(DorisParser.DROP);
                this.state = 2937;
                this.match(DorisParser.OBSERVER);
                this.state = 2938;
                (localContext as DropObserverClauseContext)._hostPort = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 6:
                localContext = new AddFollowerClauseContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2939;
                this.match(DorisParser.ADD);
                this.state = 2940;
                this.match(DorisParser.FOLLOWER);
                this.state = 2941;
                (localContext as AddFollowerClauseContext)._hostPort = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 7:
                localContext = new DropFollowerClauseContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2942;
                this.match(DorisParser.DROP);
                this.state = 2943;
                this.match(DorisParser.FOLLOWER);
                this.state = 2944;
                (localContext as DropFollowerClauseContext)._hostPort = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 8:
                localContext = new AddBrokerClauseContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2945;
                this.match(DorisParser.ADD);
                this.state = 2946;
                this.match(DorisParser.BROKER);
                this.state = 2947;
                (localContext as AddBrokerClauseContext)._name = this.identifierOrText();
                this.state = 2948;
                (localContext as AddBrokerClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                (localContext as AddBrokerClauseContext)._hostPorts.push((localContext as AddBrokerClauseContext)._STRING_LITERAL);
                this.state = 2953;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2949;
                    this.match(DorisParser.COMMA);
                    this.state = 2950;
                    (localContext as AddBrokerClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as AddBrokerClauseContext)._hostPorts.push((localContext as AddBrokerClauseContext)._STRING_LITERAL);
                    }
                    }
                    this.state = 2955;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 9:
                localContext = new DropBrokerClauseContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2956;
                this.match(DorisParser.DROP);
                this.state = 2957;
                this.match(DorisParser.BROKER);
                this.state = 2958;
                (localContext as DropBrokerClauseContext)._name = this.identifierOrText();
                this.state = 2959;
                (localContext as DropBrokerClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                (localContext as DropBrokerClauseContext)._hostPorts.push((localContext as DropBrokerClauseContext)._STRING_LITERAL);
                this.state = 2964;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2960;
                    this.match(DorisParser.COMMA);
                    this.state = 2961;
                    (localContext as DropBrokerClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as DropBrokerClauseContext)._hostPorts.push((localContext as DropBrokerClauseContext)._STRING_LITERAL);
                    }
                    }
                    this.state = 2966;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 10:
                localContext = new DropAllBrokerClauseContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2967;
                this.match(DorisParser.DROP);
                this.state = 2968;
                this.match(DorisParser.ALL);
                this.state = 2969;
                this.match(DorisParser.BROKER);
                this.state = 2970;
                (localContext as DropAllBrokerClauseContext)._name = this.identifierOrText();
                }
                break;
            case 11:
                localContext = new AlterLoadErrorUrlClauseContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2971;
                this.match(DorisParser.SET);
                this.state = 2972;
                this.match(DorisParser.LOAD);
                this.state = 2973;
                this.match(DorisParser.ERRORS);
                this.state = 2974;
                this.match(DorisParser.HUB);
                this.state = 2976;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 2975;
                    (localContext as AlterLoadErrorUrlClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 12:
                localContext = new ModifyBackendClauseContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2978;
                this.match(DorisParser.MODIFY);
                this.state = 2979;
                this.match(DorisParser.BACKEND);
                this.state = 2980;
                (localContext as ModifyBackendClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                (localContext as ModifyBackendClauseContext)._hostPorts.push((localContext as ModifyBackendClauseContext)._STRING_LITERAL);
                this.state = 2985;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2981;
                    this.match(DorisParser.COMMA);
                    this.state = 2982;
                    (localContext as ModifyBackendClauseContext)._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    (localContext as ModifyBackendClauseContext)._hostPorts.push((localContext as ModifyBackendClauseContext)._STRING_LITERAL);
                    }
                    }
                    this.state = 2987;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2988;
                this.match(DorisParser.SET);
                this.state = 2989;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 2990;
                this.propertyItemList();
                this.state = 2991;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 13:
                localContext = new ModifyFrontendOrBackendHostNameClauseContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2993;
                this.match(DorisParser.MODIFY);
                this.state = 2994;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 199)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2995;
                (localContext as ModifyFrontendOrBackendHostNameClauseContext)._hostPort = this.match(DorisParser.STRING_LITERAL);
                this.state = 2996;
                this.match(DorisParser.HOSTNAME);
                this.state = 2997;
                (localContext as ModifyFrontendOrBackendHostNameClauseContext)._hostName = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropRollupClause(): DropRollupClauseContext {
        let localContext = new DropRollupClauseContext(this.context, this.state);
        this.enterRule(localContext, 94, DorisParser.RULE_dropRollupClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3000;
            localContext._rollupName = this.identifier();
            this.state = 3002;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 358) {
                {
                this.state = 3001;
                localContext._properties = this.propertyClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public addRollupClause(): AddRollupClauseContext {
        let localContext = new AddRollupClauseContext(this.context, this.state);
        this.enterRule(localContext, 96, DorisParser.RULE_addRollupClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3004;
            localContext._rollupName = this.identifier();
            this.state = 3005;
            localContext._columns = this.identifierList();
            this.state = 3009;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 157) {
                {
                this.state = 3006;
                this.match(DorisParser.DUPLICATE);
                this.state = 3007;
                this.match(DorisParser.KEY);
                this.state = 3008;
                localContext._dupKeys = this.identifierList();
                }
            }

            this.state = 3012;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 198) {
                {
                this.state = 3011;
                this.fromRollup();
                }
            }

            this.state = 3015;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 358) {
                {
                this.state = 3014;
                localContext._properties = this.propertyClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableClause(): AlterTableClauseContext {
        let localContext = new AlterTableClauseContext(this.context, this.state);
        this.enterRule(localContext, 98, DorisParser.RULE_alterTableClause);
        let _la: number;
        try {
            this.state = 3258;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
            case 1:
                localContext = new AddColumnClauseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3017;
                this.match(DorisParser.ADD);
                this.state = 3018;
                this.match(DorisParser.COLUMN);
                this.state = 3019;
                this.columnDef();
                this.state = 3021;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17 || _la === 189) {
                    {
                    this.state = 3020;
                    this.columnPosition();
                    }
                }

                this.state = 3024;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 228 || _la === 464) {
                    {
                    this.state = 3023;
                    this.toRollup();
                    }
                }

                this.state = 3027;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3026;
                    (localContext as AddColumnClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new AddColumnsClauseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3029;
                this.match(DorisParser.ADD);
                this.state = 3030;
                this.match(DorisParser.COLUMN);
                this.state = 3031;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 3032;
                this.columnDef();
                this.state = 3037;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3033;
                    this.match(DorisParser.COMMA);
                    this.state = 3034;
                    this.columnDef();
                    }
                    }
                    this.state = 3039;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3040;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 3042;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 228 || _la === 464) {
                    {
                    this.state = 3041;
                    this.toRollup();
                    }
                }

                this.state = 3045;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3044;
                    (localContext as AddColumnsClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 3:
                localContext = new DropColumnClauseContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3047;
                this.match(DorisParser.DROP);
                this.state = 3048;
                this.match(DorisParser.COLUMN);
                this.state = 3049;
                (localContext as DropColumnClauseContext)._name = this.identifier();
                this.state = 3051;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 3050;
                    this.fromRollup();
                    }
                }

                this.state = 3054;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3053;
                    (localContext as DropColumnClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 4:
                localContext = new ModifyColumnClauseContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3056;
                this.match(DorisParser.MODIFY);
                this.state = 3057;
                this.match(DorisParser.COLUMN);
                this.state = 3058;
                this.columnDef();
                this.state = 3060;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17 || _la === 189) {
                    {
                    this.state = 3059;
                    this.columnPosition();
                    }
                }

                this.state = 3063;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 3062;
                    this.fromRollup();
                    }
                }

                this.state = 3066;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3065;
                    (localContext as ModifyColumnClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 5:
                localContext = new ReorderColumnsClauseContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3068;
                this.match(DorisParser.ORDER);
                this.state = 3069;
                this.match(DorisParser.BY);
                this.state = 3070;
                this.identifierList();
                this.state = 3072;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 3071;
                    this.fromRollup();
                    }
                }

                this.state = 3075;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3074;
                    (localContext as ReorderColumnsClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 6:
                localContext = new AddPartitionClauseContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3077;
                this.match(DorisParser.ADD);
                this.state = 3079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 454) {
                    {
                    this.state = 3078;
                    this.match(DorisParser.TEMPORARY);
                    }
                }

                this.state = 3084;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 411, this.context) ) {
                case 1:
                    {
                    this.state = 3081;
                    this.lessThanPartitionDef();
                    }
                    break;
                case 2:
                    {
                    this.state = 3082;
                    this.fixedPartitionDef();
                    }
                    break;
                case 3:
                    {
                    this.state = 3083;
                    this.inPartitionDef();
                    }
                    break;
                }
                this.state = 3090;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 412, this.context) ) {
                case 1:
                    {
                    this.state = 3086;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 3087;
                    (localContext as AddPartitionClauseContext)._partitionProperties = this.propertyItemList();
                    this.state = 3088;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3106;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 3092;
                    this.match(DorisParser.DISTRIBUTED);
                    this.state = 3093;
                    this.match(DorisParser.BY);
                    this.state = 3097;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case DorisParser.HASH:
                        {
                        this.state = 3094;
                        this.match(DorisParser.HASH);
                        this.state = 3095;
                        (localContext as AddPartitionClauseContext)._hashKeys = this.identifierList();
                        }
                        break;
                    case DorisParser.RANDOM:
                        {
                        this.state = 3096;
                        this.match(DorisParser.RANDOM);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3104;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 57) {
                        {
                        this.state = 3099;
                        this.match(DorisParser.BUCKETS);
                        this.state = 3102;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case DorisParser.INTEGER_VALUE:
                            {
                            this.state = 3100;
                            this.match(DorisParser.INTEGER_VALUE);
                            }
                            break;
                        case DorisParser.AUTO:
                            {
                            this.state = 3101;
                            (localContext as AddPartitionClauseContext)._autoBucket = this.match(DorisParser.AUTO);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                    }

                    }
                }

                this.state = 3109;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3108;
                    (localContext as AddPartitionClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 7:
                localContext = new DropPartitionClauseContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3111;
                this.match(DorisParser.DROP);
                this.state = 3113;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 454) {
                    {
                    this.state = 3112;
                    this.match(DorisParser.TEMPORARY);
                    }
                }

                this.state = 3115;
                this.match(DorisParser.PARTITION);
                this.state = 3118;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3116;
                    this.match(DorisParser.IF);
                    this.state = 3117;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3120;
                (localContext as DropPartitionClauseContext)._partitionName = this.identifier();
                this.state = 3122;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 3121;
                    this.match(DorisParser.FORCE);
                    }
                }

                this.state = 3127;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 3124;
                    this.match(DorisParser.FROM);
                    this.state = 3125;
                    this.match(DorisParser.INDEX);
                    this.state = 3126;
                    (localContext as DropPartitionClauseContext)._indexName = this.identifier();
                    }
                }

                }
                break;
            case 8:
                localContext = new ModifyPartitionClauseContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3129;
                this.match(DorisParser.MODIFY);
                this.state = 3131;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 454) {
                    {
                    this.state = 3130;
                    this.match(DorisParser.TEMPORARY);
                    }
                }

                this.state = 3133;
                this.match(DorisParser.PARTITION);
                this.state = 3136;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3134;
                    this.match(DorisParser.IF);
                    this.state = 3135;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3143;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 424, this.context) ) {
                case 1:
                    {
                    this.state = 3138;
                    (localContext as ModifyPartitionClauseContext)._partitionName = this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 3139;
                    (localContext as ModifyPartitionClauseContext)._partitionNames = this.identifierList();
                    }
                    break;
                case 3:
                    {
                    this.state = 3140;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 3141;
                    this.match(DorisParser.ASTERISK);
                    this.state = 3142;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3145;
                this.match(DorisParser.SET);
                this.state = 3146;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 3147;
                (localContext as ModifyPartitionClauseContext)._partitionProperties = this.propertyItemList();
                this.state = 3148;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 9:
                localContext = new ReplacePartitionClauseContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3150;
                this.match(DorisParser.REPLACE);
                this.state = 3152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 3151;
                    (localContext as ReplacePartitionClauseContext)._partitions = this.partitionSpec();
                    }
                }

                this.state = 3154;
                this.match(DorisParser.WITH);
                this.state = 3156;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 3155;
                    (localContext as ReplacePartitionClauseContext)._tempPartitions = this.partitionSpec();
                    }
                }

                this.state = 3159;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 3158;
                    this.match(DorisParser.FORCE);
                    }
                }

                this.state = 3162;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3161;
                    (localContext as ReplacePartitionClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 10:
                localContext = new ReplaceTableClauseContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3164;
                this.match(DorisParser.REPLACE);
                this.state = 3165;
                this.match(DorisParser.WITH);
                this.state = 3166;
                this.match(DorisParser.TABLE);
                this.state = 3167;
                (localContext as ReplaceTableClauseContext)._name = this.identifier();
                this.state = 3169;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3168;
                    (localContext as ReplaceTableClauseContext)._properties = this.propertyClause();
                    }
                }

                this.state = 3172;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 3171;
                    this.match(DorisParser.FORCE);
                    }
                }

                }
                break;
            case 11:
                localContext = new RenameClauseContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3174;
                this.match(DorisParser.RENAME);
                this.state = 3175;
                (localContext as RenameClauseContext)._newName = this.identifier();
                }
                break;
            case 12:
                localContext = new RenameRollupClauseContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3176;
                this.match(DorisParser.RENAME);
                this.state = 3177;
                this.match(DorisParser.ROLLUP);
                this.state = 3178;
                (localContext as RenameRollupClauseContext)._name = this.identifier();
                this.state = 3179;
                (localContext as RenameRollupClauseContext)._newName = this.identifier();
                }
                break;
            case 13:
                localContext = new RenamePartitionClauseContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3181;
                this.match(DorisParser.RENAME);
                this.state = 3182;
                this.match(DorisParser.PARTITION);
                this.state = 3183;
                (localContext as RenamePartitionClauseContext)._name = this.identifier();
                this.state = 3184;
                (localContext as RenamePartitionClauseContext)._newName = this.identifier();
                }
                break;
            case 14:
                localContext = new RenameColumnClauseContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3186;
                this.match(DorisParser.RENAME);
                this.state = 3187;
                this.match(DorisParser.COLUMN);
                this.state = 3188;
                (localContext as RenameColumnClauseContext)._name = this.identifier();
                this.state = 3189;
                (localContext as RenameColumnClauseContext)._newName = this.identifier();
                }
                break;
            case 15:
                localContext = new AddIndexClauseContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3191;
                this.match(DorisParser.ADD);
                this.state = 3192;
                this.indexDef();
                }
                break;
            case 16:
                localContext = new DropIndexClauseContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3193;
                this.match(DorisParser.DROP);
                this.state = 3194;
                this.match(DorisParser.INDEX);
                this.state = 3197;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3195;
                    this.match(DorisParser.IF);
                    this.state = 3196;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3199;
                (localContext as DropIndexClauseContext)._name = this.identifier();
                }
                break;
            case 17:
                localContext = new EnableFeatureClauseContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3200;
                this.match(DorisParser.ENABLE);
                this.state = 3201;
                this.match(DorisParser.FEATURE);
                this.state = 3202;
                (localContext as EnableFeatureClauseContext)._name = this.match(DorisParser.STRING_LITERAL);
                this.state = 3205;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 432, this.context) ) {
                case 1:
                    {
                    this.state = 3203;
                    this.match(DorisParser.WITH);
                    this.state = 3204;
                    (localContext as EnableFeatureClauseContext)._properties = this.propertyClause();
                    }
                    break;
                }
                }
                break;
            case 18:
                localContext = new ModifyDistributionClauseContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 3207;
                this.match(DorisParser.MODIFY);
                this.state = 3208;
                this.match(DorisParser.DISTRIBUTION);
                this.state = 3223;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 3209;
                    this.match(DorisParser.DISTRIBUTED);
                    this.state = 3210;
                    this.match(DorisParser.BY);
                    this.state = 3214;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case DorisParser.HASH:
                        {
                        this.state = 3211;
                        this.match(DorisParser.HASH);
                        this.state = 3212;
                        (localContext as ModifyDistributionClauseContext)._hashKeys = this.identifierList();
                        }
                        break;
                    case DorisParser.RANDOM:
                        {
                        this.state = 3213;
                        this.match(DorisParser.RANDOM);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3221;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 57) {
                        {
                        this.state = 3216;
                        this.match(DorisParser.BUCKETS);
                        this.state = 3219;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case DorisParser.INTEGER_VALUE:
                            {
                            this.state = 3217;
                            this.match(DorisParser.INTEGER_VALUE);
                            }
                            break;
                        case DorisParser.AUTO:
                            {
                            this.state = 3218;
                            (localContext as ModifyDistributionClauseContext)._autoBucket = this.match(DorisParser.AUTO);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                    }

                    }
                }

                }
                break;
            case 19:
                localContext = new ModifyTableCommentClauseContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 3225;
                this.match(DorisParser.MODIFY);
                this.state = 3226;
                this.match(DorisParser.COMMENT);
                this.state = 3227;
                (localContext as ModifyTableCommentClauseContext)._comment = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 20:
                localContext = new ModifyColumnCommentClauseContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 3228;
                this.match(DorisParser.MODIFY);
                this.state = 3229;
                this.match(DorisParser.COLUMN);
                this.state = 3230;
                (localContext as ModifyColumnCommentClauseContext)._name = this.identifier();
                this.state = 3231;
                this.match(DorisParser.COMMENT);
                this.state = 3232;
                (localContext as ModifyColumnCommentClauseContext)._comment = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 21:
                localContext = new ModifyEngineClauseContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 3234;
                this.match(DorisParser.MODIFY);
                this.state = 3235;
                this.match(DorisParser.ENGINE);
                this.state = 3236;
                this.match(DorisParser.TO);
                this.state = 3237;
                (localContext as ModifyEngineClauseContext)._name = this.identifier();
                this.state = 3239;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3238;
                    (localContext as ModifyEngineClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 22:
                localContext = new AlterMultiPartitionClauseContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 3241;
                this.match(DorisParser.ADD);
                this.state = 3243;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 454) {
                    {
                    this.state = 3242;
                    this.match(DorisParser.TEMPORARY);
                    }
                }

                this.state = 3245;
                this.match(DorisParser.PARTITIONS);
                this.state = 3246;
                this.match(DorisParser.FROM);
                this.state = 3247;
                (localContext as AlterMultiPartitionClauseContext)._from_ = this.partitionValueList();
                this.state = 3248;
                this.match(DorisParser.TO);
                this.state = 3249;
                (localContext as AlterMultiPartitionClauseContext)._to = this.partitionValueList();
                this.state = 3250;
                this.match(DorisParser.INTERVAL);
                this.state = 3251;
                this.match(DorisParser.INTEGER_VALUE);
                this.state = 3253;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 439, this.context) ) {
                case 1:
                    {
                    this.state = 3252;
                    (localContext as AlterMultiPartitionClauseContext)._unit = this.identifier();
                    }
                    break;
                }
                this.state = 3256;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3255;
                    (localContext as AlterMultiPartitionClauseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnPosition(): ColumnPositionContext {
        let localContext = new ColumnPositionContext(this.context, this.state);
        this.enterRule(localContext, 100, DorisParser.RULE_columnPosition);
        try {
            this.state = 3263;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.FIRST:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3260;
                this.match(DorisParser.FIRST);
                }
                break;
            case DorisParser.AFTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3261;
                this.match(DorisParser.AFTER);
                this.state = 3262;
                localContext._position = this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public toRollup(): ToRollupContext {
        let localContext = new ToRollupContext(this.context, this.state);
        this.enterRule(localContext, 102, DorisParser.RULE_toRollup);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3265;
            _la = this.tokenStream.LA(1);
            if(!(_la === 228 || _la === 464)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3266;
            localContext._rollup = this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromRollup(): FromRollupContext {
        let localContext = new FromRollupContext(this.context, this.state);
        this.enterRule(localContext, 104, DorisParser.RULE_fromRollup);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3268;
            this.match(DorisParser.FROM);
            this.state = 3269;
            localContext._rollup = this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedDropStatement(): UnsupportedDropStatementContext {
        let localContext = new UnsupportedDropStatementContext(this.context, this.state);
        this.enterRule(localContext, 106, DorisParser.RULE_unsupportedDropStatement);
        let _la: number;
        try {
            this.state = 3374;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 459, this.context) ) {
            case 1:
                localContext = new DropDatabaseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3271;
                this.match(DorisParser.DROP);
                this.state = 3272;
                _la = this.tokenStream.LA(1);
                if(!(_la === 113 || _la === 407)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3275;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3273;
                    this.match(DorisParser.IF);
                    this.state = 3274;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3277;
                (localContext as DropDatabaseContext)._name = this.multipartIdentifier();
                this.state = 3279;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 3278;
                    this.match(DorisParser.FORCE);
                    }
                }

                }
                break;
            case 2:
                localContext = new DropCatalogContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3281;
                this.match(DorisParser.DROP);
                this.state = 3282;
                this.match(DorisParser.CATALOG);
                this.state = 3285;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3283;
                    this.match(DorisParser.IF);
                    this.state = 3284;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3287;
                (localContext as DropCatalogContext)._name = this.identifier();
                }
                break;
            case 3:
                localContext = new DropFunctionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3288;
                this.match(DorisParser.DROP);
                this.state = 3290;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206 || _la === 273 || _la === 414) {
                    {
                    this.state = 3289;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 206 || _la === 273 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3292;
                this.match(DorisParser.FUNCTION);
                this.state = 3295;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 447, this.context) ) {
                case 1:
                    {
                    this.state = 3293;
                    this.match(DorisParser.IF);
                    this.state = 3294;
                    this.match(DorisParser.EXISTS);
                    }
                    break;
                }
                this.state = 3297;
                this.functionIdentifier();
                this.state = 3298;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 3300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 270794816) !== 0) || ((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & 268437537) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & 466689) !== 0) || _la === 152 || _la === 190 || _la === 218 || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & 8782211) !== 0) || _la === 281 || _la === 360 || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & 196609) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 137) !== 0) || _la === 490 || _la === 493) {
                    {
                    this.state = 3299;
                    this.functionArguments();
                    }
                }

                this.state = 3302;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 4:
                localContext = new DropTableContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3304;
                this.match(DorisParser.DROP);
                this.state = 3305;
                this.match(DorisParser.TABLE);
                this.state = 3308;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3306;
                    this.match(DorisParser.IF);
                    this.state = 3307;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3310;
                (localContext as DropTableContext)._name = this.multipartIdentifier();
                this.state = 3312;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 3311;
                    this.match(DorisParser.FORCE);
                    }
                }

                }
                break;
            case 5:
                localContext = new DropViewContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3314;
                this.match(DorisParser.DROP);
                this.state = 3315;
                this.match(DorisParser.VIEW);
                this.state = 3318;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3316;
                    this.match(DorisParser.IF);
                    this.state = 3317;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3320;
                (localContext as DropViewContext)._name = this.multipartIdentifier();
                }
                break;
            case 6:
                localContext = new DropRepositoryContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3321;
                this.match(DorisParser.DROP);
                this.state = 3322;
                this.match(DorisParser.REPOSITORY);
                this.state = 3323;
                (localContext as DropRepositoryContext)._name = this.identifier();
                }
                break;
            case 7:
                localContext = new DropIndexContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3324;
                this.match(DorisParser.DROP);
                this.state = 3325;
                this.match(DorisParser.INDEX);
                this.state = 3328;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3326;
                    this.match(DorisParser.IF);
                    this.state = 3327;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3330;
                (localContext as DropIndexContext)._name = this.identifier();
                this.state = 3331;
                this.match(DorisParser.ON);
                this.state = 3332;
                (localContext as DropIndexContext)._tableName = this.multipartIdentifier();
                }
                break;
            case 8:
                localContext = new DropResourceContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3334;
                this.match(DorisParser.DROP);
                this.state = 3335;
                this.match(DorisParser.RESOURCE);
                this.state = 3338;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3336;
                    this.match(DorisParser.IF);
                    this.state = 3337;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3340;
                (localContext as DropResourceContext)._name = this.identifierOrText();
                }
                break;
            case 9:
                localContext = new DropRowPolicyContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3341;
                this.match(DorisParser.DROP);
                this.state = 3342;
                this.match(DorisParser.ROW);
                this.state = 3343;
                this.match(DorisParser.POLICY);
                this.state = 3346;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3344;
                    this.match(DorisParser.IF);
                    this.state = 3345;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3348;
                (localContext as DropRowPolicyContext)._policyName = this.identifier();
                this.state = 3349;
                this.match(DorisParser.ON);
                this.state = 3350;
                (localContext as DropRowPolicyContext)._tableName = this.multipartIdentifier();
                this.state = 3357;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 3351;
                    this.match(DorisParser.FOR);
                    this.state = 3355;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case DorisParser.LEFT_BRACE:
                    case DorisParser.RIGHT_BRACE:
                    case DorisParser.ACTIONS:
                    case DorisParser.ADDDATE:
                    case DorisParser.AFTER:
                    case DorisParser.AGG_STATE:
                    case DorisParser.AGGREGATE:
                    case DorisParser.ALIAS:
                    case DorisParser.ANALYZED:
                    case DorisParser.ARRAY:
                    case DorisParser.ARRAY_RANGE:
                    case DorisParser.AT:
                    case DorisParser.AUTHORS:
                    case DorisParser.AUTO_INCREMENT:
                    case DorisParser.ALWAYS:
                    case DorisParser.BACKENDS:
                    case DorisParser.BACKUP:
                    case DorisParser.BEGIN:
                    case DorisParser.BELONG:
                    case DorisParser.BIN:
                    case DorisParser.BITAND:
                    case DorisParser.BITMAP:
                    case DorisParser.BITMAP_EMPTY:
                    case DorisParser.BITMAP_UNION:
                    case DorisParser.BITOR:
                    case DorisParser.BITXOR:
                    case DorisParser.BLOB:
                    case DorisParser.BOOLEAN:
                    case DorisParser.BRIEF:
                    case DorisParser.BROKER:
                    case DorisParser.BUCKETS:
                    case DorisParser.BUILD:
                    case DorisParser.BUILTIN:
                    case DorisParser.BULK:
                    case DorisParser.CACHE:
                    case DorisParser.CACHED:
                    case DorisParser.CALL:
                    case DorisParser.CATALOG:
                    case DorisParser.CATALOGS:
                    case DorisParser.CHAIN:
                    case DorisParser.CHAR:
                    case DorisParser.CHARSET:
                    case DorisParser.CHECK:
                    case DorisParser.CLUSTER:
                    case DorisParser.CLUSTERS:
                    case DorisParser.COLLATION:
                    case DorisParser.COLLECT:
                    case DorisParser.COLOCATE:
                    case DorisParser.COLUMNS:
                    case DorisParser.COMMENT:
                    case DorisParser.COMMIT:
                    case DorisParser.COMMITTED:
                    case DorisParser.COMPACT:
                    case DorisParser.COMPLETE:
                    case DorisParser.COMPRESS_TYPE:
                    case DorisParser.COMPUTE:
                    case DorisParser.CONDITIONS:
                    case DorisParser.CONFIG:
                    case DorisParser.CONNECTION:
                    case DorisParser.CONNECTION_ID:
                    case DorisParser.CONSISTENT:
                    case DorisParser.CONSTRAINTS:
                    case DorisParser.CONVERT:
                    case DorisParser.CONVERT_LSC:
                    case DorisParser.COPY:
                    case DorisParser.COUNT:
                    case DorisParser.CREATION:
                    case DorisParser.CRON:
                    case DorisParser.CURRENT_CATALOG:
                    case DorisParser.CURRENT_DATE:
                    case DorisParser.CURRENT_TIME:
                    case DorisParser.CURRENT_TIMESTAMP:
                    case DorisParser.CURRENT_USER:
                    case DorisParser.DATA:
                    case DorisParser.DATE:
                    case DorisParser.DATE_ADD:
                    case DorisParser.DATE_CEIL:
                    case DorisParser.DATE_DIFF:
                    case DorisParser.DATE_FLOOR:
                    case DorisParser.DATE_SUB:
                    case DorisParser.DATEADD:
                    case DorisParser.DATEDIFF:
                    case DorisParser.DATETIME:
                    case DorisParser.DATETIMEV2:
                    case DorisParser.DATEV2:
                    case DorisParser.DATETIMEV1:
                    case DorisParser.DATEV1:
                    case DorisParser.DAY:
                    case DorisParser.DAYS_ADD:
                    case DorisParser.DAYS_SUB:
                    case DorisParser.DECIMAL:
                    case DorisParser.DECIMALV2:
                    case DorisParser.DECIMALV3:
                    case DorisParser.DEFERRED:
                    case DorisParser.DEMAND:
                    case DorisParser.DIAGNOSE:
                    case DorisParser.DIAGNOSIS:
                    case DorisParser.DISTINCTPC:
                    case DorisParser.DISTINCTPCSA:
                    case DorisParser.DO:
                    case DorisParser.DORIS_INTERNAL_TABLE_ID:
                    case DorisParser.DUAL:
                    case DorisParser.DYNAMIC:
                    case DorisParser.E:
                    case DorisParser.ENABLE:
                    case DorisParser.ENCRYPTKEY:
                    case DorisParser.ENCRYPTKEYS:
                    case DorisParser.END:
                    case DorisParser.ENDS:
                    case DorisParser.ENGINE:
                    case DorisParser.ENGINES:
                    case DorisParser.ERRORS:
                    case DorisParser.EVENTS:
                    case DorisParser.EVERY:
                    case DorisParser.EXCLUDE:
                    case DorisParser.EXPIRED:
                    case DorisParser.EXTERNAL:
                    case DorisParser.FAILED_LOGIN_ATTEMPTS:
                    case DorisParser.FAST:
                    case DorisParser.FEATURE:
                    case DorisParser.FIELDS:
                    case DorisParser.FILE:
                    case DorisParser.FILTER:
                    case DorisParser.FIRST:
                    case DorisParser.FORMAT:
                    case DorisParser.FREE:
                    case DorisParser.FRONTENDS:
                    case DorisParser.FUNCTION:
                    case DorisParser.GENERATED:
                    case DorisParser.GENERIC:
                    case DorisParser.GLOBAL:
                    case DorisParser.GRAPH:
                    case DorisParser.GROUPING:
                    case DorisParser.GROUPS:
                    case DorisParser.HASH:
                    case DorisParser.HDFS:
                    case DorisParser.HELP:
                    case DorisParser.HISTOGRAM:
                    case DorisParser.HLL_UNION:
                    case DorisParser.HOSTNAME:
                    case DorisParser.HOTSPOT:
                    case DorisParser.HOUR:
                    case DorisParser.HUB:
                    case DorisParser.IDENTIFIED:
                    case DorisParser.IGNORE:
                    case DorisParser.IMMEDIATE:
                    case DorisParser.INCREMENTAL:
                    case DorisParser.INDEXES:
                    case DorisParser.INVERTED:
                    case DorisParser.IPV4:
                    case DorisParser.IPV6:
                    case DorisParser.IS_NOT_NULL_PRED:
                    case DorisParser.IS_NULL_PRED:
                    case DorisParser.ISNULL:
                    case DorisParser.ISOLATION:
                    case DorisParser.JOB:
                    case DorisParser.JOBS:
                    case DorisParser.JSON:
                    case DorisParser.JSONB:
                    case DorisParser.LABEL:
                    case DorisParser.LAST:
                    case DorisParser.LDAP:
                    case DorisParser.LDAP_ADMIN_PASSWORD:
                    case DorisParser.LESS:
                    case DorisParser.LEVEL:
                    case DorisParser.LINES:
                    case DorisParser.LINK:
                    case DorisParser.LOCAL:
                    case DorisParser.LOCALTIME:
                    case DorisParser.LOCALTIMESTAMP:
                    case DorisParser.LOCATION:
                    case DorisParser.LOCK:
                    case DorisParser.LOGICAL:
                    case DorisParser.MANUAL:
                    case DorisParser.MAP:
                    case DorisParser.MATCH_ALL:
                    case DorisParser.MATCH_ANY:
                    case DorisParser.MATCH_PHRASE:
                    case DorisParser.MATCH_PHRASE_EDGE:
                    case DorisParser.MATCH_PHRASE_PREFIX:
                    case DorisParser.MATCH_REGEXP:
                    case DorisParser.MATERIALIZED:
                    case DorisParser.MAX:
                    case DorisParser.MEMO:
                    case DorisParser.MERGE:
                    case DorisParser.MIGRATE:
                    case DorisParser.MIGRATIONS:
                    case DorisParser.MIN:
                    case DorisParser.MINUTE:
                    case DorisParser.MODIFY:
                    case DorisParser.MONTH:
                    case DorisParser.MTMV:
                    case DorisParser.NAME:
                    case DorisParser.NAMES:
                    case DorisParser.NEGATIVE:
                    case DorisParser.NEVER:
                    case DorisParser.NEXT:
                    case DorisParser.NGRAM_BF:
                    case DorisParser.NO:
                    case DorisParser.NON_NULLABLE:
                    case DorisParser.NULLS:
                    case DorisParser.OF:
                    case DorisParser.OFFSET:
                    case DorisParser.ONLY:
                    case DorisParser.OPEN:
                    case DorisParser.OPTIMIZED:
                    case DorisParser.PARAMETER:
                    case DorisParser.PARSED:
                    case DorisParser.PARTITIONS:
                    case DorisParser.PASSWORD:
                    case DorisParser.PASSWORD_EXPIRE:
                    case DorisParser.PASSWORD_HISTORY:
                    case DorisParser.PASSWORD_LOCK_TIME:
                    case DorisParser.PASSWORD_REUSE:
                    case DorisParser.PATH:
                    case DorisParser.PAUSE:
                    case DorisParser.PERCENT:
                    case DorisParser.PERIOD:
                    case DorisParser.PERMISSIVE:
                    case DorisParser.PHYSICAL:
                    case DorisParser.PI:
                    case DorisParser.PLAN:
                    case DorisParser.PRIVILEGES:
                    case DorisParser.PROCESS:
                    case DorisParser.PLUGIN:
                    case DorisParser.PLUGINS:
                    case DorisParser.POLICY:
                    case DorisParser.PROC:
                    case DorisParser.PROCESSLIST:
                    case DorisParser.PROFILE:
                    case DorisParser.PROPERTIES:
                    case DorisParser.PROPERTY:
                    case DorisParser.QUANTILE_STATE:
                    case DorisParser.QUANTILE_UNION:
                    case DorisParser.QUERY:
                    case DorisParser.QUOTA:
                    case DorisParser.QUALIFY:
                    case DorisParser.RANDOM:
                    case DorisParser.RECENT:
                    case DorisParser.RECOVER:
                    case DorisParser.RECYCLE:
                    case DorisParser.REFRESH:
                    case DorisParser.REPEATABLE:
                    case DorisParser.REPLACE:
                    case DorisParser.REPLACE_IF_NOT_NULL:
                    case DorisParser.REPLAYER:
                    case DorisParser.REPOSITORIES:
                    case DorisParser.REPOSITORY:
                    case DorisParser.RESOURCE:
                    case DorisParser.RESOURCES:
                    case DorisParser.RESTORE:
                    case DorisParser.RESTRICTIVE:
                    case DorisParser.RESUME:
                    case DorisParser.RETURNS:
                    case DorisParser.REWRITTEN:
                    case DorisParser.RLIKE:
                    case DorisParser.ROLLBACK:
                    case DorisParser.ROLLUP:
                    case DorisParser.ROUTINE:
                    case DorisParser.S3:
                    case DorisParser.SAMPLE:
                    case DorisParser.SCHEDULE:
                    case DorisParser.SCHEDULER:
                    case DorisParser.SCHEMA:
                    case DorisParser.SECOND:
                    case DorisParser.SEQUENCE:
                    case DorisParser.SERIALIZABLE:
                    case DorisParser.SESSION:
                    case DorisParser.SESSION_USER:
                    case DorisParser.SET_SESSION_VARIABLE:
                    case DorisParser.SHAPE:
                    case DorisParser.SKEW:
                    case DorisParser.SNAPSHOT:
                    case DorisParser.SONAME:
                    case DorisParser.SPLIT:
                    case DorisParser.SQL:
                    case DorisParser.STAGE:
                    case DorisParser.STAGES:
                    case DorisParser.START:
                    case DorisParser.STARTS:
                    case DorisParser.STATS:
                    case DorisParser.STATUS:
                    case DorisParser.STOP:
                    case DorisParser.STORAGE:
                    case DorisParser.STREAM:
                    case DorisParser.STREAMING:
                    case DorisParser.STRING:
                    case DorisParser.STRUCT:
                    case DorisParser.SUBDATE:
                    case DorisParser.SUM:
                    case DorisParser.TABLES:
                    case DorisParser.TASK:
                    case DorisParser.TASKS:
                    case DorisParser.TEMPORARY:
                    case DorisParser.TEXT:
                    case DorisParser.THAN:
                    case DorisParser.TIME:
                    case DorisParser.TIMESTAMP:
                    case DorisParser.TIMESTAMPADD:
                    case DorisParser.TIMESTAMPDIFF:
                    case DorisParser.TRANSACTION:
                    case DorisParser.TREE:
                    case DorisParser.TRIGGERS:
                    case DorisParser.TRUNCATE:
                    case DorisParser.TYPE:
                    case DorisParser.TYPES:
                    case DorisParser.UNCOMMITTED:
                    case DorisParser.UNLOCK:
                    case DorisParser.UNSET:
                    case DorisParser.UP:
                    case DorisParser.USER:
                    case DorisParser.VALUE:
                    case DorisParser.VARCHAR:
                    case DorisParser.VARIABLE:
                    case DorisParser.VARIABLES:
                    case DorisParser.VARIANT:
                    case DorisParser.VAULT:
                    case DorisParser.VAULTS:
                    case DorisParser.VERBOSE:
                    case DorisParser.VERSION:
                    case DorisParser.VIEW:
                    case DorisParser.VIEWS:
                    case DorisParser.WARM:
                    case DorisParser.WARNINGS:
                    case DorisParser.WEEK:
                    case DorisParser.WORK:
                    case DorisParser.YEAR:
                    case DorisParser.HINT_START:
                    case DorisParser.HINT_END:
                    case DorisParser.COMMENT_START:
                    case DorisParser.STRING_LITERAL:
                    case DorisParser.IDENTIFIER:
                    case DorisParser.BACKQUOTED_IDENTIFIER:
                        {
                        this.state = 3352;
                        this.userIdentify();
                        }
                        break;
                    case DorisParser.ROLE:
                        {
                        this.state = 3353;
                        this.match(DorisParser.ROLE);
                        this.state = 3354;
                        (localContext as DropRowPolicyContext)._roleName = this.identifier();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                }
                break;
            case 10:
                localContext = new DropStoragePolicyContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3359;
                this.match(DorisParser.DROP);
                this.state = 3360;
                this.match(DorisParser.STORAGE);
                this.state = 3361;
                this.match(DorisParser.POLICY);
                this.state = 3364;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3362;
                    this.match(DorisParser.IF);
                    this.state = 3363;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3366;
                (localContext as DropStoragePolicyContext)._name = this.identifier();
                }
                break;
            case 11:
                localContext = new DropStageContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3367;
                this.match(DorisParser.DROP);
                this.state = 3368;
                this.match(DorisParser.STAGE);
                this.state = 3371;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3369;
                    this.match(DorisParser.IF);
                    this.state = 3370;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3373;
                (localContext as DropStageContext)._name = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedStatsStatement(): UnsupportedStatsStatementContext {
        let localContext = new UnsupportedStatsStatementContext(this.context, this.state);
        this.enterRule(localContext, 108, DorisParser.RULE_unsupportedStatsStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3530;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 482, this.context) ) {
            case 1:
                localContext = new AnalyzeTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3376;
                this.match(DorisParser.ANALYZE);
                this.state = 3377;
                this.match(DorisParser.TABLE);
                this.state = 3378;
                (localContext as AnalyzeTableContext)._name = this.multipartIdentifier();
                this.state = 3380;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 3379;
                    this.partitionSpec();
                    }
                }

                this.state = 3383;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 461, this.context) ) {
                case 1:
                    {
                    this.state = 3382;
                    (localContext as AnalyzeTableContext)._columns = this.identifierList();
                    }
                    break;
                }
                this.state = 3389;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 462, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3385;
                        this.match(DorisParser.WITH);
                        this.state = 3386;
                        this.analyzeProperties();
                        }
                        }
                    }
                    this.state = 3391;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 462, this.context);
                }
                this.state = 3393;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3392;
                    this.propertyClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new AnalyzeDatabaseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3395;
                this.match(DorisParser.ANALYZE);
                this.state = 3396;
                this.match(DorisParser.DATABASE);
                this.state = 3397;
                (localContext as AnalyzeDatabaseContext)._name = this.multipartIdentifier();
                this.state = 3402;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 464, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3398;
                        this.match(DorisParser.WITH);
                        this.state = 3399;
                        this.analyzeProperties();
                        }
                        }
                    }
                    this.state = 3404;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 464, this.context);
                }
                this.state = 3406;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3405;
                    this.propertyClause();
                    }
                }

                }
                break;
            case 3:
                localContext = new AlterTableStatsContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3408;
                this.match(DorisParser.ALTER);
                this.state = 3409;
                this.match(DorisParser.TABLE);
                this.state = 3410;
                (localContext as AlterTableStatsContext)._name = this.multipartIdentifier();
                this.state = 3411;
                this.match(DorisParser.SET);
                this.state = 3412;
                this.match(DorisParser.STATS);
                this.state = 3413;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 3414;
                this.propertyItemList();
                this.state = 3415;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 3417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 3416;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 4:
                localContext = new AlterColumnStatsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3419;
                this.match(DorisParser.ALTER);
                this.state = 3420;
                this.match(DorisParser.TABLE);
                this.state = 3421;
                (localContext as AlterColumnStatsContext)._name = this.multipartIdentifier();
                this.state = 3424;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 230) {
                    {
                    this.state = 3422;
                    this.match(DorisParser.INDEX);
                    this.state = 3423;
                    (localContext as AlterColumnStatsContext)._indexName = this.identifier();
                    }
                }

                this.state = 3426;
                this.match(DorisParser.MODIFY);
                this.state = 3427;
                this.match(DorisParser.COLUMN);
                this.state = 3428;
                (localContext as AlterColumnStatsContext)._columnName = this.identifier();
                this.state = 3429;
                this.match(DorisParser.SET);
                this.state = 3430;
                this.match(DorisParser.STATS);
                this.state = 3431;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 3432;
                this.propertyItemList();
                this.state = 3433;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 3435;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 3434;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 5:
                localContext = new DropStatsContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3437;
                this.match(DorisParser.DROP);
                this.state = 3438;
                this.match(DorisParser.STATS);
                this.state = 3439;
                (localContext as DropStatsContext)._tableName = this.multipartIdentifier();
                this.state = 3441;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 469, this.context) ) {
                case 1:
                    {
                    this.state = 3440;
                    (localContext as DropStatsContext)._columns = this.identifierList();
                    }
                    break;
                }
                this.state = 3444;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 3443;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 6:
                localContext = new DropCachedStatsContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3446;
                this.match(DorisParser.DROP);
                this.state = 3447;
                this.match(DorisParser.CACHED);
                this.state = 3448;
                this.match(DorisParser.STATS);
                this.state = 3449;
                (localContext as DropCachedStatsContext)._tableName = this.multipartIdentifier();
                }
                break;
            case 7:
                localContext = new DropExpiredStatsContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3450;
                this.match(DorisParser.DROP);
                this.state = 3451;
                this.match(DorisParser.EXPIRED);
                this.state = 3452;
                this.match(DorisParser.STATS);
                }
                break;
            case 8:
                localContext = new DropAanalyzeJobContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3453;
                this.match(DorisParser.DROP);
                this.state = 3454;
                this.match(DorisParser.ANALYZE);
                this.state = 3455;
                this.match(DorisParser.JOB);
                this.state = 3456;
                this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 9:
                localContext = new KillAnalyzeJobContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3457;
                this.match(DorisParser.KILL);
                this.state = 3458;
                this.match(DorisParser.ANALYZE);
                this.state = 3459;
                (localContext as KillAnalyzeJobContext)._jobId = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 10:
                localContext = new ShowTableStatsContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3460;
                this.match(DorisParser.SHOW);
                this.state = 3461;
                this.match(DorisParser.TABLE);
                this.state = 3462;
                this.match(DorisParser.STATS);
                this.state = 3463;
                (localContext as ShowTableStatsContext)._tableName = this.multipartIdentifier();
                this.state = 3465;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 3464;
                    this.partitionSpec();
                    }
                }

                this.state = 3468;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 472, this.context) ) {
                case 1:
                    {
                    this.state = 3467;
                    (localContext as ShowTableStatsContext)._columnList = this.identifierList();
                    }
                    break;
                }
                }
                break;
            case 11:
                localContext = new ShowTableStatsContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3470;
                this.match(DorisParser.SHOW);
                this.state = 3471;
                this.match(DorisParser.TABLE);
                this.state = 3472;
                this.match(DorisParser.STATS);
                this.state = 3473;
                (localContext as ShowTableStatsContext)._tableId = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 12:
                localContext = new ShowIndexStatsContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3474;
                this.match(DorisParser.SHOW);
                this.state = 3475;
                this.match(DorisParser.INDEX);
                this.state = 3476;
                this.match(DorisParser.STATS);
                this.state = 3477;
                (localContext as ShowIndexStatsContext)._tableName = this.multipartIdentifier();
                this.state = 3478;
                (localContext as ShowIndexStatsContext)._indexId = this.identifier();
                }
                break;
            case 13:
                localContext = new ShowColumnStatsContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3480;
                this.match(DorisParser.SHOW);
                this.state = 3481;
                this.match(DorisParser.COLUMN);
                this.state = 3483;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 3482;
                    this.match(DorisParser.CACHED);
                    }
                }

                this.state = 3485;
                this.match(DorisParser.STATS);
                this.state = 3486;
                (localContext as ShowColumnStatsContext)._tableName = this.multipartIdentifier();
                this.state = 3488;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 474, this.context) ) {
                case 1:
                    {
                    this.state = 3487;
                    (localContext as ShowColumnStatsContext)._columnList = this.identifierList();
                    }
                    break;
                }
                this.state = 3491;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 3490;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 14:
                localContext = new ShowColumnHistogramStatsContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3493;
                this.match(DorisParser.SHOW);
                this.state = 3494;
                this.match(DorisParser.COLUMN);
                this.state = 3495;
                this.match(DorisParser.HISTOGRAM);
                this.state = 3496;
                (localContext as ShowColumnHistogramStatsContext)._tableName = this.multipartIdentifier();
                this.state = 3497;
                (localContext as ShowColumnHistogramStatsContext)._columnList = this.identifierList();
                }
                break;
            case 15:
                localContext = new ShowAnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3499;
                this.match(DorisParser.SHOW);
                this.state = 3501;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34) {
                    {
                    this.state = 3500;
                    this.match(DorisParser.AUTO);
                    }
                }

                this.state = 3503;
                this.match(DorisParser.ANALYZE);
                this.state = 3505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 477, this.context) ) {
                case 1:
                    {
                    this.state = 3504;
                    (localContext as ShowAnalyzeContext)._tableName = this.multipartIdentifier();
                    }
                    break;
                }
                this.state = 3508;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 3507;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 16:
                localContext = new ShowAnalyzeFromJobIdContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3510;
                this.match(DorisParser.SHOW);
                this.state = 3511;
                this.match(DorisParser.ANALYZE);
                this.state = 3512;
                (localContext as ShowAnalyzeFromJobIdContext)._jobId = this.match(DorisParser.INTEGER_VALUE);
                this.state = 3514;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 3513;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 17:
                localContext = new ShowAutoAnalyzeJobsContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3516;
                this.match(DorisParser.SHOW);
                this.state = 3517;
                this.match(DorisParser.AUTO);
                this.state = 3518;
                this.match(DorisParser.JOBS);
                this.state = 3520;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 480, this.context) ) {
                case 1:
                    {
                    this.state = 3519;
                    (localContext as ShowAutoAnalyzeJobsContext)._tableName = this.multipartIdentifier();
                    }
                    break;
                }
                this.state = 3523;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267 || _la === 504) {
                    {
                    this.state = 3522;
                    this.wildWhere();
                    }
                }

                }
                break;
            case 18:
                localContext = new ShowAnalyzeTaskContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 3525;
                this.match(DorisParser.SHOW);
                this.state = 3526;
                this.match(DorisParser.ANALYZE);
                this.state = 3527;
                this.match(DorisParser.TASK);
                this.state = 3528;
                this.match(DorisParser.STATUS);
                this.state = 3529;
                (localContext as ShowAnalyzeTaskContext)._jobId = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzeProperties(): AnalyzePropertiesContext {
        let localContext = new AnalyzePropertiesContext(this.context, this.state);
        this.enterRule(localContext, 110, DorisParser.RULE_analyzeProperties);
        try {
            this.state = 3550;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.SYNC:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3532;
                this.match(DorisParser.SYNC);
                }
                break;
            case DorisParser.INCREMENTAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3533;
                this.match(DorisParser.INCREMENTAL);
                }
                break;
            case DorisParser.FULL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3534;
                this.match(DorisParser.FULL);
                }
                break;
            case DorisParser.SQL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3535;
                this.match(DorisParser.SQL);
                }
                break;
            case DorisParser.HISTOGRAM:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3536;
                this.match(DorisParser.HISTOGRAM);
                }
                break;
            case DorisParser.SAMPLE:
                this.enterOuterAlt(localContext, 6);
                {
                {
                this.state = 3537;
                this.match(DorisParser.SAMPLE);
                this.state = 3542;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.ROWS:
                    {
                    {
                    this.state = 3538;
                    this.match(DorisParser.ROWS);
                    this.state = 3539;
                    localContext._rows = this.match(DorisParser.INTEGER_VALUE);
                    }
                    }
                    break;
                case DorisParser.PERCENT:
                    {
                    {
                    this.state = 3540;
                    this.match(DorisParser.PERCENT);
                    this.state = 3541;
                    localContext._percent = this.match(DorisParser.INTEGER_VALUE);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                }
                break;
            case DorisParser.BUCKETS:
                this.enterOuterAlt(localContext, 7);
                {
                {
                this.state = 3544;
                this.match(DorisParser.BUCKETS);
                this.state = 3545;
                localContext._bucket = this.match(DorisParser.INTEGER_VALUE);
                }
                }
                break;
            case DorisParser.PERIOD:
                this.enterOuterAlt(localContext, 8);
                {
                {
                this.state = 3546;
                this.match(DorisParser.PERIOD);
                this.state = 3547;
                localContext._periodInSecond = this.match(DorisParser.INTEGER_VALUE);
                }
                }
                break;
            case DorisParser.CRON:
                this.enterOuterAlt(localContext, 9);
                {
                {
                this.state = 3548;
                this.match(DorisParser.CRON);
                this.state = 3549;
                localContext._crontabExpr = this.match(DorisParser.STRING_LITERAL);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedCreateStatement(): UnsupportedCreateStatementContext {
        let localContext = new UnsupportedCreateStatementContext(this.context, this.state);
        this.enterRule(localContext, 112, DorisParser.RULE_unsupportedCreateStatement);
        let _la: number;
        try {
            this.state = 3826;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 531, this.context) ) {
            case 1:
                localContext = new CreateDatabaseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3552;
                this.match(DorisParser.CREATE);
                this.state = 3553;
                _la = this.tokenStream.LA(1);
                if(!(_la === 113 || _la === 407)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3557;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3554;
                    this.match(DorisParser.IF);
                    this.state = 3555;
                    this.match(DorisParser.NOT);
                    this.state = 3556;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3559;
                (localContext as CreateDatabaseContext)._name = this.multipartIdentifier();
                this.state = 3561;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3560;
                    (localContext as CreateDatabaseContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new CreateCatalogContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3563;
                this.match(DorisParser.CREATE);
                this.state = 3564;
                this.match(DorisParser.CATALOG);
                this.state = 3568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3565;
                    this.match(DorisParser.IF);
                    this.state = 3566;
                    this.match(DorisParser.NOT);
                    this.state = 3567;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3570;
                (localContext as CreateCatalogContext)._catalogName = this.identifier();
                this.state = 3574;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 488, this.context) ) {
                case 1:
                    {
                    this.state = 3571;
                    this.match(DorisParser.WITH);
                    this.state = 3572;
                    this.match(DorisParser.RESOURCE);
                    this.state = 3573;
                    (localContext as CreateCatalogContext)._resourceName = this.identifier();
                    }
                    break;
                }
                this.state = 3578;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 3576;
                    this.match(DorisParser.COMMENT);
                    this.state = 3577;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                }

                this.state = 3581;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3580;
                    (localContext as CreateCatalogContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 3:
                localContext = new CreateUserDefineFunctionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3583;
                this.match(DorisParser.CREATE);
                this.state = 3585;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206 || _la === 273 || _la === 414) {
                    {
                    this.state = 3584;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 206 || _la === 273 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3588;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 19 || _la === 448) {
                    {
                    this.state = 3587;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 19 || _la === 448)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3590;
                this.match(DorisParser.FUNCTION);
                this.state = 3594;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 493, this.context) ) {
                case 1:
                    {
                    this.state = 3591;
                    this.match(DorisParser.IF);
                    this.state = 3592;
                    this.match(DorisParser.NOT);
                    this.state = 3593;
                    this.match(DorisParser.EXISTS);
                    }
                    break;
                }
                this.state = 3596;
                this.functionIdentifier();
                this.state = 3597;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 3599;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 270794816) !== 0) || ((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & 268437537) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & 466689) !== 0) || _la === 152 || _la === 190 || _la === 218 || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & 8782211) !== 0) || _la === 281 || _la === 360 || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & 196609) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 137) !== 0) || _la === 490 || _la === 493) {
                    {
                    this.state = 3598;
                    this.functionArguments();
                    }
                }

                this.state = 3601;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 3602;
                this.match(DorisParser.RETURNS);
                this.state = 3603;
                (localContext as CreateUserDefineFunctionContext)._returnType = this.dataType();
                this.state = 3606;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 238) {
                    {
                    this.state = 3604;
                    this.match(DorisParser.INTERMEDIATE);
                    this.state = 3605;
                    (localContext as CreateUserDefineFunctionContext)._intermediateType = this.dataType();
                    }
                }

                this.state = 3609;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3608;
                    (localContext as CreateUserDefineFunctionContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 4:
                localContext = new CreateAliasFunctionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3611;
                this.match(DorisParser.CREATE);
                this.state = 3613;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206 || _la === 273 || _la === 414) {
                    {
                    this.state = 3612;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 206 || _la === 273 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3615;
                this.match(DorisParser.ALIAS);
                this.state = 3616;
                this.match(DorisParser.FUNCTION);
                this.state = 3620;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 498, this.context) ) {
                case 1:
                    {
                    this.state = 3617;
                    this.match(DorisParser.IF);
                    this.state = 3618;
                    this.match(DorisParser.NOT);
                    this.state = 3619;
                    this.match(DorisParser.EXISTS);
                    }
                    break;
                }
                this.state = 3622;
                this.functionIdentifier();
                this.state = 3623;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 3625;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 270794816) !== 0) || ((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & 268437537) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & 466689) !== 0) || _la === 152 || _la === 190 || _la === 218 || ((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & 8782211) !== 0) || _la === 281 || _la === 360 || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & 196609) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 137) !== 0) || _la === 490 || _la === 493) {
                    {
                    this.state = 3624;
                    this.functionArguments();
                    }
                }

                this.state = 3627;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 3628;
                this.match(DorisParser.WITH);
                this.state = 3629;
                this.match(DorisParser.PARAMETER);
                this.state = 3630;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 3632;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824092160) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758068699) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343345) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294572255) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 531142527) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 3753617235) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2743001093) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915099) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124386295) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908763643) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277172351) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984149) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259707003) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 8945661) !== 0) || ((((_la - 533)) & ~0x1F) === 0 && ((1 << (_la - 533)) & 49159) !== 0)) {
                    {
                    this.state = 3631;
                    (localContext as CreateAliasFunctionContext)._parameters = this.identifierSeq();
                    }
                }

                this.state = 3634;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 3635;
                this.match(DorisParser.AS);
                this.state = 3636;
                this.expression();
                }
                break;
            case 5:
                localContext = new CreateUserContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3638;
                this.match(DorisParser.CREATE);
                this.state = 3639;
                this.match(DorisParser.USER);
                this.state = 3643;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3640;
                    this.match(DorisParser.IF);
                    this.state = 3641;
                    this.match(DorisParser.NOT);
                    this.state = 3642;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3645;
                this.grantUserIdentify();
                this.state = 3650;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.SUPERUSER:
                    {
                    this.state = 3646;
                    this.match(DorisParser.SUPERUSER);
                    }
                    break;
                case DorisParser.DEFAULT:
                    {
                    this.state = 3647;
                    this.match(DorisParser.DEFAULT);
                    this.state = 3648;
                    this.match(DorisParser.ROLE);
                    this.state = 3649;
                    (localContext as CreateUserContext)._role = this.match(DorisParser.STRING_LITERAL);
                    }
                    break;
                case DorisParser.EOF:
                case DorisParser.SEMICOLON:
                case DorisParser.LEFT_PAREN:
                case DorisParser.ACCOUNT_LOCK:
                case DorisParser.ACCOUNT_UNLOCK:
                case DorisParser.ADMIN:
                case DorisParser.ALTER:
                case DorisParser.ANALYZE:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BUILD:
                case DorisParser.CALL:
                case DorisParser.CANCEL:
                case DorisParser.CLEAN:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COPY:
                case DorisParser.CREATE:
                case DorisParser.DELETE:
                case DorisParser.DESC:
                case DorisParser.DESCRIBE:
                case DorisParser.DROP:
                case DorisParser.EXPLAIN:
                case DorisParser.EXPORT:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.GRANT:
                case DorisParser.HELP:
                case DorisParser.INSERT:
                case DorisParser.INSTALL:
                case DorisParser.KILL:
                case DorisParser.LOAD:
                case DorisParser.LOCK:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PAUSE:
                case DorisParser.PLAN:
                case DorisParser.RECOVER:
                case DorisParser.REFRESH:
                case DorisParser.REPLACE:
                case DorisParser.RESTORE:
                case DorisParser.RESUME:
                case DorisParser.REVOKE:
                case DorisParser.ROLLBACK:
                case DorisParser.SELECT:
                case DorisParser.SET:
                case DorisParser.SHOW:
                case DorisParser.START:
                case DorisParser.STOP:
                case DorisParser.SWITCH:
                case DorisParser.SYNC:
                case DorisParser.TRUNCATE:
                case DorisParser.UNINSTALL:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UPDATE:
                case DorisParser.USE:
                case DorisParser.VALUES:
                case DorisParser.WARM:
                case DorisParser.WITH:
                    break;
                default:
                    break;
                }
                this.state = 3652;
                this.passwordOption();
                this.state = 3655;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 3653;
                    this.match(DorisParser.COMMENT);
                    this.state = 3654;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                }

                }
                break;
            case 6:
                localContext = new CreateRepositoryContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3657;
                this.match(DorisParser.CREATE);
                this.state = 3660;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 367) {
                    {
                    this.state = 3658;
                    this.match(DorisParser.READ);
                    this.state = 3659;
                    this.match(DorisParser.ONLY);
                    }
                }

                this.state = 3662;
                this.match(DorisParser.REPOSITORY);
                this.state = 3663;
                (localContext as CreateRepositoryContext)._name = this.identifier();
                this.state = 3664;
                this.match(DorisParser.WITH);
                this.state = 3665;
                this.storageBackend();
                }
                break;
            case 7:
                localContext = new CreateRoleContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3667;
                this.match(DorisParser.CREATE);
                this.state = 3668;
                this.match(DorisParser.ROLE);
                this.state = 3672;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3669;
                    this.match(DorisParser.IF);
                    this.state = 3670;
                    this.match(DorisParser.NOT);
                    this.state = 3671;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3674;
                (localContext as CreateRoleContext)._name = this.identifier();
                this.state = 3677;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 3675;
                    this.match(DorisParser.COMMENT);
                    this.state = 3676;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                }

                }
                break;
            case 8:
                localContext = new CreateFileContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3679;
                this.match(DorisParser.CREATE);
                this.state = 3680;
                this.match(DorisParser.FILE);
                this.state = 3681;
                (localContext as CreateFileContext)._name = this.match(DorisParser.STRING_LITERAL);
                this.state = 3684;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198 || _la === 228) {
                    {
                    this.state = 3682;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 198 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3683;
                    (localContext as CreateFileContext)._database = this.identifier();
                    }
                }

                this.state = 3686;
                (localContext as CreateFileContext)._properties = this.propertyClause();
                }
                break;
            case 9:
                localContext = new CreateIndexContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3687;
                this.match(DorisParser.CREATE);
                this.state = 3688;
                this.match(DorisParser.INDEX);
                this.state = 3692;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3689;
                    this.match(DorisParser.IF);
                    this.state = 3690;
                    this.match(DorisParser.NOT);
                    this.state = 3691;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3694;
                (localContext as CreateIndexContext)._name = this.identifier();
                this.state = 3695;
                this.match(DorisParser.ON);
                this.state = 3696;
                (localContext as CreateIndexContext)._tableName = this.multipartIdentifier();
                this.state = 3697;
                this.identifierList();
                this.state = 3700;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 487) {
                    {
                    this.state = 3698;
                    this.match(DorisParser.USING);
                    this.state = 3699;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 48 || _la === 242 || _la === 308)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3703;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3702;
                    (localContext as CreateIndexContext)._properties = this.propertyClause();
                    }
                }

                this.state = 3707;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 3705;
                    this.match(DorisParser.COMMENT);
                    this.state = 3706;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                }

                }
                break;
            case 10:
                localContext = new CreateResourceContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3709;
                this.match(DorisParser.CREATE);
                this.state = 3711;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 180) {
                    {
                    this.state = 3710;
                    this.match(DorisParser.EXTERNAL);
                    }
                }

                this.state = 3713;
                this.match(DorisParser.RESOURCE);
                this.state = 3717;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3714;
                    this.match(DorisParser.IF);
                    this.state = 3715;
                    this.match(DorisParser.NOT);
                    this.state = 3716;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3719;
                (localContext as CreateResourceContext)._name = this.identifierOrText();
                this.state = 3721;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3720;
                    (localContext as CreateResourceContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 11:
                localContext = new CreateStorageVaultContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3723;
                this.match(DorisParser.CREATE);
                this.state = 3724;
                this.match(DorisParser.STORAGE);
                this.state = 3725;
                this.match(DorisParser.VAULT);
                this.state = 3729;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3726;
                    this.match(DorisParser.IF);
                    this.state = 3727;
                    this.match(DorisParser.NOT);
                    this.state = 3728;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3731;
                (localContext as CreateStorageVaultContext)._name = this.identifierOrText();
                this.state = 3733;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3732;
                    (localContext as CreateStorageVaultContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 12:
                localContext = new CreateWorkloadGroupContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3735;
                this.match(DorisParser.CREATE);
                this.state = 3736;
                this.match(DorisParser.WORKLOAD);
                this.state = 3737;
                this.match(DorisParser.GROUP);
                this.state = 3741;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3738;
                    this.match(DorisParser.IF);
                    this.state = 3739;
                    this.match(DorisParser.NOT);
                    this.state = 3740;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3743;
                (localContext as CreateWorkloadGroupContext)._name = this.identifierOrText();
                this.state = 3745;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3744;
                    (localContext as CreateWorkloadGroupContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 13:
                localContext = new CreateWorkloadPolicyContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3747;
                this.match(DorisParser.CREATE);
                this.state = 3748;
                this.match(DorisParser.WORKLOAD);
                this.state = 3749;
                this.match(DorisParser.POLICY);
                this.state = 3753;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3750;
                    this.match(DorisParser.IF);
                    this.state = 3751;
                    this.match(DorisParser.NOT);
                    this.state = 3752;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3755;
                (localContext as CreateWorkloadPolicyContext)._name = this.identifierOrText();
                this.state = 3761;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 90) {
                    {
                    this.state = 3756;
                    this.match(DorisParser.CONDITIONS);
                    this.state = 3757;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 3758;
                    this.workloadPolicyConditions();
                    this.state = 3759;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                this.state = 3768;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 13) {
                    {
                    this.state = 3763;
                    this.match(DorisParser.ACTIONS);
                    this.state = 3764;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 3765;
                    this.workloadPolicyActions();
                    this.state = 3766;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                }

                this.state = 3771;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3770;
                    (localContext as CreateWorkloadPolicyContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 14:
                localContext = new CreateEncryptkeyContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3773;
                this.match(DorisParser.CREATE);
                this.state = 3774;
                this.match(DorisParser.ENCRYPTKEY);
                this.state = 3778;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3775;
                    this.match(DorisParser.IF);
                    this.state = 3776;
                    this.match(DorisParser.NOT);
                    this.state = 3777;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3780;
                this.multipartIdentifier();
                this.state = 3781;
                this.match(DorisParser.AS);
                this.state = 3782;
                this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 15:
                localContext = new CreateSqlBlockRuleContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3784;
                this.match(DorisParser.CREATE);
                this.state = 3785;
                this.match(DorisParser.SQL_BLOCK_RULE);
                this.state = 3789;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3786;
                    this.match(DorisParser.IF);
                    this.state = 3787;
                    this.match(DorisParser.NOT);
                    this.state = 3788;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3791;
                (localContext as CreateSqlBlockRuleContext)._name = this.identifier();
                this.state = 3793;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3792;
                    (localContext as CreateSqlBlockRuleContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 16:
                localContext = new CreateStoragePolicyContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3795;
                this.match(DorisParser.CREATE);
                this.state = 3796;
                this.match(DorisParser.STORAGE);
                this.state = 3797;
                this.match(DorisParser.POLICY);
                this.state = 3801;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3798;
                    this.match(DorisParser.IF);
                    this.state = 3799;
                    this.match(DorisParser.NOT);
                    this.state = 3800;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3803;
                (localContext as CreateStoragePolicyContext)._name = this.identifier();
                this.state = 3805;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3804;
                    (localContext as CreateStoragePolicyContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            case 17:
                localContext = new BuildIndexContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3807;
                this.match(DorisParser.BUILD);
                this.state = 3808;
                this.match(DorisParser.INDEX);
                this.state = 3809;
                (localContext as BuildIndexContext)._name = this.identifier();
                this.state = 3810;
                this.match(DorisParser.ON);
                this.state = 3811;
                (localContext as BuildIndexContext)._tableName = this.multipartIdentifier();
                this.state = 3813;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 3812;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 18:
                localContext = new CreateStageContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 3815;
                this.match(DorisParser.CREATE);
                this.state = 3816;
                this.match(DorisParser.STAGE);
                this.state = 3820;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3817;
                    this.match(DorisParser.IF);
                    this.state = 3818;
                    this.match(DorisParser.NOT);
                    this.state = 3819;
                    this.match(DorisParser.EXISTS);
                    }
                }

                this.state = 3822;
                (localContext as CreateStageContext)._name = this.identifier();
                this.state = 3824;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 3823;
                    (localContext as CreateStageContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public workloadPolicyActions(): WorkloadPolicyActionsContext {
        let localContext = new WorkloadPolicyActionsContext(this.context, this.state);
        this.enterRule(localContext, 114, DorisParser.RULE_workloadPolicyActions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3828;
            this.workloadPolicyAction();
            this.state = 3833;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3829;
                this.match(DorisParser.COMMA);
                this.state = 3830;
                this.workloadPolicyAction();
                }
                }
                this.state = 3835;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public workloadPolicyAction(): WorkloadPolicyActionContext {
        let localContext = new WorkloadPolicyActionContext(this.context, this.state);
        this.enterRule(localContext, 116, DorisParser.RULE_workloadPolicyAction);
        let _la: number;
        try {
            this.state = 3842;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 534, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3836;
                this.match(DorisParser.SET_SESSION_VARIABLE);
                this.state = 3837;
                this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3838;
                this.identifier();
                this.state = 3840;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 538) {
                    {
                    this.state = 3839;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public workloadPolicyConditions(): WorkloadPolicyConditionsContext {
        let localContext = new WorkloadPolicyConditionsContext(this.context, this.state);
        this.enterRule(localContext, 118, DorisParser.RULE_workloadPolicyConditions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3844;
            this.workloadPolicyCondition();
            this.state = 3849;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3845;
                this.match(DorisParser.COMMA);
                this.state = 3846;
                this.workloadPolicyCondition();
                }
                }
                this.state = 3851;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public workloadPolicyCondition(): WorkloadPolicyConditionContext {
        let localContext = new WorkloadPolicyConditionContext(this.context, this.state);
        this.enterRule(localContext, 120, DorisParser.RULE_workloadPolicyCondition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3852;
            localContext._metricName = this.identifier();
            this.state = 3853;
            this.comparisonOperator();
            this.state = 3856;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.SUBTRACT:
            case DorisParser.INTEGER_VALUE:
            case DorisParser.EXPONENT_VALUE:
            case DorisParser.DECIMAL_VALUE:
                {
                this.state = 3854;
                this.number_();
                }
                break;
            case DorisParser.STRING_LITERAL:
                {
                this.state = 3855;
                this.match(DorisParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storageBackend(): StorageBackendContext {
        let localContext = new StorageBackendContext(this.context, this.state);
        this.enterRule(localContext, 122, DorisParser.RULE_storageBackend);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3858;
            _la = this.tokenStream.LA(1);
            if(!(_la === 56 || _la === 215 || _la === 273 || _la === 403)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3860;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824092160) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758068699) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343345) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294572255) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 531142527) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 3753617235) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2743001093) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915099) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124386295) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908763643) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277172351) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984149) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259707003) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 8945661) !== 0) || ((((_la - 533)) & ~0x1F) === 0 && ((1 << (_la - 533)) & 49159) !== 0)) {
                {
                this.state = 3859;
                localContext._brokerName = this.identifier();
                }
            }

            this.state = 3862;
            this.match(DorisParser.ON);
            this.state = 3863;
            this.match(DorisParser.LOCATION);
            this.state = 3864;
            this.match(DorisParser.STRING_LITERAL);
            this.state = 3866;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 358) {
                {
                this.state = 3865;
                localContext._properties = this.propertyClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public passwordOption(): PasswordOptionContext {
        let localContext = new PasswordOptionContext(this.context, this.state);
        this.enterRule(localContext, 124, DorisParser.RULE_passwordOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3873;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 333) {
                {
                this.state = 3868;
                this.match(DorisParser.PASSWORD_HISTORY);
                this.state = 3871;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.DEFAULT:
                    {
                    this.state = 3869;
                    localContext._historyDefault = this.match(DorisParser.DEFAULT);
                    }
                    break;
                case DorisParser.INTEGER_VALUE:
                    {
                    this.state = 3870;
                    localContext._historyValue = this.match(DorisParser.INTEGER_VALUE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            this.state = 3883;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 332) {
                {
                this.state = 3875;
                this.match(DorisParser.PASSWORD_EXPIRE);
                this.state = 3881;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.DEFAULT:
                    {
                    this.state = 3876;
                    localContext._expireDefault = this.match(DorisParser.DEFAULT);
                    }
                    break;
                case DorisParser.NEVER:
                    {
                    this.state = 3877;
                    localContext._expireNever = this.match(DorisParser.NEVER);
                    }
                    break;
                case DorisParser.INTERVAL:
                    {
                    this.state = 3878;
                    this.match(DorisParser.INTERVAL);
                    this.state = 3879;
                    localContext._expireValue = this.match(DorisParser.INTEGER_VALUE);
                    this.state = 3880;
                    localContext._expireTimeUnit = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 128 || _la === 222 || _la === 409)) {
                        localContext._expireTimeUnit = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            this.state = 3892;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 335) {
                {
                this.state = 3885;
                this.match(DorisParser.PASSWORD_REUSE);
                this.state = 3886;
                this.match(DorisParser.INTERVAL);
                this.state = 3890;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.DEFAULT:
                    {
                    this.state = 3887;
                    localContext._reuseDefault = this.match(DorisParser.DEFAULT);
                    }
                    break;
                case DorisParser.INTEGER_VALUE:
                    {
                    this.state = 3888;
                    localContext._reuseValue = this.match(DorisParser.INTEGER_VALUE);
                    this.state = 3889;
                    this.match(DorisParser.DAY);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            this.state = 3896;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 182) {
                {
                this.state = 3894;
                this.match(DorisParser.FAILED_LOGIN_ATTEMPTS);
                this.state = 3895;
                localContext._attemptsValue = this.match(DorisParser.INTEGER_VALUE);
                }
            }

            this.state = 3904;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 334) {
                {
                this.state = 3898;
                this.match(DorisParser.PASSWORD_LOCK_TIME);
                this.state = 3902;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.UNBOUNDED:
                    {
                    this.state = 3899;
                    localContext._lockUnbounded = this.match(DorisParser.UNBOUNDED);
                    }
                    break;
                case DorisParser.INTEGER_VALUE:
                    {
                    this.state = 3900;
                    localContext._lockValue = this.match(DorisParser.INTEGER_VALUE);
                    this.state = 3901;
                    localContext._lockTimeUint = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 128 || _la === 222 || _la === 409)) {
                        localContext._lockTimeUint = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            this.state = 3907;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 11 || _la === 12) {
                {
                this.state = 3906;
                _la = this.tokenStream.LA(1);
                if(!(_la === 11 || _la === 12)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArguments(): FunctionArgumentsContext {
        let localContext = new FunctionArgumentsContext(this.context, this.state);
        this.enterRule(localContext, 126, DorisParser.RULE_functionArguments);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3909;
            this.functionArgument();
            this.state = 3914;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3910;
                this.match(DorisParser.COMMA);
                this.state = 3911;
                this.functionArgument();
                }
                }
                this.state = 3916;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArgument(): FunctionArgumentContext {
        let localContext = new FunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 128, DorisParser.RULE_functionArgument);
        try {
            this.state = 3919;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.DOTDOTDOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3917;
                this.match(DorisParser.DOTDOTDOT);
                }
                break;
            case DorisParser.AGG_STATE:
            case DorisParser.ALL:
            case DorisParser.ARRAY:
            case DorisParser.BIGINT:
            case DorisParser.BITMAP:
            case DorisParser.BOOLEAN:
            case DorisParser.CHAR:
            case DorisParser.DATE:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DOUBLE:
            case DorisParser.FLOAT:
            case DorisParser.HLL:
            case DorisParser.INT:
            case DorisParser.INTEGER:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LARGEINT:
            case DorisParser.MAP:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.SMALLINT:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.TEXT:
            case DorisParser.TIME:
            case DorisParser.TINYINT:
            case DorisParser.VARCHAR:
            case DorisParser.VARIANT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3918;
                this.dataType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedSetStatement(): SupportedSetStatementContext {
        let localContext = new SupportedSetStatementContext(this.context, this.state);
        this.enterRule(localContext, 130, DorisParser.RULE_supportedSetStatement);
        let _la: number;
        try {
            this.state = 3967;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 557, this.context) ) {
            case 1:
                localContext = new SetOptionsContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3921;
                this.match(DorisParser.SET);
                this.state = 3924;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 551, this.context) ) {
                case 1:
                    {
                    this.state = 3922;
                    this.optionWithType();
                    }
                    break;
                case 2:
                    {
                    this.state = 3923;
                    this.optionWithoutType();
                    }
                    break;
                }
                this.state = 3933;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3926;
                    this.match(DorisParser.COMMA);
                    this.state = 3929;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 552, this.context) ) {
                    case 1:
                        {
                        this.state = 3927;
                        this.optionWithType();
                        }
                        break;
                    case 2:
                        {
                        this.state = 3928;
                        this.optionWithoutType();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 3935;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new SetDefaultStorageVaultContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3936;
                this.match(DorisParser.SET);
                this.state = 3937;
                this.identifier();
                this.state = 3938;
                this.match(DorisParser.AS);
                this.state = 3939;
                this.match(DorisParser.DEFAULT);
                this.state = 3940;
                this.match(DorisParser.STORAGE);
                this.state = 3941;
                this.match(DorisParser.VAULT);
                }
                break;
            case 3:
                localContext = new SetUserPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3943;
                this.match(DorisParser.SET);
                this.state = 3944;
                this.match(DorisParser.PROPERTY);
                this.state = 3947;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 3945;
                    this.match(DorisParser.FOR);
                    this.state = 3946;
                    (localContext as SetUserPropertiesContext)._user = this.identifierOrText();
                    }
                }

                this.state = 3949;
                this.propertyItemList();
                }
                break;
            case 4:
                localContext = new SetTransactionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3950;
                this.match(DorisParser.SET);
                this.state = 3952;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206 || _la === 273 || _la === 414) {
                    {
                    this.state = 3951;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 206 || _la === 273 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3954;
                this.match(DorisParser.TRANSACTION);
                this.state = 3965;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 556, this.context) ) {
                case 1:
                    {
                    this.state = 3955;
                    this.transactionAccessMode();
                    }
                    break;
                case 2:
                    {
                    this.state = 3956;
                    this.isolationLevel();
                    }
                    break;
                case 3:
                    {
                    this.state = 3957;
                    this.transactionAccessMode();
                    this.state = 3958;
                    this.match(DorisParser.COMMA);
                    this.state = 3959;
                    this.isolationLevel();
                    }
                    break;
                case 4:
                    {
                    this.state = 3961;
                    this.isolationLevel();
                    this.state = 3962;
                    this.match(DorisParser.COMMA);
                    this.state = 3963;
                    this.transactionAccessMode();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optionWithType(): OptionWithTypeContext {
        let localContext = new OptionWithTypeContext(this.context, this.state);
        this.enterRule(localContext, 132, DorisParser.RULE_optionWithType);
        let _la: number;
        try {
            localContext = new SetVariableWithTypeContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3969;
            _la = this.tokenStream.LA(1);
            if(!(_la === 206 || _la === 273 || _la === 414)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3970;
            this.identifier();
            this.state = 3971;
            this.match(DorisParser.EQ);
            this.state = 3974;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_PAREN:
            case DorisParser.LEFT_BRACKET:
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADD:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BINARY:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CASE:
            case DorisParser.CAST:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATABASE:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXISTS:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.EXTRACT:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FALSE:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IF:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INTERVAL:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.KEY:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LEFT:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LIKE:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NOT:
            case DorisParser.NULL:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLACEHOLDER:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REGEXP:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RIGHT:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRIM:
            case DorisParser.TRUE:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.PLUS:
            case DorisParser.SUBTRACT:
            case DorisParser.ASTERISK:
            case DorisParser.TILDE:
            case DorisParser.LOGICALNOT:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.ATSIGN:
            case DorisParser.DOUBLEATSIGN:
            case DorisParser.STRING_LITERAL:
            case DorisParser.INTEGER_VALUE:
            case DorisParser.EXPONENT_VALUE:
            case DorisParser.DECIMAL_VALUE:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                {
                this.state = 3972;
                this.expression();
                }
                break;
            case DorisParser.DEFAULT:
                {
                this.state = 3973;
                this.match(DorisParser.DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optionWithoutType(): OptionWithoutTypeContext {
        let localContext = new OptionWithoutTypeContext(this.context, this.state);
        this.enterRule(localContext, 134, DorisParser.RULE_optionWithoutType);
        let _la: number;
        try {
            this.state = 4021;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 566, this.context) ) {
            case 1:
                localContext = new SetNamesContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3976;
                this.match(DorisParser.NAMES);
                this.state = 3977;
                this.match(DorisParser.EQ);
                this.state = 3978;
                this.expression();
                }
                break;
            case 2:
                localContext = new SetCharsetContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3982;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.CHAR:
                    {
                    this.state = 3979;
                    this.match(DorisParser.CHAR);
                    this.state = 3980;
                    this.match(DorisParser.SET);
                    }
                    break;
                case DorisParser.CHARSET:
                    {
                    this.state = 3981;
                    this.match(DorisParser.CHARSET);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3986;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.STRING_LITERAL:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 3984;
                    (localContext as SetCharsetContext)._charsetName = this.identifierOrText();
                    }
                    break;
                case DorisParser.DEFAULT:
                    {
                    this.state = 3985;
                    this.match(DorisParser.DEFAULT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                localContext = new SetCollateContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3988;
                this.match(DorisParser.NAMES);
                this.state = 3991;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.STRING_LITERAL:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 3989;
                    (localContext as SetCollateContext)._charsetName = this.identifierOrText();
                    }
                    break;
                case DorisParser.DEFAULT:
                    {
                    this.state = 3990;
                    this.match(DorisParser.DEFAULT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3996;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.COLLATE:
                    {
                    this.state = 3993;
                    this.match(DorisParser.COLLATE);
                    this.state = 3994;
                    (localContext as SetCollateContext)._collateName = this.identifierOrText();
                    }
                    break;
                case DorisParser.DEFAULT:
                    {
                    this.state = 3995;
                    this.match(DorisParser.DEFAULT);
                    }
                    break;
                case DorisParser.EOF:
                case DorisParser.SEMICOLON:
                case DorisParser.LEFT_PAREN:
                case DorisParser.COMMA:
                case DorisParser.ADMIN:
                case DorisParser.ALTER:
                case DorisParser.ANALYZE:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BUILD:
                case DorisParser.CALL:
                case DorisParser.CANCEL:
                case DorisParser.CLEAN:
                case DorisParser.COMMIT:
                case DorisParser.COPY:
                case DorisParser.CREATE:
                case DorisParser.DELETE:
                case DorisParser.DESC:
                case DorisParser.DESCRIBE:
                case DorisParser.DROP:
                case DorisParser.EXPLAIN:
                case DorisParser.EXPORT:
                case DorisParser.GRANT:
                case DorisParser.HELP:
                case DorisParser.INSERT:
                case DorisParser.INSTALL:
                case DorisParser.KILL:
                case DorisParser.LOAD:
                case DorisParser.LOCK:
                case DorisParser.PAUSE:
                case DorisParser.PLAN:
                case DorisParser.RECOVER:
                case DorisParser.REFRESH:
                case DorisParser.REPLACE:
                case DorisParser.RESTORE:
                case DorisParser.RESUME:
                case DorisParser.REVOKE:
                case DorisParser.ROLLBACK:
                case DorisParser.SELECT:
                case DorisParser.SET:
                case DorisParser.SHOW:
                case DorisParser.START:
                case DorisParser.STOP:
                case DorisParser.SWITCH:
                case DorisParser.SYNC:
                case DorisParser.TRUNCATE:
                case DorisParser.UNINSTALL:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UPDATE:
                case DorisParser.USE:
                case DorisParser.VALUES:
                case DorisParser.WARM:
                case DorisParser.WITH:
                    break;
                default:
                    break;
                }
                }
                break;
            case 4:
                localContext = new SetPasswordContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3998;
                this.match(DorisParser.PASSWORD);
                this.state = 4001;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 3999;
                    this.match(DorisParser.FOR);
                    this.state = 4000;
                    this.userIdentify();
                    }
                }

                this.state = 4003;
                this.match(DorisParser.EQ);
                this.state = 4009;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.STRING_LITERAL:
                    {
                    this.state = 4004;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                    break;
                case DorisParser.PASSWORD:
                    {
                    {
                    this.state = 4005;
                    (localContext as SetPasswordContext)._isPlain = this.match(DorisParser.PASSWORD);
                    this.state = 4006;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 4007;
                    this.match(DorisParser.STRING_LITERAL);
                    this.state = 4008;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 5:
                localContext = new SetLdapAdminPasswordContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4011;
                this.match(DorisParser.LDAP_ADMIN_PASSWORD);
                this.state = 4012;
                this.match(DorisParser.EQ);
                this.state = 4018;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.STRING_LITERAL:
                    {
                    this.state = 4013;
                    this.match(DorisParser.STRING_LITERAL);
                    }
                    break;
                case DorisParser.PASSWORD:
                    {
                    {
                    this.state = 4014;
                    this.match(DorisParser.PASSWORD);
                    this.state = 4015;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 4016;
                    this.match(DorisParser.STRING_LITERAL);
                    this.state = 4017;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 6:
                localContext = new SetVariableWithoutTypeContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4020;
                this.variable();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variable(): VariableContext {
        let localContext = new VariableContext(this.context, this.state);
        this.enterRule(localContext, 136, DorisParser.RULE_variable);
        let _la: number;
        try {
            this.state = 4041;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.DOUBLEATSIGN:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                localContext = new SetSystemVariableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4028;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 537) {
                    {
                    this.state = 4023;
                    this.match(DorisParser.DOUBLEATSIGN);
                    this.state = 4026;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 567, this.context) ) {
                    case 1:
                        {
                        this.state = 4024;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 206 || _la === 273 || _la === 414)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4025;
                        this.match(DorisParser.DOT);
                        }
                        break;
                    }
                    }
                }

                this.state = 4030;
                this.identifier();
                this.state = 4031;
                this.match(DorisParser.EQ);
                this.state = 4034;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LEFT_PAREN:
                case DorisParser.LEFT_BRACKET:
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADD:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BINARY:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CASE:
                case DorisParser.CAST:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATABASE:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXISTS:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.EXTRACT:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FALSE:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IF:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INTERVAL:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.KEY:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LEFT:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LIKE:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NOT:
                case DorisParser.NULL:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLACEHOLDER:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REGEXP:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RIGHT:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRIM:
                case DorisParser.TRUE:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.PLUS:
                case DorisParser.SUBTRACT:
                case DorisParser.ASTERISK:
                case DorisParser.TILDE:
                case DorisParser.LOGICALNOT:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.ATSIGN:
                case DorisParser.DOUBLEATSIGN:
                case DorisParser.STRING_LITERAL:
                case DorisParser.INTEGER_VALUE:
                case DorisParser.EXPONENT_VALUE:
                case DorisParser.DECIMAL_VALUE:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 4032;
                    this.expression();
                    }
                    break;
                case DorisParser.DEFAULT:
                    {
                    this.state = 4033;
                    this.match(DorisParser.DEFAULT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case DorisParser.ATSIGN:
                localContext = new SetUserVariableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4036;
                this.match(DorisParser.ATSIGN);
                this.state = 4037;
                this.identifier();
                this.state = 4038;
                this.match(DorisParser.EQ);
                this.state = 4039;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionAccessMode(): TransactionAccessModeContext {
        let localContext = new TransactionAccessModeContext(this.context, this.state);
        this.enterRule(localContext, 138, DorisParser.RULE_transactionAccessMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4043;
            this.match(DorisParser.READ);
            this.state = 4044;
            _la = this.tokenStream.LA(1);
            if(!(_la === 318 || _la === 509)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isolationLevel(): IsolationLevelContext {
        let localContext = new IsolationLevelContext(this.context, this.state);
        this.enterRule(localContext, 140, DorisParser.RULE_isolationLevel);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4046;
            this.match(DorisParser.ISOLATION);
            this.state = 4047;
            this.match(DorisParser.LEVEL);
            this.state = 4055;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 571, this.context) ) {
            case 1:
                {
                {
                this.state = 4048;
                this.match(DorisParser.READ);
                this.state = 4049;
                this.match(DorisParser.UNCOMMITTED);
                }
                }
                break;
            case 2:
                {
                {
                this.state = 4050;
                this.match(DorisParser.READ);
                this.state = 4051;
                this.match(DorisParser.COMMITTED);
                }
                }
                break;
            case 3:
                {
                {
                this.state = 4052;
                this.match(DorisParser.REPEATABLE);
                this.state = 4053;
                this.match(DorisParser.READ);
                }
                }
                break;
            case 4:
                {
                {
                this.state = 4054;
                this.match(DorisParser.SERIALIZABLE);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public supportedUnsetStatement(): SupportedUnsetStatementContext {
        let localContext = new SupportedUnsetStatementContext(this.context, this.state);
        this.enterRule(localContext, 142, DorisParser.RULE_supportedUnsetStatement);
        let _la: number;
        try {
            this.state = 4070;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 574, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4057;
                this.match(DorisParser.UNSET);
                this.state = 4059;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206 || _la === 273 || _la === 414) {
                    {
                    this.state = 4058;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 206 || _la === 273 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 4061;
                this.match(DorisParser.VARIABLE);
                this.state = 4064;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.ALL:
                    {
                    this.state = 4062;
                    this.match(DorisParser.ALL);
                    }
                    break;
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 4063;
                    this.identifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4066;
                this.match(DorisParser.UNSET);
                this.state = 4067;
                this.match(DorisParser.DEFAULT);
                this.state = 4068;
                this.match(DorisParser.STORAGE);
                this.state = 4069;
                this.match(DorisParser.VAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedUseStatement(): UnsupportedUseStatementContext {
        let localContext = new UnsupportedUseStatementContext(this.context, this.state);
        this.enterRule(localContext, 144, DorisParser.RULE_unsupportedUseStatement);
        let _la: number;
        try {
            this.state = 4092;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 578, this.context) ) {
            case 1:
                localContext = new UseDatabaseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4072;
                this.match(DorisParser.USE);
                this.state = 4076;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 575, this.context) ) {
                case 1:
                    {
                    this.state = 4073;
                    (localContext as UseDatabaseContext)._catalog = this.identifier();
                    this.state = 4074;
                    this.match(DorisParser.DOT);
                    }
                    break;
                }
                this.state = 4078;
                (localContext as UseDatabaseContext)._database = this.identifier();
                }
                break;
            case 2:
                localContext = new UseCloudClusterContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4079;
                this.match(DorisParser.USE);
                this.state = 4086;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824092160) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758068699) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343345) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294572255) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 531142527) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 3753617235) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2743001093) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915099) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124386295) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908763643) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277172351) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984149) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259707003) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 8945661) !== 0) || ((((_la - 533)) & ~0x1F) === 0 && ((1 << (_la - 533)) & 49159) !== 0)) {
                    {
                    this.state = 4083;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 576, this.context) ) {
                    case 1:
                        {
                        this.state = 4080;
                        (localContext as UseCloudClusterContext)._catalog = this.identifier();
                        this.state = 4081;
                        this.match(DorisParser.DOT);
                        }
                        break;
                    }
                    this.state = 4085;
                    (localContext as UseCloudClusterContext)._database = this.identifier();
                    }
                }

                this.state = 4088;
                this.match(DorisParser.ATSIGN);
                this.state = 4089;
                (localContext as UseCloudClusterContext)._cluster = this.identifier();
                }
                break;
            case 3:
                localContext = new SwitchCatalogContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4090;
                this.match(DorisParser.SWITCH);
                this.state = 4091;
                (localContext as SwitchCatalogContext)._catalog = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedDmlStatement(): UnsupportedDmlStatementContext {
        let localContext = new UnsupportedDmlStatementContext(this.context, this.state);
        this.enterRule(localContext, 146, DorisParser.RULE_unsupportedDmlStatement);
        let _la: number;
        try {
            this.state = 4126;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.TRUNCATE:
                localContext = new TruncateTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4094;
                this.match(DorisParser.TRUNCATE);
                this.state = 4095;
                this.match(DorisParser.TABLE);
                this.state = 4096;
                this.multipartIdentifier();
                this.state = 4098;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 4097;
                    this.specifiedPartition();
                    }
                }

                this.state = 4101;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 4100;
                    this.match(DorisParser.FORCE);
                    }
                }

                }
                break;
            case DorisParser.COPY:
                localContext = new CopyIntoContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4103;
                this.match(DorisParser.COPY);
                this.state = 4104;
                this.match(DorisParser.INTO);
                this.state = 4105;
                (localContext as CopyIntoContext)._name = this.multipartIdentifier();
                this.state = 4107;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 4106;
                    (localContext as CopyIntoContext)._columns = this.identifierList();
                    }
                }

                this.state = 4109;
                this.match(DorisParser.FROM);
                this.state = 4121;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.ATSIGN:
                    {
                    this.state = 4110;
                    this.stageAndPattern();
                    }
                    break;
                case DorisParser.LEFT_PAREN:
                    {
                    {
                    this.state = 4111;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 4112;
                    this.match(DorisParser.SELECT);
                    this.state = 4113;
                    this.selectColumnClause();
                    this.state = 4114;
                    this.match(DorisParser.FROM);
                    this.state = 4115;
                    this.stageAndPattern();
                    this.state = 4117;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 504) {
                        {
                        this.state = 4116;
                        this.whereClause();
                        }
                    }

                    this.state = 4119;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4124;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 4123;
                    (localContext as CopyIntoContext)._properties = this.propertyClause();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stageAndPattern(): StageAndPatternContext {
        let localContext = new StageAndPatternContext(this.context, this.state);
        this.enterRule(localContext, 148, DorisParser.RULE_stageAndPattern);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4128;
            this.match(DorisParser.ATSIGN);
            this.state = 4131;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                {
                this.state = 4129;
                localContext._stage = this.identifier();
                }
                break;
            case DorisParser.TILDE:
                {
                this.state = 4130;
                this.match(DorisParser.TILDE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4136;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 587, this.context) ) {
            case 1:
                {
                this.state = 4133;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4134;
                localContext._pattern = this.match(DorisParser.STRING_LITERAL);
                this.state = 4135;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedKillStatement(): UnsupportedKillStatementContext {
        let localContext = new UnsupportedKillStatementContext(this.context, this.state);
        this.enterRule(localContext, 150, DorisParser.RULE_unsupportedKillStatement);
        let _la: number;
        try {
            this.state = 4146;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 589, this.context) ) {
            case 1:
                localContext = new KillConnectionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4138;
                this.match(DorisParser.KILL);
                this.state = 4140;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92) {
                    {
                    this.state = 4139;
                    this.match(DorisParser.CONNECTION);
                    }
                }

                this.state = 4142;
                this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 2:
                localContext = new KillQueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4143;
                this.match(DorisParser.KILL);
                this.state = 4144;
                this.match(DorisParser.QUERY);
                this.state = 4145;
                _la = this.tokenStream.LA(1);
                if(!(_la === 538 || _la === 543)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedDescribeStatement(): UnsupportedDescribeStatementContext {
        let localContext = new UnsupportedDescribeStatementContext(this.context, this.state);
        this.enterRule(localContext, 152, DorisParser.RULE_unsupportedDescribeStatement);
        let _la: number;
        try {
            this.state = 4167;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 592, this.context) ) {
            case 1:
                localContext = new DescribeTableValuedFunctionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4148;
                this.explainCommand();
                this.state = 4149;
                this.match(DorisParser.FUNCTION);
                this.state = 4150;
                (localContext as DescribeTableValuedFunctionContext)._tvfName = this.identifier();
                this.state = 4151;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4153;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824092288) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343345) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294572255) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 535336831) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 3753617235) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2743001093) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915099) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124648439) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277172351) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984149) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259723387) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 8945661) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461692929) !== 0)) {
                    {
                    this.state = 4152;
                    (localContext as DescribeTableValuedFunctionContext)._properties = this.propertyItemList();
                    }
                }

                this.state = 4155;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 4156;
                this.tableAlias();
                }
                break;
            case 2:
                localContext = new DescribeTableAllContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4158;
                this.explainCommand();
                this.state = 4159;
                this.multipartIdentifier();
                this.state = 4160;
                this.match(DorisParser.ALL);
                }
                break;
            case 3:
                localContext = new DescribeTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4162;
                this.explainCommand();
                this.state = 4163;
                this.multipartIdentifier();
                this.state = 4165;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329 || _la === 330 || _la === 454) {
                    {
                    this.state = 4164;
                    this.specifiedPartition();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraint(): ConstraintContext {
        let localContext = new ConstraintContext(this.context, this.state);
        this.enterRule(localContext, 154, DorisParser.RULE_constraint);
        try {
            this.state = 4181;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.PRIMARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4169;
                this.match(DorisParser.PRIMARY);
                this.state = 4170;
                this.match(DorisParser.KEY);
                this.state = 4171;
                localContext._slots = this.identifierList();
                }
                break;
            case DorisParser.UNIQUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4172;
                this.match(DorisParser.UNIQUE);
                this.state = 4173;
                localContext._slots = this.identifierList();
                }
                break;
            case DorisParser.FOREIGN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4174;
                this.match(DorisParser.FOREIGN);
                this.state = 4175;
                this.match(DorisParser.KEY);
                this.state = 4176;
                localContext._slots = this.identifierList();
                this.state = 4177;
                this.match(DorisParser.REFERENCES);
                this.state = 4178;
                localContext._referenceTable = this.multipartIdentifier();
                this.state = 4179;
                localContext._referencedSlots = this.identifierList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpec(): PartitionSpecContext {
        let localContext = new PartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 156, DorisParser.RULE_partitionSpec);
        let _la: number;
        try {
            this.state = 4197;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 596, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4184;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 454) {
                    {
                    this.state = 4183;
                    this.match(DorisParser.TEMPORARY);
                    }
                }

                this.state = 4186;
                _la = this.tokenStream.LA(1);
                if(!(_la === 329 || _la === 330)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4187;
                localContext._partitions = this.identifierList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4189;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 454) {
                    {
                    this.state = 4188;
                    this.match(DorisParser.TEMPORARY);
                    }
                }

                this.state = 4191;
                this.match(DorisParser.PARTITION);
                this.state = 4192;
                localContext._partition = this.errorCapturingIdentifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4193;
                _la = this.tokenStream.LA(1);
                if(!(_la === 329 || _la === 330)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4194;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4195;
                this.match(DorisParser.ASTERISK);
                this.state = 4196;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTable(): PartitionTableContext {
        let localContext = new PartitionTableContext(this.context, this.state);
        this.enterRule(localContext, 158, DorisParser.RULE_partitionTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 4200;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34) {
                {
                this.state = 4199;
                localContext._autoPartition = this.match(DorisParser.AUTO);
                }
            }

            this.state = 4202;
            this.match(DorisParser.PARTITION);
            this.state = 4203;
            this.match(DorisParser.BY);
            this.state = 4205;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 271 || _la === 366) {
                {
                this.state = 4204;
                _la = this.tokenStream.LA(1);
                if(!(_la === 271 || _la === 366)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 4207;
            localContext._partitionList = this.identityOrFunctionList();
            {
            this.state = 4208;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 4210;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 198 || _la === 329) {
                {
                this.state = 4209;
                localContext._partitions = this.partitionsDef();
                }
            }

            this.state = 4212;
            this.match(DorisParser.RIGHT_PAREN);
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identityOrFunctionList(): IdentityOrFunctionListContext {
        let localContext = new IdentityOrFunctionListContext(this.context, this.state);
        this.enterRule(localContext, 160, DorisParser.RULE_identityOrFunctionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4214;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 4215;
            this.identityOrFunction();
            this.state = 4220;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 4216;
                this.match(DorisParser.COMMA);
                this.state = 4217;
                localContext._identityOrFunction = this.identityOrFunction();
                localContext._partitions.push(localContext._identityOrFunction);
                }
                }
                this.state = 4222;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4223;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identityOrFunction(): IdentityOrFunctionContext {
        let localContext = new IdentityOrFunctionContext(this.context, this.state);
        this.enterRule(localContext, 162, DorisParser.RULE_identityOrFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4227;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 601, this.context) ) {
            case 1:
                {
                this.state = 4225;
                this.identifier();
                }
                break;
            case 2:
                {
                this.state = 4226;
                this.functionCallExpression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataDesc(): DataDescContext {
        let localContext = new DataDescContext(this.context, this.state);
        this.enterRule(localContext, 164, DorisParser.RULE_dataDesc);
        let _la: number;
        try {
            this.state = 4329;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 625, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4233;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27 || _la === 137 || _la === 293 || _la === 506) {
                    {
                    this.state = 4230;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 506) {
                        {
                        this.state = 4229;
                        this.match(DorisParser.WITH);
                        }
                    }

                    this.state = 4232;
                    this.mergeType();
                    }
                }

                this.state = 4235;
                this.match(DorisParser.DATA);
                this.state = 4236;
                this.match(DorisParser.INFILE);
                this.state = 4237;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4238;
                localContext._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                localContext._filePaths.push(localContext._STRING_LITERAL);
                this.state = 4243;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 4239;
                    this.match(DorisParser.COMMA);
                    this.state = 4240;
                    localContext._STRING_LITERAL = this.match(DorisParser.STRING_LITERAL);
                    localContext._filePath.push(localContext._STRING_LITERAL);
                    }
                    }
                    this.state = 4245;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4246;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 4247;
                this.match(DorisParser.INTO);
                this.state = 4248;
                this.match(DorisParser.TABLE);
                this.state = 4249;
                localContext._targetTableName = this.identifier();
                this.state = 4252;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 4250;
                    this.match(DorisParser.PARTITION);
                    this.state = 4251;
                    localContext._partition = this.identifierList();
                    }
                }

                this.state = 4258;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 606, this.context) ) {
                case 1:
                    {
                    this.state = 4254;
                    this.match(DorisParser.COLUMNS);
                    this.state = 4255;
                    this.match(DorisParser.TERMINATED);
                    this.state = 4256;
                    this.match(DorisParser.BY);
                    this.state = 4257;
                    localContext._comma = this.match(DorisParser.STRING_LITERAL);
                    }
                    break;
                }
                this.state = 4264;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 4260;
                    this.match(DorisParser.LINES);
                    this.state = 4261;
                    this.match(DorisParser.TERMINATED);
                    this.state = 4262;
                    this.match(DorisParser.BY);
                    this.state = 4263;
                    localContext._separator = this.match(DorisParser.STRING_LITERAL);
                    }
                }

                this.state = 4269;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 4266;
                    this.match(DorisParser.FORMAT);
                    this.state = 4267;
                    this.match(DorisParser.AS);
                    this.state = 4268;
                    localContext._format = this.identifierOrText();
                    }
                }

                this.state = 4274;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88) {
                    {
                    this.state = 4271;
                    this.match(DorisParser.COMPRESS_TYPE);
                    this.state = 4272;
                    this.match(DorisParser.AS);
                    this.state = 4273;
                    localContext._compressType = this.identifierOrText();
                    }
                }

                this.state = 4277;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 4276;
                    localContext._columns = this.identifierList();
                    }
                }

                this.state = 4280;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 4279;
                    localContext._columnsFromPath = this.colFromPath();
                    }
                }

                this.state = 4283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 416) {
                    {
                    this.state = 4282;
                    localContext._columnMapping = this.colMappingList();
                    }
                }

                this.state = 4286;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 351) {
                    {
                    this.state = 4285;
                    localContext._preFilter = this.preFilterClause();
                    }
                }

                this.state = 4289;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 504) {
                    {
                    this.state = 4288;
                    localContext._where = this.whereClause();
                    }
                }

                this.state = 4292;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 4291;
                    localContext._deleteOn = this.deleteOnClause();
                    }
                }

                this.state = 4295;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 4294;
                    localContext._sequenceColumn = this.sequenceColClause();
                    }
                }

                this.state = 4298;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 4297;
                    this.propertyClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4304;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27 || _la === 137 || _la === 293 || _la === 506) {
                    {
                    this.state = 4301;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 506) {
                        {
                        this.state = 4300;
                        this.match(DorisParser.WITH);
                        }
                    }

                    this.state = 4303;
                    this.mergeType();
                    }
                }

                this.state = 4306;
                this.match(DorisParser.DATA);
                this.state = 4307;
                this.match(DorisParser.FROM);
                this.state = 4308;
                this.match(DorisParser.TABLE);
                this.state = 4309;
                localContext._sourceTableName = this.identifier();
                this.state = 4310;
                this.match(DorisParser.INTO);
                this.state = 4311;
                this.match(DorisParser.TABLE);
                this.state = 4312;
                localContext._targetTableName = this.identifier();
                this.state = 4315;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 4313;
                    this.match(DorisParser.PARTITION);
                    this.state = 4314;
                    localContext._partition = this.identifierList();
                    }
                }

                this.state = 4318;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 416) {
                    {
                    this.state = 4317;
                    localContext._columnMapping = this.colMappingList();
                    }
                }

                this.state = 4321;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 504) {
                    {
                    this.state = 4320;
                    localContext._where = this.whereClause();
                    }
                }

                this.state = 4324;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 4323;
                    localContext._deleteOn = this.deleteOnClause();
                    }
                }

                this.state = 4327;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 358) {
                    {
                    this.state = 4326;
                    this.propertyClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public buildMode(): BuildModeContext {
        let localContext = new BuildModeContext(this.context, this.state);
        this.enterRule(localContext, 166, DorisParser.RULE_buildMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4331;
            this.match(DorisParser.BUILD);
            this.state = 4332;
            _la = this.tokenStream.LA(1);
            if(!(_la === 136 || _la === 227)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public refreshTrigger(): RefreshTriggerContext {
        let localContext = new RefreshTriggerContext(this.context, this.state);
        this.enterRule(localContext, 168, DorisParser.RULE_refreshTrigger);
        try {
            this.state = 4341;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 626, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4334;
                this.match(DorisParser.ON);
                this.state = 4335;
                this.match(DorisParser.MANUAL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4336;
                this.match(DorisParser.ON);
                this.state = 4337;
                this.match(DorisParser.SCHEDULE);
                this.state = 4338;
                this.refreshSchedule();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4339;
                this.match(DorisParser.ON);
                this.state = 4340;
                this.match(DorisParser.COMMIT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public refreshSchedule(): RefreshScheduleContext {
        let localContext = new RefreshScheduleContext(this.context, this.state);
        this.enterRule(localContext, 170, DorisParser.RULE_refreshSchedule);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4343;
            this.match(DorisParser.EVERY);
            this.state = 4344;
            this.match(DorisParser.INTEGER_VALUE);
            this.state = 4345;
            localContext._refreshUnit = this.identifier();
            this.state = 4348;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 432) {
                {
                this.state = 4346;
                this.match(DorisParser.STARTS);
                this.state = 4347;
                this.match(DorisParser.STRING_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public refreshMethod(): RefreshMethodContext {
        let localContext = new RefreshMethodContext(this.context, this.state);
        this.enterRule(localContext, 172, DorisParser.RULE_refreshMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4350;
            _la = this.tokenStream.LA(1);
            if(!(_la === 34 || _la === 87)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mvPartition(): MvPartitionContext {
        let localContext = new MvPartitionContext(this.context, this.state);
        this.enterRule(localContext, 174, DorisParser.RULE_mvPartition);
        try {
            this.state = 4354;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 628, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4352;
                localContext._partitionKey = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4353;
                localContext._partitionExpr = this.functionCallExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierOrText(): IdentifierOrTextContext {
        let localContext = new IdentifierOrTextContext(this.context, this.state);
        this.enterRule(localContext, 176, DorisParser.RULE_identifierOrText);
        try {
            this.state = 4358;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4356;
                this.identifier();
                }
                break;
            case DorisParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4357;
                this.match(DorisParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierOrTextOrAsterisk(): IdentifierOrTextOrAsteriskContext {
        let localContext = new IdentifierOrTextOrAsteriskContext(this.context, this.state);
        this.enterRule(localContext, 178, DorisParser.RULE_identifierOrTextOrAsterisk);
        try {
            this.state = 4363;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4360;
                this.identifier();
                }
                break;
            case DorisParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4361;
                this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case DorisParser.ASTERISK:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4362;
                this.match(DorisParser.ASTERISK);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierOrAsterisk(): MultipartIdentifierOrAsteriskContext {
        let localContext = new MultipartIdentifierOrAsteriskContext(this.context, this.state);
        this.enterRule(localContext, 180, DorisParser.RULE_multipartIdentifierOrAsterisk);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4365;
            localContext._identifierOrAsterisk = this.identifierOrAsterisk();
            localContext._parts.push(localContext._identifierOrAsterisk);
            this.state = 4370;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 5) {
                {
                {
                this.state = 4366;
                this.match(DorisParser.DOT);
                this.state = 4367;
                localContext._identifierOrAsterisk = this.identifierOrAsterisk();
                localContext._parts.push(localContext._identifierOrAsterisk);
                }
                }
                this.state = 4372;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierOrAsterisk(): IdentifierOrAsteriskContext {
        let localContext = new IdentifierOrAsteriskContext(this.context, this.state);
        this.enterRule(localContext, 182, DorisParser.RULE_identifierOrAsterisk);
        try {
            this.state = 4375;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.STRING_LITERAL:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4373;
                this.identifierOrText();
                }
                break;
            case DorisParser.ASTERISK:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4374;
                this.match(DorisParser.ASTERISK);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userIdentify(): UserIdentifyContext {
        let localContext = new UserIdentifyContext(this.context, this.state);
        this.enterRule(localContext, 184, DorisParser.RULE_userIdentify);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4377;
            localContext._user = this.identifierOrText();
            this.state = 4386;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 536) {
                {
                this.state = 4378;
                this.match(DorisParser.ATSIGN);
                this.state = 4384;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.STRING_LITERAL:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 4379;
                    localContext._host = this.identifierOrText();
                    }
                    break;
                case DorisParser.LEFT_PAREN:
                    {
                    this.state = 4380;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 4381;
                    localContext._host = this.identifierOrText();
                    this.state = 4382;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantUserIdentify(): GrantUserIdentifyContext {
        let localContext = new GrantUserIdentifyContext(this.context, this.state);
        this.enterRule(localContext, 186, DorisParser.RULE_grantUserIdentify);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4388;
            this.userIdentify();
            this.state = 4395;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 224) {
                {
                this.state = 4389;
                this.match(DorisParser.IDENTIFIED);
                this.state = 4390;
                this.match(DorisParser.BY);
                this.state = 4392;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 4391;
                    this.match(DorisParser.PASSWORD);
                    }
                }

                this.state = 4394;
                this.match(DorisParser.STRING_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explain(): ExplainContext {
        let localContext = new ExplainContext(this.context, this.state);
        this.enterRule(localContext, 188, DorisParser.RULE_explain);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4397;
            this.explainCommand();
            this.state = 4399;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21 || _la === 24 || _la === 147 || _la === 278 || _la === 292 || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2097409) !== 0) || _la === 393 || _la === 419) {
                {
                this.state = 4398;
                this.planType();
                }
            }

            this.state = 4402;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 156 || _la === 209 || _la === 344 || _la === 467 || _la === 496) {
                {
                this.state = 4401;
                localContext._level = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 209 || _la === 344 || _la === 467 || _la === 496)) {
                    localContext._level = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 4405;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 347) {
                {
                this.state = 4404;
                this.match(DorisParser.PROCESS);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainCommand(): ExplainCommandContext {
        let localContext = new ExplainCommandContext(this.context, this.state);
        this.enterRule(localContext, 190, DorisParser.RULE_explainCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4407;
            _la = this.tokenStream.LA(1);
            if(!(_la === 139 || _la === 140 || _la === 177)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public planType(): PlanTypeContext {
        let localContext = new PlanTypeContext(this.context, this.state);
        this.enterRule(localContext, 192, DorisParser.RULE_planType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4409;
            _la = this.tokenStream.LA(1);
            if(!(_la === 21 || _la === 24 || _la === 147 || _la === 278 || _la === 292 || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2097409) !== 0) || _la === 393 || _la === 419)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replayCommand(): ReplayCommandContext {
        let localContext = new ReplayCommandContext(this.context, this.state);
        this.enterRule(localContext, 194, DorisParser.RULE_replayCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4411;
            this.match(DorisParser.PLAN);
            this.state = 4412;
            this.match(DorisParser.REPLAYER);
            this.state = 4413;
            this.replayType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replayType(): ReplayTypeContext {
        let localContext = new ReplayTypeContext(this.context, this.state);
        this.enterRule(localContext, 196, DorisParser.RULE_replayType);
        try {
            this.state = 4419;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.DUMP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4415;
                this.match(DorisParser.DUMP);
                this.state = 4416;
                this.query();
                }
                break;
            case DorisParser.PLAY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4417;
                this.match(DorisParser.PLAY);
                this.state = 4418;
                localContext._filePath = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeType(): MergeTypeContext {
        let localContext = new MergeTypeContext(this.context, this.state);
        this.enterRule(localContext, 198, DorisParser.RULE_mergeType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4421;
            _la = this.tokenStream.LA(1);
            if(!(_la === 27 || _la === 137 || _la === 293)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preFilterClause(): PreFilterClauseContext {
        let localContext = new PreFilterClauseContext(this.context, this.state);
        this.enterRule(localContext, 200, DorisParser.RULE_preFilterClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4423;
            this.match(DorisParser.PRECEDING);
            this.state = 4424;
            this.match(DorisParser.FILTER);
            this.state = 4425;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteOnClause(): DeleteOnClauseContext {
        let localContext = new DeleteOnClauseContext(this.context, this.state);
        this.enterRule(localContext, 202, DorisParser.RULE_deleteOnClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4427;
            this.match(DorisParser.DELETE);
            this.state = 4428;
            this.match(DorisParser.ON);
            this.state = 4429;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sequenceColClause(): SequenceColClauseContext {
        let localContext = new SequenceColClauseContext(this.context, this.state);
        this.enterRule(localContext, 204, DorisParser.RULE_sequenceColClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4431;
            this.match(DorisParser.ORDER);
            this.state = 4432;
            this.match(DorisParser.BY);
            this.state = 4433;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colFromPath(): ColFromPathContext {
        let localContext = new ColFromPathContext(this.context, this.state);
        this.enterRule(localContext, 206, DorisParser.RULE_colFromPath);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4435;
            this.match(DorisParser.COLUMNS);
            this.state = 4436;
            this.match(DorisParser.FROM);
            this.state = 4437;
            this.match(DorisParser.PATH);
            this.state = 4438;
            this.match(DorisParser.AS);
            this.state = 4439;
            this.identifierList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colMappingList(): ColMappingListContext {
        let localContext = new ColMappingListContext(this.context, this.state);
        this.enterRule(localContext, 208, DorisParser.RULE_colMappingList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4441;
            this.match(DorisParser.SET);
            this.state = 4442;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 4443;
            localContext._mappingExpr = this.mappingExpr();
            localContext._mappingSet.push(localContext._mappingExpr);
            this.state = 4448;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 4444;
                this.match(DorisParser.COMMA);
                this.state = 4445;
                localContext._mappingExpr = this.mappingExpr();
                localContext._mappingSet.push(localContext._mappingExpr);
                }
                }
                this.state = 4450;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4451;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mappingExpr(): MappingExprContext {
        let localContext = new MappingExprContext(this.context, this.state);
        this.enterRule(localContext, 210, DorisParser.RULE_mappingExpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 4453;
            localContext._mappingCol = this.identifier();
            this.state = 4454;
            this.match(DorisParser.EQ);
            this.state = 4455;
            this.expression();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withRemoteStorageSystem(): WithRemoteStorageSystemContext {
        let localContext = new WithRemoteStorageSystemContext(this.context, this.state);
        this.enterRule(localContext, 212, DorisParser.RULE_withRemoteStorageSystem);
        try {
            this.state = 4485;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 643, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4457;
                this.resourceDesc();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4458;
                this.match(DorisParser.WITH);
                this.state = 4459;
                this.match(DorisParser.S3);
                this.state = 4460;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4461;
                localContext._brokerProperties = this.propertyItemList();
                this.state = 4462;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4464;
                this.match(DorisParser.WITH);
                this.state = 4465;
                this.match(DorisParser.HDFS);
                this.state = 4466;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4467;
                localContext._brokerProperties = this.propertyItemList();
                this.state = 4468;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4470;
                this.match(DorisParser.WITH);
                this.state = 4471;
                this.match(DorisParser.LOCAL);
                this.state = 4472;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4473;
                localContext._brokerProperties = this.propertyItemList();
                this.state = 4474;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4476;
                this.match(DorisParser.WITH);
                this.state = 4477;
                this.match(DorisParser.BROKER);
                this.state = 4478;
                localContext._brokerName = this.identifierOrText();
                this.state = 4483;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 642, this.context) ) {
                case 1:
                    {
                    this.state = 4479;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 4480;
                    localContext._brokerProperties = this.propertyItemList();
                    this.state = 4481;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceDesc(): ResourceDescContext {
        let localContext = new ResourceDescContext(this.context, this.state);
        this.enterRule(localContext, 214, DorisParser.RULE_resourceDesc);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4487;
            this.match(DorisParser.WITH);
            this.state = 4488;
            this.match(DorisParser.RESOURCE);
            this.state = 4489;
            localContext._resourceName = this.identifierOrText();
            this.state = 4494;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 644, this.context) ) {
            case 1:
                {
                this.state = 4490;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4491;
                this.propertyItemList();
                this.state = 4492;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mysqlDataDesc(): MysqlDataDescContext {
        let localContext = new MysqlDataDescContext(this.context, this.state);
        this.enterRule(localContext, 216, DorisParser.RULE_mysqlDataDesc);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4496;
            this.match(DorisParser.DATA);
            this.state = 4498;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 273) {
                {
                this.state = 4497;
                this.match(DorisParser.LOCAL);
                }
            }

            this.state = 4500;
            this.match(DorisParser.INFILE);
            this.state = 4501;
            localContext._filePath = this.match(DorisParser.STRING_LITERAL);
            this.state = 4502;
            this.match(DorisParser.INTO);
            this.state = 4503;
            this.match(DorisParser.TABLE);
            this.state = 4504;
            localContext._tableName = this.multipartIdentifier();
            this.state = 4507;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 329) {
                {
                this.state = 4505;
                this.match(DorisParser.PARTITION);
                this.state = 4506;
                localContext._partition = this.identifierList();
                }
            }

            this.state = 4513;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 4509;
                this.match(DorisParser.COLUMNS);
                this.state = 4510;
                this.match(DorisParser.TERMINATED);
                this.state = 4511;
                this.match(DorisParser.BY);
                this.state = 4512;
                localContext._comma = this.match(DorisParser.STRING_LITERAL);
                }
            }

            this.state = 4519;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 269) {
                {
                this.state = 4515;
                this.match(DorisParser.LINES);
                this.state = 4516;
                this.match(DorisParser.TERMINATED);
                this.state = 4517;
                this.match(DorisParser.BY);
                this.state = 4518;
                localContext._separator = this.match(DorisParser.STRING_LITERAL);
                }
            }

            this.state = 4522;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 226) {
                {
                this.state = 4521;
                this.skipLines();
                }
            }

            this.state = 4525;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 650, this.context) ) {
            case 1:
                {
                this.state = 4524;
                localContext._columns = this.identifierList();
                }
                break;
            }
            this.state = 4528;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 651, this.context) ) {
            case 1:
                {
                this.state = 4527;
                this.colMappingList();
                }
                break;
            }
            this.state = 4531;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 652, this.context) ) {
            case 1:
                {
                this.state = 4530;
                this.propertyClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipLines(): SkipLinesContext {
        let localContext = new SkipLinesContext(this.context, this.state);
        this.enterRule(localContext, 218, DorisParser.RULE_skipLines);
        try {
            this.state = 4539;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 653, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4533;
                this.match(DorisParser.IGNORE);
                this.state = 4534;
                localContext._lines = this.match(DorisParser.INTEGER_VALUE);
                this.state = 4535;
                this.match(DorisParser.LINES);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4536;
                this.match(DorisParser.IGNORE);
                this.state = 4537;
                localContext._lines = this.match(DorisParser.INTEGER_VALUE);
                this.state = 4538;
                this.match(DorisParser.ROWS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public outFileClause(): OutFileClauseContext {
        let localContext = new OutFileClauseContext(this.context, this.state);
        this.enterRule(localContext, 220, DorisParser.RULE_outFileClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4541;
            this.match(DorisParser.INTO);
            this.state = 4542;
            this.match(DorisParser.OUTFILE);
            this.state = 4543;
            localContext._filePath = this.constant();
            this.state = 4547;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 196) {
                {
                this.state = 4544;
                this.match(DorisParser.FORMAT);
                this.state = 4545;
                this.match(DorisParser.AS);
                this.state = 4546;
                localContext._format = this.identifier();
                }
            }

            this.state = 4550;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 358) {
                {
                this.state = 4549;
                this.propertyClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 222, DorisParser.RULE_query);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4553;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 506) {
                {
                this.state = 4552;
                this.cte();
                }
            }

            this.state = 4555;
            this.queryTerm(0);
            this.state = 4556;
            this.queryOrganization();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryTerm(): QueryTermContext;
    public queryTerm(_p: number): QueryTermContext;
    public queryTerm(_p?: number): QueryTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 224;
        this.enterRecursionRule(localContext, 224, DorisParser.RULE_queryTerm, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QueryTermDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 4559;
            this.queryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 4575;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 660, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 4573;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 659, this.context) ) {
                    case 1:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_queryTerm);
                        this.state = 4561;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 4562;
                        (localContext as SetOperationContext)._operator = this.match(DorisParser.INTERSECT);
                        this.state = 4564;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 21 || _la === 144) {
                            {
                            this.state = 4563;
                            this.setQuantifier();
                            }
                        }

                        this.state = 4566;
                        (localContext as SetOperationContext)._right = this.queryTerm(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_queryTerm);
                        this.state = 4567;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 4568;
                        (localContext as SetOperationContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 172 || _la === 297 || _la === 478)) {
                            (localContext as SetOperationContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4570;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 21 || _la === 144) {
                            {
                            this.state = 4569;
                            this.setQuantifier();
                            }
                        }

                        this.state = 4572;
                        (localContext as SetOperationContext)._right = this.queryTerm(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 4577;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 660, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 226, DorisParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4578;
            _la = this.tokenStream.LA(1);
            if(!(_la === 21 || _la === 144)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 228, DorisParser.RULE_queryPrimary);
        try {
            this.state = 4586;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.SELECT:
                localContext = new QueryPrimaryDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4580;
                this.querySpecification();
                }
                break;
            case DorisParser.LEFT_PAREN:
                localContext = new SubqueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4581;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4582;
                this.query();
                this.state = 4583;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case DorisParser.VALUES:
                localContext = new ValuesTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4585;
                this.inlineTable();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 230, DorisParser.RULE_querySpecification);
        try {
            localContext = new RegularQuerySpecificationContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4588;
            this.selectClause();
            this.state = 4590;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 662, this.context) ) {
            case 1:
                {
                this.state = 4589;
                this.intoClause();
                }
                break;
            }
            this.state = 4593;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 663, this.context) ) {
            case 1:
                {
                this.state = 4592;
                this.fromClause();
                }
                break;
            }
            this.state = 4596;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 664, this.context) ) {
            case 1:
                {
                this.state = 4595;
                this.whereClause();
                }
                break;
            }
            this.state = 4599;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 665, this.context) ) {
            case 1:
                {
                this.state = 4598;
                this.aggClause();
                }
                break;
            }
            this.state = 4602;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 666, this.context) ) {
            case 1:
                {
                this.state = 4601;
                this.havingClause();
                }
                break;
            }
            this.state = 4605;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 667, this.context) ) {
            case 1:
                {
                this.state = 4604;
                this.qualifyClause();
                }
                break;
            }
            this.state = 4607;
            if (!(doris_legacy_SQL_syntax)) {
                throw this.createFailedPredicateException("doris_legacy_SQL_syntax");
            }
            this.state = 4608;
            this.queryOrganization();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cte(): CteContext {
        let localContext = new CteContext(this.context, this.state);
        this.enterRule(localContext, 232, DorisParser.RULE_cte);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4610;
            this.match(DorisParser.WITH);
            this.state = 4611;
            this.aliasQuery();
            this.state = 4616;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 4612;
                this.match(DorisParser.COMMA);
                this.state = 4613;
                this.aliasQuery();
                }
                }
                this.state = 4618;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasQuery(): AliasQueryContext {
        let localContext = new AliasQueryContext(this.context, this.state);
        this.enterRule(localContext, 234, DorisParser.RULE_aliasQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4619;
            this.identifier();
            this.state = 4621;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 4620;
                this.columnAliases();
                }
            }

            this.state = 4623;
            this.match(DorisParser.AS);
            this.state = 4624;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 4625;
            this.query();
            this.state = 4626;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAliases(): ColumnAliasesContext {
        let localContext = new ColumnAliasesContext(this.context, this.state);
        this.enterRule(localContext, 236, DorisParser.RULE_columnAliases);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4628;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 4629;
            this.identifier();
            this.state = 4634;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 4630;
                this.match(DorisParser.COMMA);
                this.state = 4631;
                this.identifier();
                }
                }
                this.state = 4636;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4637;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectClause(): SelectClauseContext {
        let localContext = new SelectClauseContext(this.context, this.state);
        this.enterRule(localContext, 238, DorisParser.RULE_selectClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4639;
            this.match(DorisParser.SELECT);
            this.state = 4641;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21 || _la === 144) {
                {
                this.state = 4640;
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 144)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 4643;
            this.selectColumnClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectColumnClause(): SelectColumnClauseContext {
        let localContext = new SelectColumnClauseContext(this.context, this.state);
        this.enterRule(localContext, 240, DorisParser.RULE_selectColumnClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4645;
            this.namedExpressionSeq();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 242, DorisParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4647;
            this.match(DorisParser.WHERE);
            this.state = 4648;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 244, DorisParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4650;
            this.match(DorisParser.FROM);
            this.state = 4651;
            this.relations();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intoClause(): IntoClauseContext {
        let localContext = new IntoClauseContext(this.context, this.state);
        this.enterRule(localContext, 246, DorisParser.RULE_intoClause);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4654;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 60) {
                {
                this.state = 4653;
                this.bulkCollectClause();
                }
            }

            this.state = 4656;
            this.match(DorisParser.INTO);
            this.state = 4659;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 673, this.context) ) {
            case 1:
                {
                this.state = 4657;
                this.tableRow();
                }
                break;
            case 2:
                {
                this.state = 4658;
                this.identifier();
                }
                break;
            }
            this.state = 4668;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 675, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4661;
                    this.match(DorisParser.COMMA);
                    this.state = 4664;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 674, this.context) ) {
                    case 1:
                        {
                        this.state = 4662;
                        this.tableRow();
                        }
                        break;
                    case 2:
                        {
                        this.state = 4663;
                        this.identifier();
                        }
                        break;
                    }
                    }
                    }
                }
                this.state = 4670;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 675, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bulkCollectClause(): BulkCollectClauseContext {
        let localContext = new BulkCollectClauseContext(this.context, this.state);
        this.enterRule(localContext, 248, DorisParser.RULE_bulkCollectClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4671;
            this.match(DorisParser.BULK);
            this.state = 4672;
            this.match(DorisParser.COLLECT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRow(): TableRowContext {
        let localContext = new TableRowContext(this.context, this.state);
        this.enterRule(localContext, 250, DorisParser.RULE_tableRow);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4674;
            this.identifier();
            this.state = 4675;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 4676;
            this.match(DorisParser.INTEGER_VALUE);
            this.state = 4677;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relations(): RelationsContext {
        let localContext = new RelationsContext(this.context, this.state);
        this.enterRule(localContext, 252, DorisParser.RULE_relations);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4679;
            this.relation();
            this.state = 4684;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 676, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4680;
                    this.match(DorisParser.COMMA);
                    this.state = 4681;
                    this.relation();
                    }
                    }
                }
                this.state = 4686;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 676, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation(): RelationContext {
        let localContext = new RelationContext(this.context, this.state);
        this.enterRule(localContext, 254, DorisParser.RULE_relation);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4687;
            this.relationPrimary();
            this.state = 4691;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 677, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4688;
                    this.joinRelation();
                    }
                    }
                }
                this.state = 4693;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 677, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinRelation(): JoinRelationContext {
        let localContext = new JoinRelationContext(this.context, this.state);
        this.enterRule(localContext, 256, DorisParser.RULE_joinRelation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 4694;
            this.joinType();
            }
            this.state = 4695;
            this.match(DorisParser.JOIN);
            this.state = 4697;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 678, this.context) ) {
            case 1:
                {
                this.state = 4696;
                this.distributeType();
                }
                break;
            }
            this.state = 4699;
            localContext._right = this.relationPrimary();
            this.state = 4701;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 679, this.context) ) {
            case 1:
                {
                this.state = 4700;
                this.joinCriteria();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distributeType(): DistributeTypeContext {
        let localContext = new DistributeTypeContext(this.context, this.state);
        this.enterRule(localContext, 258, DorisParser.RULE_distributeType);
        try {
            this.state = 4711;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_BRACKET:
                localContext = new BracketDistributeTypeContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4703;
                this.match(DorisParser.LEFT_BRACKET);
                this.state = 4704;
                this.identifier();
                this.state = 4705;
                this.match(DorisParser.RIGHT_BRACKET);
                }
                break;
            case DorisParser.HINT_START:
                localContext = new CommentDistributeTypeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4707;
                this.match(DorisParser.HINT_START);
                this.state = 4708;
                this.identifier();
                this.state = 4709;
                this.match(DorisParser.HINT_END);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationHint(): RelationHintContext {
        let localContext = new RelationHintContext(this.context, this.state);
        this.enterRule(localContext, 260, DorisParser.RULE_relationHint);
        let _la: number;
        try {
            this.state = 4735;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_BRACKET:
                localContext = new BracketRelationHintContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4713;
                this.match(DorisParser.LEFT_BRACKET);
                this.state = 4714;
                this.identifier();
                this.state = 4719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 4715;
                    this.match(DorisParser.COMMA);
                    this.state = 4716;
                    this.identifier();
                    }
                    }
                    this.state = 4721;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4722;
                this.match(DorisParser.RIGHT_BRACKET);
                }
                break;
            case DorisParser.HINT_START:
                localContext = new CommentRelationHintContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4724;
                this.match(DorisParser.HINT_START);
                this.state = 4725;
                this.identifier();
                this.state = 4730;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 4726;
                    this.match(DorisParser.COMMA);
                    this.state = 4727;
                    this.identifier();
                    }
                    }
                    this.state = 4732;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4733;
                this.match(DorisParser.HINT_END);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggClause(): AggClauseContext {
        let localContext = new AggClauseContext(this.context, this.state);
        this.enterRule(localContext, 262, DorisParser.RULE_aggClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4737;
            this.match(DorisParser.GROUP);
            this.state = 4738;
            this.match(DorisParser.BY);
            this.state = 4739;
            this.groupingElement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingElement(): GroupingElementContext {
        let localContext = new GroupingElementContext(this.context, this.state);
        this.enterRule(localContext, 264, DorisParser.RULE_groupingElement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 4788;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 690, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4741;
                this.match(DorisParser.ROLLUP);
                this.state = 4742;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4751;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824108676) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343357) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294703327) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 536401791) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 4290488147) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2810112005) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915135) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124779511) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277237887) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984157) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259731579) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 2156429309) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461889683) !== 0)) {
                    {
                    this.state = 4743;
                    this.expression();
                    this.state = 4748;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 4744;
                        this.match(DorisParser.COMMA);
                        this.state = 4745;
                        this.expression();
                        }
                        }
                        this.state = 4750;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 4753;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4754;
                this.match(DorisParser.CUBE);
                this.state = 4755;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4764;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824108676) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343357) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294703327) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 536401791) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 4290488147) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2810112005) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915135) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124779511) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277237887) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984157) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259731579) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 2156429309) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461889683) !== 0)) {
                    {
                    this.state = 4756;
                    this.expression();
                    this.state = 4761;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 4757;
                        this.match(DorisParser.COMMA);
                        this.state = 4758;
                        this.expression();
                        }
                        }
                        this.state = 4763;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 4766;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4767;
                this.match(DorisParser.GROUPING);
                this.state = 4768;
                this.match(DorisParser.SETS);
                this.state = 4769;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4770;
                this.groupingSet();
                this.state = 4775;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 4771;
                    this.match(DorisParser.COMMA);
                    this.state = 4772;
                    this.groupingSet();
                    }
                    }
                    this.state = 4777;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4778;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4780;
                this.expression();
                this.state = 4785;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 689, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 4781;
                        this.match(DorisParser.COMMA);
                        this.state = 4782;
                        this.expression();
                        }
                        }
                    }
                    this.state = 4787;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 689, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 266, DorisParser.RULE_groupingSet);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4790;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 4799;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824108676) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343357) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294703327) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 536401791) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 4290488147) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2810112005) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915135) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124779511) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277237887) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984157) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259731579) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 2156429309) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461889683) !== 0)) {
                {
                this.state = 4791;
                this.expression();
                this.state = 4796;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 4792;
                    this.match(DorisParser.COMMA);
                    this.state = 4793;
                    this.expression();
                    }
                    }
                    this.state = 4798;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 4801;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 268, DorisParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4803;
            this.match(DorisParser.HAVING);
            this.state = 4804;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifyClause(): QualifyClauseContext {
        let localContext = new QualifyClauseContext(this.context, this.state);
        this.enterRule(localContext, 270, DorisParser.RULE_qualifyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4806;
            this.match(DorisParser.QUALIFY);
            this.state = 4807;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectHint(): SelectHintContext {
        let localContext = new SelectHintContext(this.context, this.state);
        this.enterRule(localContext, 272, DorisParser.RULE_selectHint);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4809;
            localContext._hintStatement = this.hintStatement();
            localContext._hintStatements.push(localContext._hintStatement);
            this.state = 4816;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 694, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4811;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4) {
                        {
                        this.state = 4810;
                        this.match(DorisParser.COMMA);
                        }
                    }

                    this.state = 4813;
                    localContext._hintStatement = this.hintStatement();
                    localContext._hintStatements.push(localContext._hintStatement);
                    }
                    }
                }
                this.state = 4818;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 694, this.context);
            }
            this.state = 4819;
            this.match(DorisParser.HINT_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintStatement(): HintStatementContext {
        let localContext = new HintStatementContext(this.context, this.state);
        this.enterRule(localContext, 274, DorisParser.RULE_hintStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4821;
            localContext._hintName = this.identifier();
            this.state = 4835;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 4822;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 4823;
                localContext._hintAssignment = this.hintAssignment();
                localContext._parameters.push(localContext._hintAssignment);
                this.state = 4830;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824092304) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343345) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294572255) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 535336831) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 3753617235) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2743001093) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915099) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124648439) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277172351) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984149) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259723387) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 8945661) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461692929) !== 0)) {
                    {
                    {
                    this.state = 4825;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4) {
                        {
                        this.state = 4824;
                        this.match(DorisParser.COMMA);
                        }
                    }

                    this.state = 4827;
                    localContext._hintAssignment = this.hintAssignment();
                    localContext._parameters.push(localContext._hintAssignment);
                    }
                    }
                    this.state = 4832;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4833;
                this.match(DorisParser.RIGHT_PAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintAssignment(): HintAssignmentContext {
        let localContext = new HintAssignmentContext(this.context, this.state);
        this.enterRule(localContext, 276, DorisParser.RULE_hintAssignment);
        let _la: number;
        try {
            this.state = 4846;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 700, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4837;
                localContext._key = this.identifierOrText();
                this.state = 4843;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 512) {
                    {
                    this.state = 4838;
                    this.match(DorisParser.EQ);
                    this.state = 4841;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 698, this.context) ) {
                    case 1:
                        {
                        this.state = 4839;
                        localContext._constantValue = this.constant();
                        }
                        break;
                    case 2:
                        {
                        this.state = 4840;
                        localContext._identifierValue = this.identifier();
                        }
                        break;
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4845;
                this.constant();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateAssignment(): UpdateAssignmentContext {
        let localContext = new UpdateAssignmentContext(this.context, this.state);
        this.enterRule(localContext, 278, DorisParser.RULE_updateAssignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4848;
            localContext._col = this.multipartIdentifier();
            this.state = 4849;
            this.match(DorisParser.EQ);
            this.state = 4852;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_PAREN:
            case DorisParser.LEFT_BRACKET:
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADD:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BINARY:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CASE:
            case DorisParser.CAST:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATABASE:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXISTS:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.EXTRACT:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FALSE:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IF:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INTERVAL:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.KEY:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LEFT:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LIKE:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NOT:
            case DorisParser.NULL:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLACEHOLDER:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REGEXP:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RIGHT:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRIM:
            case DorisParser.TRUE:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.PLUS:
            case DorisParser.SUBTRACT:
            case DorisParser.ASTERISK:
            case DorisParser.TILDE:
            case DorisParser.LOGICALNOT:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.ATSIGN:
            case DorisParser.DOUBLEATSIGN:
            case DorisParser.STRING_LITERAL:
            case DorisParser.INTEGER_VALUE:
            case DorisParser.EXPONENT_VALUE:
            case DorisParser.DECIMAL_VALUE:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                {
                this.state = 4850;
                this.expression();
                }
                break;
            case DorisParser.DEFAULT:
                {
                this.state = 4851;
                this.match(DorisParser.DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateAssignmentSeq(): UpdateAssignmentSeqContext {
        let localContext = new UpdateAssignmentSeqContext(this.context, this.state);
        this.enterRule(localContext, 280, DorisParser.RULE_updateAssignmentSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4854;
            localContext._updateAssignment = this.updateAssignment();
            localContext._assignments.push(localContext._updateAssignment);
            this.state = 4859;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 4855;
                this.match(DorisParser.COMMA);
                this.state = 4856;
                localContext._updateAssignment = this.updateAssignment();
                localContext._assignments.push(localContext._updateAssignment);
                }
                }
                this.state = 4861;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lateralView(): LateralViewContext {
        let localContext = new LateralViewContext(this.context, this.state);
        this.enterRule(localContext, 282, DorisParser.RULE_lateralView);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4862;
            this.match(DorisParser.LATERAL);
            this.state = 4863;
            this.match(DorisParser.VIEW);
            this.state = 4864;
            localContext._functionName = this.identifier();
            this.state = 4865;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 4874;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824108676) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343357) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294703327) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 536401791) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 4290488147) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2810112005) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915135) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124779511) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277237887) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984157) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259731579) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 2156429309) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461889683) !== 0)) {
                {
                this.state = 4866;
                this.expression();
                this.state = 4871;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 4867;
                    this.match(DorisParser.COMMA);
                    this.state = 4868;
                    this.expression();
                    }
                    }
                    this.state = 4873;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 4876;
            this.match(DorisParser.RIGHT_PAREN);
            this.state = 4877;
            localContext._tableName = this.identifier();
            this.state = 4878;
            this.match(DorisParser.AS);
            this.state = 4879;
            localContext._identifier = this.identifier();
            localContext._columnNames.push(localContext._identifier);
            this.state = 4884;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 705, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4880;
                    this.match(DorisParser.COMMA);
                    this.state = 4881;
                    localContext._identifier = this.identifier();
                    localContext._columnNames.push(localContext._identifier);
                    }
                    }
                }
                this.state = 4886;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 705, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryOrganization(): QueryOrganizationContext {
        let localContext = new QueryOrganizationContext(this.context, this.state);
        this.enterRule(localContext, 284, DorisParser.RULE_queryOrganization);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4888;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 706, this.context) ) {
            case 1:
                {
                this.state = 4887;
                this.sortClause();
                }
                break;
            }
            this.state = 4891;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 707, this.context) ) {
            case 1:
                {
                this.state = 4890;
                this.limitClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortClause(): SortClauseContext {
        let localContext = new SortClauseContext(this.context, this.state);
        this.enterRule(localContext, 286, DorisParser.RULE_sortClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4893;
            this.match(DorisParser.ORDER);
            this.state = 4894;
            this.match(DorisParser.BY);
            this.state = 4895;
            this.sortItem();
            this.state = 4900;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 708, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4896;
                    this.match(DorisParser.COMMA);
                    this.state = 4897;
                    this.sortItem();
                    }
                    }
                }
                this.state = 4902;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 708, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortItem(): SortItemContext {
        let localContext = new SortItemContext(this.context, this.state);
        this.enterRule(localContext, 288, DorisParser.RULE_sortItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4903;
            this.expression();
            this.state = 4905;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 709, this.context) ) {
            case 1:
                {
                this.state = 4904;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 31 || _la === 139)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 4909;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 710, this.context) ) {
            case 1:
                {
                this.state = 4907;
                this.match(DorisParser.NULLS);
                this.state = 4908;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 260)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 290, DorisParser.RULE_limitClause);
        try {
            this.state = 4921;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 711, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 4911;
                this.match(DorisParser.LIMIT);
                this.state = 4912;
                localContext._limit = this.match(DorisParser.INTEGER_VALUE);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 4913;
                this.match(DorisParser.LIMIT);
                this.state = 4914;
                localContext._limit = this.match(DorisParser.INTEGER_VALUE);
                this.state = 4915;
                this.match(DorisParser.OFFSET);
                this.state = 4916;
                localContext._offset = this.match(DorisParser.INTEGER_VALUE);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 4917;
                this.match(DorisParser.LIMIT);
                this.state = 4918;
                localContext._offset = this.match(DorisParser.INTEGER_VALUE);
                this.state = 4919;
                this.match(DorisParser.COMMA);
                this.state = 4920;
                localContext._limit = this.match(DorisParser.INTEGER_VALUE);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionClause(): PartitionClauseContext {
        let localContext = new PartitionClauseContext(this.context, this.state);
        this.enterRule(localContext, 292, DorisParser.RULE_partitionClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4923;
            this.match(DorisParser.PARTITION);
            this.state = 4924;
            this.match(DorisParser.BY);
            this.state = 4925;
            this.expression();
            this.state = 4930;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 4926;
                this.match(DorisParser.COMMA);
                this.state = 4927;
                this.expression();
                }
                }
                this.state = 4932;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 294, DorisParser.RULE_joinType);
        let _la: number;
        try {
            this.state = 4957;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 717, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4934;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 233) {
                    {
                    this.state = 4933;
                    this.match(DorisParser.INNER);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4936;
                this.match(DorisParser.CROSS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4937;
                this.match(DorisParser.LEFT);
                this.state = 4939;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 323) {
                    {
                    this.state = 4938;
                    this.match(DorisParser.OUTER);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4941;
                this.match(DorisParser.RIGHT);
                this.state = 4943;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 323) {
                    {
                    this.state = 4942;
                    this.match(DorisParser.OUTER);
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4945;
                this.match(DorisParser.FULL);
                this.state = 4947;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 323) {
                    {
                    this.state = 4946;
                    this.match(DorisParser.OUTER);
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4949;
                this.match(DorisParser.LEFT);
                this.state = 4950;
                this.match(DorisParser.SEMI);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4951;
                this.match(DorisParser.RIGHT);
                this.state = 4952;
                this.match(DorisParser.SEMI);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4953;
                this.match(DorisParser.LEFT);
                this.state = 4954;
                this.match(DorisParser.ANTI);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4955;
                this.match(DorisParser.RIGHT);
                this.state = 4956;
                this.match(DorisParser.ANTI);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 296, DorisParser.RULE_joinCriteria);
        try {
            this.state = 4963;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4959;
                this.match(DorisParser.ON);
                this.state = 4960;
                this.booleanExpression(0);
                }
                break;
            case DorisParser.USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4961;
                this.match(DorisParser.USING);
                this.state = 4962;
                this.identifierList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierList(): IdentifierListContext {
        let localContext = new IdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 298, DorisParser.RULE_identifierList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4965;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 4966;
            this.identifierSeq();
            this.state = 4967;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierSeq(): IdentifierSeqContext {
        let localContext = new IdentifierSeqContext(this.context, this.state);
        this.enterRule(localContext, 300, DorisParser.RULE_identifierSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4969;
            localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
            localContext._ident.push(localContext._errorCapturingIdentifier);
            this.state = 4974;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 4970;
                this.match(DorisParser.COMMA);
                this.state = 4971;
                localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                localContext._ident.push(localContext._errorCapturingIdentifier);
                }
                }
                this.state = 4976;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optScanParams(): OptScanParamsContext {
        let localContext = new OptScanParamsContext(this.context, this.state);
        this.enterRule(localContext, 302, DorisParser.RULE_optScanParams);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4977;
            this.match(DorisParser.ATSIGN);
            this.state = 4978;
            localContext._funcName = this.identifier();
            this.state = 4979;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 4981;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824092288) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343345) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294572255) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 535336831) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 3753617235) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2743001093) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915099) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124648439) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277172351) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984149) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259723387) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 8945661) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461692929) !== 0)) {
                {
                this.state = 4980;
                localContext._properties = this.propertyItemList();
                }
            }

            this.state = 4983;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationPrimary(): RelationPrimaryContext {
        let localContext = new RelationPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 304, DorisParser.RULE_relationPrimary);
        let _la: number;
        try {
            let alternative: number;
            this.state = 5036;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 731, this.context) ) {
            case 1:
                localContext = new TableNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4985;
                this.multipartIdentifier();
                this.state = 4987;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 721, this.context) ) {
                case 1:
                    {
                    this.state = 4986;
                    this.optScanParams();
                    }
                    break;
                }
                this.state = 4990;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 722, this.context) ) {
                case 1:
                    {
                    this.state = 4989;
                    this.materializedViewName();
                    }
                    break;
                }
                this.state = 4993;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 723, this.context) ) {
                case 1:
                    {
                    this.state = 4992;
                    this.tableSnapshot();
                    }
                    break;
                }
                this.state = 4996;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 724, this.context) ) {
                case 1:
                    {
                    this.state = 4995;
                    this.specifiedPartition();
                    }
                    break;
                }
                this.state = 4999;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 725, this.context) ) {
                case 1:
                    {
                    this.state = 4998;
                    this.tabletList();
                    }
                    break;
                }
                this.state = 5001;
                this.tableAlias();
                this.state = 5003;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 726, this.context) ) {
                case 1:
                    {
                    this.state = 5002;
                    this.sample();
                    }
                    break;
                }
                this.state = 5006;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 727, this.context) ) {
                case 1:
                    {
                    this.state = 5005;
                    this.relationHint();
                    }
                    break;
                }
                this.state = 5011;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 728, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 5008;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 5013;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 728, this.context);
                }
                }
                break;
            case 2:
                localContext = new AliasedQueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5014;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5015;
                this.query();
                this.state = 5016;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 5017;
                this.tableAlias();
                this.state = 5021;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 729, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 5018;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 5023;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 729, this.context);
                }
                }
                break;
            case 3:
                localContext = new TableValuedFunctionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5024;
                (localContext as TableValuedFunctionContext)._tvfName = this.identifier();
                this.state = 5025;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5027;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824092288) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343345) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294572255) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 535336831) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 3753617235) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2743001093) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915099) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124648439) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277172351) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984149) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259723387) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 8945661) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461692929) !== 0)) {
                    {
                    this.state = 5026;
                    (localContext as TableValuedFunctionContext)._properties = this.propertyItemList();
                    }
                }

                this.state = 5029;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 5030;
                this.tableAlias();
                }
                break;
            case 4:
                localContext = new RelationListContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5032;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5033;
                this.relations();
                this.state = 5034;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public materializedViewName(): MaterializedViewNameContext {
        let localContext = new MaterializedViewNameContext(this.context, this.state);
        this.enterRule(localContext, 306, DorisParser.RULE_materializedViewName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5038;
            this.match(DorisParser.INDEX);
            this.state = 5039;
            localContext._indexName = this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyClause(): PropertyClauseContext {
        let localContext = new PropertyClauseContext(this.context, this.state);
        this.enterRule(localContext, 308, DorisParser.RULE_propertyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5041;
            this.match(DorisParser.PROPERTIES);
            this.state = 5042;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 5043;
            localContext._fileProperties = this.propertyItemList();
            this.state = 5044;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyItemList(): PropertyItemListContext {
        let localContext = new PropertyItemListContext(this.context, this.state);
        this.enterRule(localContext, 310, DorisParser.RULE_propertyItemList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5046;
            localContext._propertyItem = this.propertyItem();
            localContext._properties.push(localContext._propertyItem);
            this.state = 5051;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 5047;
                this.match(DorisParser.COMMA);
                this.state = 5048;
                localContext._propertyItem = this.propertyItem();
                localContext._properties.push(localContext._propertyItem);
                }
                }
                this.state = 5053;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyItem(): PropertyItemContext {
        let localContext = new PropertyItemContext(this.context, this.state);
        this.enterRule(localContext, 312, DorisParser.RULE_propertyItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5054;
            localContext._key = this.propertyKey();
            this.state = 5055;
            this.match(DorisParser.EQ);
            this.state = 5056;
            localContext._value = this.propertyValue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyKey(): PropertyKeyContext {
        let localContext = new PropertyKeyContext(this.context, this.state);
        this.enterRule(localContext, 314, DorisParser.RULE_propertyKey);
        try {
            this.state = 5060;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 733, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5058;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5059;
                this.constant();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValue(): PropertyValueContext {
        let localContext = new PropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 316, DorisParser.RULE_propertyValue);
        try {
            this.state = 5064;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 734, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5062;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5063;
                this.constant();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAlias(): TableAliasContext {
        let localContext = new TableAliasContext(this.context, this.state);
        this.enterRule(localContext, 318, DorisParser.RULE_tableAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5073;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 737, this.context) ) {
            case 1:
                {
                this.state = 5067;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 5066;
                    this.match(DorisParser.AS);
                    }
                }

                this.state = 5069;
                this.strictIdentifier();
                this.state = 5071;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 736, this.context) ) {
                case 1:
                    {
                    this.state = 5070;
                    this.identifierList();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        let localContext = new MultipartIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 320, DorisParser.RULE_multipartIdentifier);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5075;
            localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
            localContext._parts.push(localContext._errorCapturingIdentifier);
            this.state = 5080;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 738, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5076;
                    this.match(DorisParser.DOT);
                    this.state = 5077;
                    localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                    localContext._parts.push(localContext._errorCapturingIdentifier);
                    }
                    }
                }
                this.state = 5082;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 738, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleColumnDefs(): SimpleColumnDefsContext {
        let localContext = new SimpleColumnDefsContext(this.context, this.state);
        this.enterRule(localContext, 322, DorisParser.RULE_simpleColumnDefs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5083;
            localContext._simpleColumnDef = this.simpleColumnDef();
            localContext._cols.push(localContext._simpleColumnDef);
            this.state = 5088;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 5084;
                this.match(DorisParser.COMMA);
                this.state = 5085;
                localContext._simpleColumnDef = this.simpleColumnDef();
                localContext._cols.push(localContext._simpleColumnDef);
                }
                }
                this.state = 5090;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleColumnDef(): SimpleColumnDefContext {
        let localContext = new SimpleColumnDefContext(this.context, this.state);
        this.enterRule(localContext, 324, DorisParser.RULE_simpleColumnDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5091;
            localContext._colName = this.identifier();
            this.state = 5094;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 5092;
                this.match(DorisParser.COMMENT);
                this.state = 5093;
                localContext._comment = this.match(DorisParser.STRING_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDefs(): ColumnDefsContext {
        let localContext = new ColumnDefsContext(this.context, this.state);
        this.enterRule(localContext, 326, DorisParser.RULE_columnDefs);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5096;
            localContext._columnDef = this.columnDef();
            localContext._cols.push(localContext._columnDef);
            this.state = 5101;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 741, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5097;
                    this.match(DorisParser.COMMA);
                    this.state = 5098;
                    localContext._columnDef = this.columnDef();
                    localContext._cols.push(localContext._columnDef);
                    }
                    }
                }
                this.state = 5103;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 741, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDef(): ColumnDefContext {
        let localContext = new ColumnDefContext(this.context, this.state);
        this.enterRule(localContext, 328, DorisParser.RULE_columnDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5104;
            localContext._colName = this.identifier();
            this.state = 5105;
            localContext._type_ = this.dataType();
            this.state = 5107;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 255) {
                {
                this.state = 5106;
                this.match(DorisParser.KEY);
                }
            }

            this.state = 5110;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 743, this.context) ) {
            case 1:
                {
                this.state = 5109;
                localContext._aggType = this.aggTypeDef();
                }
                break;
            }
            this.state = 5121;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30 || _la === 204) {
                {
                this.state = 5114;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 204) {
                    {
                    this.state = 5112;
                    this.match(DorisParser.GENERATED);
                    this.state = 5113;
                    this.match(DorisParser.ALWAYS);
                    }
                }

                this.state = 5116;
                this.match(DorisParser.AS);
                this.state = 5117;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5118;
                localContext._generatedExpr = this.expression();
                this.state = 5119;
                this.match(DorisParser.RIGHT_PAREN);
                }
            }

            this.state = 5127;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 311 || _la === 312) {
                {
                this.state = 5124;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 5123;
                    this.match(DorisParser.NOT);
                    }
                }

                this.state = 5126;
                localContext._nullable = this.match(DorisParser.NULL);
                }
            }

            this.state = 5136;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 5129;
                this.match(DorisParser.AUTO_INCREMENT);
                this.state = 5134;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 748, this.context) ) {
                case 1:
                    {
                    this.state = 5130;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 5131;
                    localContext._autoIncInitValue = this.number_();
                    this.state = 5132;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
            }

            this.state = 5156;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 135) {
                {
                this.state = 5138;
                this.match(DorisParser.DEFAULT);
                this.state = 5154;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.NULL:
                    {
                    this.state = 5139;
                    localContext._nullValue = this.match(DorisParser.NULL);
                    }
                    break;
                case DorisParser.INTEGER_VALUE:
                    {
                    this.state = 5140;
                    this.match(DorisParser.INTEGER_VALUE);
                    }
                    break;
                case DorisParser.DECIMAL_VALUE:
                    {
                    this.state = 5141;
                    this.match(DorisParser.DECIMAL_VALUE);
                    }
                    break;
                case DorisParser.PI:
                    {
                    this.state = 5142;
                    this.match(DorisParser.PI);
                    }
                    break;
                case DorisParser.E:
                    {
                    this.state = 5143;
                    this.match(DorisParser.E);
                    }
                    break;
                case DorisParser.BITMAP_EMPTY:
                    {
                    this.state = 5144;
                    this.match(DorisParser.BITMAP_EMPTY);
                    }
                    break;
                case DorisParser.STRING_LITERAL:
                    {
                    this.state = 5145;
                    localContext._stringValue = this.match(DorisParser.STRING_LITERAL);
                    }
                    break;
                case DorisParser.CURRENT_DATE:
                    {
                    this.state = 5146;
                    this.match(DorisParser.CURRENT_DATE);
                    }
                    break;
                case DorisParser.CURRENT_TIMESTAMP:
                    {
                    this.state = 5147;
                    localContext._defaultTimestamp = this.match(DorisParser.CURRENT_TIMESTAMP);
                    this.state = 5152;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 750, this.context) ) {
                    case 1:
                        {
                        this.state = 5148;
                        this.match(DorisParser.LEFT_PAREN);
                        this.state = 5149;
                        localContext._defaultValuePrecision = this.number_();
                        this.state = 5150;
                        this.match(DorisParser.RIGHT_PAREN);
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            this.state = 5167;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 317) {
                {
                this.state = 5158;
                this.match(DorisParser.ON);
                this.state = 5159;
                this.match(DorisParser.UPDATE);
                this.state = 5160;
                this.match(DorisParser.CURRENT_TIMESTAMP);
                this.state = 5165;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 753, this.context) ) {
                case 1:
                    {
                    this.state = 5161;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 5162;
                    localContext._onUpdateValuePrecision = this.number_();
                    this.state = 5163;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
            }

            this.state = 5171;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 5169;
                this.match(DorisParser.COMMENT);
                this.state = 5170;
                localContext._comment = this.match(DorisParser.STRING_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexDefs(): IndexDefsContext {
        let localContext = new IndexDefsContext(this.context, this.state);
        this.enterRule(localContext, 330, DorisParser.RULE_indexDefs);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5173;
            localContext._indexDef = this.indexDef();
            localContext._indexes.push(localContext._indexDef);
            this.state = 5178;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 756, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5174;
                    this.match(DorisParser.COMMA);
                    this.state = 5175;
                    localContext._indexDef = this.indexDef();
                    localContext._indexes.push(localContext._indexDef);
                    }
                    }
                }
                this.state = 5180;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 756, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexDef(): IndexDefContext {
        let localContext = new IndexDefContext(this.context, this.state);
        this.enterRule(localContext, 332, DorisParser.RULE_indexDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5181;
            this.match(DorisParser.INDEX);
            this.state = 5185;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 225) {
                {
                this.state = 5182;
                this.match(DorisParser.IF);
                this.state = 5183;
                this.match(DorisParser.NOT);
                this.state = 5184;
                this.match(DorisParser.EXISTS);
                }
            }

            this.state = 5187;
            localContext._indexName = this.identifier();
            this.state = 5188;
            localContext._cols = this.identifierList();
            this.state = 5191;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 487) {
                {
                this.state = 5189;
                this.match(DorisParser.USING);
                this.state = 5190;
                localContext._indexType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 48 || _la === 242 || _la === 308)) {
                    localContext._indexType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 5198;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 358) {
                {
                this.state = 5193;
                this.match(DorisParser.PROPERTIES);
                this.state = 5194;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5195;
                localContext._properties = this.propertyItemList();
                this.state = 5196;
                this.match(DorisParser.RIGHT_PAREN);
                }
            }

            this.state = 5202;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 5200;
                this.match(DorisParser.COMMENT);
                this.state = 5201;
                localContext._comment = this.match(DorisParser.STRING_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionsDef(): PartitionsDefContext {
        let localContext = new PartitionsDefContext(this.context, this.state);
        this.enterRule(localContext, 334, DorisParser.RULE_partitionsDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5204;
            localContext._partitionDef = this.partitionDef();
            localContext._partitions.push(localContext._partitionDef);
            this.state = 5209;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 5205;
                this.match(DorisParser.COMMA);
                this.state = 5206;
                localContext._partitionDef = this.partitionDef();
                localContext._partitions.push(localContext._partitionDef);
                }
                }
                this.state = 5211;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionDef(): PartitionDefContext {
        let localContext = new PartitionDefContext(this.context, this.state);
        this.enterRule(localContext, 336, DorisParser.RULE_partitionDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5216;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 762, this.context) ) {
            case 1:
                {
                this.state = 5212;
                this.lessThanPartitionDef();
                }
                break;
            case 2:
                {
                this.state = 5213;
                this.fixedPartitionDef();
                }
                break;
            case 3:
                {
                this.state = 5214;
                this.stepPartitionDef();
                }
                break;
            case 4:
                {
                this.state = 5215;
                this.inPartitionDef();
                }
                break;
            }
            this.state = 5222;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 5218;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5219;
                localContext._partitionProperties = this.propertyItemList();
                this.state = 5220;
                this.match(DorisParser.RIGHT_PAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lessThanPartitionDef(): LessThanPartitionDefContext {
        let localContext = new LessThanPartitionDefContext(this.context, this.state);
        this.enterRule(localContext, 338, DorisParser.RULE_lessThanPartitionDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5224;
            this.match(DorisParser.PARTITION);
            this.state = 5228;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 225) {
                {
                this.state = 5225;
                this.match(DorisParser.IF);
                this.state = 5226;
                this.match(DorisParser.NOT);
                this.state = 5227;
                this.match(DorisParser.EXISTS);
                }
            }

            this.state = 5230;
            localContext._partitionName = this.identifier();
            this.state = 5231;
            this.match(DorisParser.VALUES);
            this.state = 5232;
            this.match(DorisParser.LESS);
            this.state = 5233;
            this.match(DorisParser.THAN);
            this.state = 5236;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.MAXVALUE:
                {
                this.state = 5234;
                this.match(DorisParser.MAXVALUE);
                }
                break;
            case DorisParser.LEFT_PAREN:
                {
                this.state = 5235;
                this.partitionValueList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fixedPartitionDef(): FixedPartitionDefContext {
        let localContext = new FixedPartitionDefContext(this.context, this.state);
        this.enterRule(localContext, 340, DorisParser.RULE_fixedPartitionDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5238;
            this.match(DorisParser.PARTITION);
            this.state = 5242;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 225) {
                {
                this.state = 5239;
                this.match(DorisParser.IF);
                this.state = 5240;
                this.match(DorisParser.NOT);
                this.state = 5241;
                this.match(DorisParser.EXISTS);
                }
            }

            this.state = 5244;
            localContext._partitionName = this.identifier();
            this.state = 5245;
            this.match(DorisParser.VALUES);
            this.state = 5246;
            this.match(DorisParser.LEFT_BRACKET);
            this.state = 5247;
            localContext._lower = this.partitionValueList();
            this.state = 5248;
            this.match(DorisParser.COMMA);
            this.state = 5249;
            localContext._upper = this.partitionValueList();
            this.state = 5250;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stepPartitionDef(): StepPartitionDefContext {
        let localContext = new StepPartitionDefContext(this.context, this.state);
        this.enterRule(localContext, 342, DorisParser.RULE_stepPartitionDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5252;
            this.match(DorisParser.FROM);
            this.state = 5253;
            localContext._from_ = this.partitionValueList();
            this.state = 5254;
            this.match(DorisParser.TO);
            this.state = 5255;
            localContext._to = this.partitionValueList();
            this.state = 5256;
            this.match(DorisParser.INTERVAL);
            this.state = 5257;
            localContext._unitsAmount = this.match(DorisParser.INTEGER_VALUE);
            this.state = 5259;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 128 || _la === 222 || _la === 298 || _la === 300 || _la === 409 || _la === 502 || _la === 511) {
                {
                this.state = 5258;
                localContext._unit = this.datetimeUnit();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inPartitionDef(): InPartitionDefContext {
        let localContext = new InPartitionDefContext(this.context, this.state);
        this.enterRule(localContext, 344, DorisParser.RULE_inPartitionDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5261;
            this.match(DorisParser.PARTITION);
            this.state = 5265;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 225) {
                {
                this.state = 5262;
                this.match(DorisParser.IF);
                this.state = 5263;
                this.match(DorisParser.NOT);
                this.state = 5264;
                this.match(DorisParser.EXISTS);
                }
            }

            this.state = 5267;
            localContext._partitionName = this.identifier();
            this.state = 5284;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 771, this.context) ) {
            case 1:
                {
                this.state = 5268;
                this.match(DorisParser.VALUES);
                this.state = 5269;
                this.match(DorisParser.IN);
                this.state = 5282;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 770, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 5270;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 5271;
                    localContext._partitionValueList = this.partitionValueList();
                    localContext._partitionValueLists.push(localContext._partitionValueList);
                    this.state = 5276;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 5272;
                        this.match(DorisParser.COMMA);
                        this.state = 5273;
                        localContext._partitionValueList = this.partitionValueList();
                        localContext._partitionValueLists.push(localContext._partitionValueList);
                        }
                        }
                        this.state = 5278;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 5279;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 5281;
                    localContext._constants = this.partitionValueList();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionValueList(): PartitionValueListContext {
        let localContext = new PartitionValueListContext(this.context, this.state);
        this.enterRule(localContext, 346, DorisParser.RULE_partitionValueList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5286;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 5287;
            localContext._partitionValueDef = this.partitionValueDef();
            localContext._values.push(localContext._partitionValueDef);
            this.state = 5292;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 5288;
                this.match(DorisParser.COMMA);
                this.state = 5289;
                localContext._partitionValueDef = this.partitionValueDef();
                localContext._values.push(localContext._partitionValueDef);
                }
                }
                this.state = 5294;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5295;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionValueDef(): PartitionValueDefContext {
        let localContext = new PartitionValueDefContext(this.context, this.state);
        this.enterRule(localContext, 348, DorisParser.RULE_partitionValueDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5297;
            _la = this.tokenStream.LA(1);
            if(!(_la === 291 || _la === 312 || _la === 538 || _la === 543)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollupDefs(): RollupDefsContext {
        let localContext = new RollupDefsContext(this.context, this.state);
        this.enterRule(localContext, 350, DorisParser.RULE_rollupDefs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5299;
            localContext._rollupDef = this.rollupDef();
            localContext._rollups.push(localContext._rollupDef);
            this.state = 5304;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 5300;
                this.match(DorisParser.COMMA);
                this.state = 5301;
                localContext._rollupDef = this.rollupDef();
                localContext._rollups.push(localContext._rollupDef);
                }
                }
                this.state = 5306;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollupDef(): RollupDefContext {
        let localContext = new RollupDefContext(this.context, this.state);
        this.enterRule(localContext, 352, DorisParser.RULE_rollupDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5307;
            localContext._rollupName = this.identifier();
            this.state = 5308;
            localContext._rollupCols = this.identifierList();
            this.state = 5312;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 157) {
                {
                this.state = 5309;
                this.match(DorisParser.DUPLICATE);
                this.state = 5310;
                this.match(DorisParser.KEY);
                this.state = 5311;
                localContext._dupKeys = this.identifierList();
                }
            }

            this.state = 5315;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 358) {
                {
                this.state = 5314;
                localContext._properties = this.propertyClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggTypeDef(): AggTypeDefContext {
        let localContext = new AggTypeDefContext(this.context, this.state);
        this.enterRule(localContext, 354, DorisParser.RULE_aggTypeDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5317;
            _la = this.tokenStream.LA(1);
            if(!(_la === 50 || _la === 205 || _la === 219 || _la === 290 || _la === 296 || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 1572865) !== 0) || _la === 442)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tabletList(): TabletListContext {
        let localContext = new TabletListContext(this.context, this.state);
        this.enterRule(localContext, 356, DorisParser.RULE_tabletList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5319;
            this.match(DorisParser.TABLET);
            this.state = 5320;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 5321;
            localContext._INTEGER_VALUE = this.match(DorisParser.INTEGER_VALUE);
            localContext._tabletIdList.push(localContext._INTEGER_VALUE);
            this.state = 5326;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 5322;
                this.match(DorisParser.COMMA);
                this.state = 5323;
                localContext._INTEGER_VALUE = this.match(DorisParser.INTEGER_VALUE);
                localContext._tabletIdList.push(localContext._INTEGER_VALUE);
                }
                }
                this.state = 5328;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5329;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inlineTable(): InlineTableContext {
        let localContext = new InlineTableContext(this.context, this.state);
        this.enterRule(localContext, 358, DorisParser.RULE_inlineTable);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5331;
            this.match(DorisParser.VALUES);
            this.state = 5332;
            this.rowConstructor();
            this.state = 5337;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 777, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5333;
                    this.match(DorisParser.COMMA);
                    this.state = 5334;
                    this.rowConstructor();
                    }
                    }
                }
                this.state = 5339;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 777, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedExpression(): NamedExpressionContext {
        let localContext = new NamedExpressionContext(this.context, this.state);
        this.enterRule(localContext, 360, DorisParser.RULE_namedExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5340;
            this.expression();
            this.state = 5345;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 779, this.context) ) {
            case 1:
                {
                this.state = 5342;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30) {
                    {
                    this.state = 5341;
                    this.match(DorisParser.AS);
                    }
                }

                {
                this.state = 5344;
                this.identifierOrText();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        let localContext = new NamedExpressionSeqContext(this.context, this.state);
        this.enterRule(localContext, 362, DorisParser.RULE_namedExpressionSeq);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5347;
            this.namedExpression();
            this.state = 5352;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 780, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5348;
                    this.match(DorisParser.COMMA);
                    this.state = 5349;
                    this.namedExpression();
                    }
                    }
                }
                this.state = 5354;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 780, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 364, DorisParser.RULE_expression);
        try {
            this.state = 5357;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 781, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5355;
                this.booleanExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5356;
                this.lambdaExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambdaExpression(): LambdaExpressionContext {
        let localContext = new LambdaExpressionContext(this.context, this.state);
        this.enterRule(localContext, 366, DorisParser.RULE_lambdaExpression);
        let _la: number;
        try {
            this.state = 5375;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5359;
                localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                localContext._args.push(localContext._errorCapturingIdentifier);
                this.state = 5360;
                this.match(DorisParser.ARROW);
                this.state = 5361;
                localContext._body = this.booleanExpression(0);
                }
                break;
            case DorisParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5363;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5364;
                localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                localContext._args.push(localContext._errorCapturingIdentifier);
                this.state = 5367;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 5365;
                    this.match(DorisParser.COMMA);
                    this.state = 5366;
                    localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                    localContext._args.push(localContext._errorCapturingIdentifier);
                    }
                    }
                    this.state = 5369;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 5371;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 5372;
                this.match(DorisParser.ARROW);
                this.state = 5373;
                localContext._body = this.booleanExpression(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 368;
        this.enterRecursionRule(localContext, 368, DorisParser.RULE_booleanExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5401;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 785, this.context) ) {
            case 1:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 5378;
                this.match(DorisParser.LOGICALNOT);
                this.state = 5379;
                this.booleanExpression(10);
                }
                break;
            case 2:
                {
                localContext = new ExistContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5380;
                this.match(DorisParser.EXISTS);
                this.state = 5381;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5382;
                this.query();
                this.state = 5383;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                localContext = new IsnullContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5385;
                _la = this.tokenStream.LA(1);
                if(!(_la === 247 || _la === 248)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5386;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5387;
                this.valueExpression(0);
                this.state = 5388;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 4:
                {
                localContext = new Is_not_null_predContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5390;
                this.match(DorisParser.IS_NOT_NULL_PRED);
                this.state = 5391;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5392;
                this.valueExpression(0);
                this.state = 5393;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 5:
                {
                localContext = new PredicatedContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5395;
                this.valueExpression(0);
                this.state = 5397;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 784, this.context) ) {
                case 1:
                    {
                    this.state = 5396;
                    this.predicate();
                    }
                    break;
                }
                }
                break;
            case 6:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5399;
                this.match(DorisParser.NOT);
                this.state = 5400;
                this.booleanExpression(5);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 5417;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 787, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 5415;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 786, this.context) ) {
                    case 1:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_booleanExpression);
                        this.state = 5403;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 5404;
                        (localContext as LogicalBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 25 || _la === 526)) {
                            (localContext as LogicalBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 5405;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(5);
                        }
                        break;
                    case 2:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_booleanExpression);
                        this.state = 5406;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 5407;
                        (localContext as LogicalBinaryContext)._operator = this.match(DorisParser.XOR);
                        this.state = 5408;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(4);
                        }
                        break;
                    case 3:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_booleanExpression);
                        this.state = 5409;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 5410;
                        (localContext as LogicalBinaryContext)._operator = this.match(DorisParser.OR);
                        this.state = 5411;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(3);
                        }
                        break;
                    case 4:
                        {
                        localContext = new DoublePipesContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as DoublePipesContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_booleanExpression);
                        this.state = 5412;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 5413;
                        (localContext as DoublePipesContext)._operator = this.match(DorisParser.DOUBLEPIPES);
                        this.state = 5414;
                        (localContext as DoublePipesContext)._right = this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 5419;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 787, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public rowConstructor(): RowConstructorContext {
        let localContext = new RowConstructorContext(this.context, this.state);
        this.enterRule(localContext, 370, DorisParser.RULE_rowConstructor);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5420;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 5429;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824108676) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343357) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294703327) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445375) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 536401791) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 4290488147) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2810112005) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915135) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124779511) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277237887) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984157) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259731579) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 2156429309) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461889683) !== 0)) {
                {
                this.state = 5421;
                this.rowConstructorItem();
                this.state = 5426;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 5422;
                    this.match(DorisParser.COMMA);
                    this.state = 5423;
                    this.rowConstructorItem();
                    }
                    }
                    this.state = 5428;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 5431;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowConstructorItem(): RowConstructorItemContext {
        let localContext = new RowConstructorItemContext(this.context, this.state);
        this.enterRule(localContext, 372, DorisParser.RULE_rowConstructorItem);
        try {
            this.state = 5435;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.LEFT_PAREN:
            case DorisParser.LEFT_BRACKET:
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADD:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BINARY:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CASE:
            case DorisParser.CAST:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATABASE:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXISTS:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.EXTRACT:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FALSE:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IF:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INTERVAL:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.KEY:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LEFT:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LIKE:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NOT:
            case DorisParser.NULL:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLACEHOLDER:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REGEXP:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RIGHT:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRIM:
            case DorisParser.TRUE:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.PLUS:
            case DorisParser.SUBTRACT:
            case DorisParser.ASTERISK:
            case DorisParser.TILDE:
            case DorisParser.LOGICALNOT:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.ATSIGN:
            case DorisParser.DOUBLEATSIGN:
            case DorisParser.STRING_LITERAL:
            case DorisParser.INTEGER_VALUE:
            case DorisParser.EXPONENT_VALUE:
            case DorisParser.DECIMAL_VALUE:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5433;
                this.namedExpression();
                }
                break;
            case DorisParser.DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5434;
                this.match(DorisParser.DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public predicate(): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state);
        this.enterRule(localContext, 374, DorisParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 5488;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 799, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5438;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 5437;
                    this.match(DorisParser.NOT);
                    }
                }

                this.state = 5440;
                localContext._kind = this.match(DorisParser.BETWEEN);
                this.state = 5441;
                localContext._lower = this.valueExpression(0);
                this.state = 5442;
                this.match(DorisParser.AND);
                this.state = 5443;
                localContext._upper = this.valueExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5446;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 5445;
                    this.match(DorisParser.NOT);
                    }
                }

                this.state = 5448;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 267 || _la === 375 || _la === 395)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5449;
                localContext._pattern = this.valueExpression(0);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5451;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 5450;
                    this.match(DorisParser.NOT);
                    }
                }

                this.state = 5453;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 127) !== 0))) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5454;
                localContext._pattern = this.valueExpression(0);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5456;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 5455;
                    this.match(DorisParser.NOT);
                    }
                }

                this.state = 5458;
                localContext._kind = this.match(DorisParser.IN);
                this.state = 5459;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5460;
                this.query();
                this.state = 5461;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5464;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 5463;
                    this.match(DorisParser.NOT);
                    }
                }

                this.state = 5466;
                localContext._kind = this.match(DorisParser.IN);
                this.state = 5467;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5468;
                this.expression();
                this.state = 5473;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 5469;
                    this.match(DorisParser.COMMA);
                    this.state = 5470;
                    this.expression();
                    }
                    }
                    this.state = 5475;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5476;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5478;
                this.match(DorisParser.IS);
                this.state = 5480;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 5479;
                    this.match(DorisParser.NOT);
                    }
                }

                this.state = 5482;
                localContext._kind = this.match(DorisParser.NULL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5483;
                this.match(DorisParser.IS);
                this.state = 5485;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 5484;
                    this.match(DorisParser.NOT);
                    }
                }

                this.state = 5487;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 183 || _la === 470)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 376;
        this.enterRecursionRule(localContext, 376, DorisParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5494;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 800, this.context) ) {
            case 1:
                {
                localContext = new ValueExpressionDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 5491;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                localContext = new ArithmeticUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5492;
                (localContext as ArithmeticUnaryContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & 35) !== 0))) {
                    (localContext as ArithmeticUnaryContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5493;
                this.valueExpression(7);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 5517;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 802, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 5515;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 801, this.context) ) {
                    case 1:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_valueExpression);
                        this.state = 5496;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 5497;
                        (localContext as ArithmeticBinaryContext)._operator = this.match(DorisParser.HAT);
                        this.state = 5498;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(7);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_valueExpression);
                        this.state = 5499;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 5500;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 149 || ((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & 7) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 5501;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(6);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_valueExpression);
                        this.state = 5502;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 5503;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 519 || _la === 520)) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 5504;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(5);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_valueExpression);
                        this.state = 5505;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 5506;
                        (localContext as ArithmeticBinaryContext)._operator = this.match(DorisParser.AMPERSAND);
                        this.state = 5507;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(4);
                        }
                        break;
                    case 5:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_valueExpression);
                        this.state = 5508;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 5509;
                        (localContext as ArithmeticBinaryContext)._operator = this.match(DorisParser.PIPE);
                        this.state = 5510;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(3);
                        }
                        break;
                    case 6:
                        {
                        localContext = new ComparisonContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ComparisonContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_valueExpression);
                        this.state = 5511;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 5512;
                        this.comparisonOperator();
                        this.state = 5513;
                        (localContext as ComparisonContext)._right = this.valueExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 5519;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 802, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public datetimeUnit(): DatetimeUnitContext {
        let localContext = new DatetimeUnitContext(this.context, this.state);
        this.enterRule(localContext, 378, DorisParser.RULE_datetimeUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5520;
            _la = this.tokenStream.LA(1);
            if(!(_la === 128 || _la === 222 || _la === 298 || _la === 300 || _la === 409 || _la === 502 || _la === 511)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 380;
        this.enterRecursionRule(localContext, 380, DorisParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5740;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 820, this.context) ) {
            case 1:
                {
                localContext = new BitOperationContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 5523;
                (localContext as BitOperationContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 47)) & ~0x1F) === 0 && ((1 << (_la - 47)) & 49) !== 0))) {
                    (localContext as BitOperationContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5524;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5525;
                (localContext as BitOperationContext)._left = this.valueExpression(0);
                this.state = 5526;
                this.match(DorisParser.COMMA);
                this.state = 5527;
                (localContext as BitOperationContext)._right = this.valueExpression(0);
                this.state = 5528;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 2:
                {
                localContext = new TimestampdiffContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5530;
                (localContext as TimestampdiffContext)._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 122 || _la === 462)) {
                    (localContext as TimestampdiffContext)._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5531;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5532;
                (localContext as TimestampdiffContext)._unit = this.datetimeUnit();
                this.state = 5533;
                this.match(DorisParser.COMMA);
                this.state = 5534;
                (localContext as TimestampdiffContext)._startTimestamp = this.valueExpression(0);
                this.state = 5535;
                this.match(DorisParser.COMMA);
                this.state = 5536;
                (localContext as TimestampdiffContext)._endTimestamp = this.valueExpression(0);
                this.state = 5537;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                localContext = new TimestampaddContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5539;
                (localContext as TimestampaddContext)._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 121 || _la === 461)) {
                    (localContext as TimestampaddContext)._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5540;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5541;
                (localContext as TimestampaddContext)._unit = this.datetimeUnit();
                this.state = 5542;
                this.match(DorisParser.COMMA);
                this.state = 5543;
                (localContext as TimestampaddContext)._startTimestamp = this.valueExpression(0);
                this.state = 5544;
                this.match(DorisParser.COMMA);
                this.state = 5545;
                (localContext as TimestampaddContext)._endTimestamp = this.valueExpression(0);
                this.state = 5546;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 4:
                {
                localContext = new Date_addContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5548;
                (localContext as Date_addContext)._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 15 || _la === 116 || _la === 129)) {
                    (localContext as Date_addContext)._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5549;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5550;
                (localContext as Date_addContext)._timestamp = this.valueExpression(0);
                this.state = 5551;
                this.match(DorisParser.COMMA);
                this.state = 5557;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 803, this.context) ) {
                case 1:
                    {
                    this.state = 5552;
                    this.match(DorisParser.INTERVAL);
                    this.state = 5553;
                    (localContext as Date_addContext)._unitsAmount = this.valueExpression(0);
                    this.state = 5554;
                    (localContext as Date_addContext)._unit = this.datetimeUnit();
                    }
                    break;
                case 2:
                    {
                    this.state = 5556;
                    (localContext as Date_addContext)._unitsAmount = this.valueExpression(0);
                    }
                    break;
                }
                this.state = 5559;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 5:
                {
                localContext = new Date_subContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5561;
                (localContext as Date_subContext)._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 120 || _la === 130 || _la === 441)) {
                    (localContext as Date_subContext)._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5562;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5563;
                (localContext as Date_subContext)._timestamp = this.valueExpression(0);
                this.state = 5564;
                this.match(DorisParser.COMMA);
                this.state = 5570;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 804, this.context) ) {
                case 1:
                    {
                    this.state = 5565;
                    this.match(DorisParser.INTERVAL);
                    this.state = 5566;
                    (localContext as Date_subContext)._unitsAmount = this.valueExpression(0);
                    this.state = 5567;
                    (localContext as Date_subContext)._unit = this.datetimeUnit();
                    }
                    break;
                case 2:
                    {
                    this.state = 5569;
                    (localContext as Date_subContext)._unitsAmount = this.valueExpression(0);
                    }
                    break;
                }
                this.state = 5572;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 6:
                {
                localContext = new DateFloorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5574;
                (localContext as DateFloorContext)._name = this.match(DorisParser.DATE_FLOOR);
                this.state = 5575;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5576;
                (localContext as DateFloorContext)._timestamp = this.valueExpression(0);
                this.state = 5577;
                this.match(DorisParser.COMMA);
                this.state = 5583;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 805, this.context) ) {
                case 1:
                    {
                    this.state = 5578;
                    this.match(DorisParser.INTERVAL);
                    this.state = 5579;
                    (localContext as DateFloorContext)._unitsAmount = this.valueExpression(0);
                    this.state = 5580;
                    (localContext as DateFloorContext)._unit = this.datetimeUnit();
                    }
                    break;
                case 2:
                    {
                    this.state = 5582;
                    (localContext as DateFloorContext)._unitsAmount = this.valueExpression(0);
                    }
                    break;
                }
                this.state = 5585;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 7:
                {
                localContext = new DateCeilContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5587;
                (localContext as DateCeilContext)._name = this.match(DorisParser.DATE_CEIL);
                this.state = 5588;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5589;
                (localContext as DateCeilContext)._timestamp = this.valueExpression(0);
                this.state = 5590;
                this.match(DorisParser.COMMA);
                this.state = 5596;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 806, this.context) ) {
                case 1:
                    {
                    this.state = 5591;
                    this.match(DorisParser.INTERVAL);
                    this.state = 5592;
                    (localContext as DateCeilContext)._unitsAmount = this.valueExpression(0);
                    this.state = 5593;
                    (localContext as DateCeilContext)._unit = this.datetimeUnit();
                    }
                    break;
                case 2:
                    {
                    this.state = 5595;
                    (localContext as DateCeilContext)._unitsAmount = this.valueExpression(0);
                    }
                    break;
                }
                this.state = 5598;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 8:
                {
                localContext = new ArrayRangeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5600;
                (localContext as ArrayRangeContext)._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 29 || _la === 412)) {
                    (localContext as ArrayRangeContext)._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5601;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5602;
                (localContext as ArrayRangeContext)._start = this.valueExpression(0);
                this.state = 5603;
                this.match(DorisParser.COMMA);
                this.state = 5604;
                (localContext as ArrayRangeContext)._end = this.valueExpression(0);
                this.state = 5605;
                this.match(DorisParser.COMMA);
                this.state = 5611;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 807, this.context) ) {
                case 1:
                    {
                    this.state = 5606;
                    this.match(DorisParser.INTERVAL);
                    this.state = 5607;
                    (localContext as ArrayRangeContext)._unitsAmount = this.valueExpression(0);
                    this.state = 5608;
                    (localContext as ArrayRangeContext)._unit = this.datetimeUnit();
                    }
                    break;
                case 2:
                    {
                    this.state = 5610;
                    (localContext as ArrayRangeContext)._unitsAmount = this.valueExpression(0);
                    }
                    break;
                }
                this.state = 5613;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 9:
                {
                localContext = new CurrentDateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5615;
                (localContext as CurrentDateContext)._name = this.match(DorisParser.CURRENT_DATE);
                }
                break;
            case 10:
                {
                localContext = new CurrentTimeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5616;
                (localContext as CurrentTimeContext)._name = this.match(DorisParser.CURRENT_TIME);
                }
                break;
            case 11:
                {
                localContext = new CurrentTimestampContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5617;
                (localContext as CurrentTimestampContext)._name = this.match(DorisParser.CURRENT_TIMESTAMP);
                }
                break;
            case 12:
                {
                localContext = new LocalTimeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5618;
                (localContext as LocalTimeContext)._name = this.match(DorisParser.LOCALTIME);
                }
                break;
            case 13:
                {
                localContext = new LocalTimestampContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5619;
                (localContext as LocalTimestampContext)._name = this.match(DorisParser.LOCALTIMESTAMP);
                }
                break;
            case 14:
                {
                localContext = new CurrentUserContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5620;
                (localContext as CurrentUserContext)._name = this.match(DorisParser.CURRENT_USER);
                }
                break;
            case 15:
                {
                localContext = new SessionUserContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5621;
                (localContext as SessionUserContext)._name = this.match(DorisParser.SESSION_USER);
                }
                break;
            case 16:
                {
                localContext = new SearchedCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5622;
                this.match(DorisParser.CASE);
                this.state = 5624;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 5623;
                    this.whenClause();
                    }
                    }
                    this.state = 5626;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 503);
                this.state = 5630;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 160) {
                    {
                    this.state = 5628;
                    this.match(DorisParser.ELSE);
                    this.state = 5629;
                    (localContext as SearchedCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 5632;
                this.match(DorisParser.END);
                }
                break;
            case 17:
                {
                localContext = new SimpleCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5634;
                this.match(DorisParser.CASE);
                this.state = 5635;
                (localContext as SimpleCaseContext)._value = this.expression();
                this.state = 5637;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 5636;
                    this.whenClause();
                    }
                    }
                    this.state = 5639;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 503);
                this.state = 5643;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 160) {
                    {
                    this.state = 5641;
                    this.match(DorisParser.ELSE);
                    this.state = 5642;
                    (localContext as SimpleCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 5645;
                this.match(DorisParser.END);
                }
                break;
            case 18:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5647;
                (localContext as CastContext)._name = this.match(DorisParser.CAST);
                this.state = 5648;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5649;
                this.expression();
                this.state = 5650;
                this.match(DorisParser.AS);
                this.state = 5651;
                this.castDataType();
                this.state = 5652;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 19:
                {
                localContext = new ConstantDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5654;
                this.constant();
                }
                break;
            case 20:
                {
                localContext = new IntervalLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5655;
                this.interval();
                }
                break;
            case 21:
                {
                localContext = new StarContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5656;
                this.match(DorisParser.ASTERISK);
                this.state = 5660;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 812, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 5657;
                        this.exceptOrReplace();
                        }
                        }
                    }
                    this.state = 5662;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 812, this.context);
                }
                }
                break;
            case 22:
                {
                localContext = new StarContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5663;
                this.qualifiedName();
                this.state = 5664;
                this.match(DorisParser.DOT);
                this.state = 5665;
                this.match(DorisParser.ASTERISK);
                this.state = 5669;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 813, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 5666;
                        this.exceptOrReplace();
                        }
                        }
                    }
                    this.state = 5671;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 813, this.context);
                }
                }
                break;
            case 23:
                {
                localContext = new CharFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5672;
                this.match(DorisParser.CHAR);
                this.state = 5673;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5674;
                (localContext as CharFunctionContext)._expression = this.expression();
                (localContext as CharFunctionContext)._arguments.push((localContext as CharFunctionContext)._expression);
                this.state = 5679;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 5675;
                    this.match(DorisParser.COMMA);
                    this.state = 5676;
                    (localContext as CharFunctionContext)._expression = this.expression();
                    (localContext as CharFunctionContext)._arguments.push((localContext as CharFunctionContext)._expression);
                    }
                    }
                    this.state = 5681;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5684;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 487) {
                    {
                    this.state = 5682;
                    this.match(DorisParser.USING);
                    this.state = 5683;
                    (localContext as CharFunctionContext)._charSet = this.identifierOrText();
                    }
                }

                this.state = 5686;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 24:
                {
                localContext = new ConvertCharSetContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5688;
                this.match(DorisParser.CONVERT);
                this.state = 5689;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5690;
                (localContext as ConvertCharSetContext)._argument = this.expression();
                this.state = 5691;
                this.match(DorisParser.USING);
                this.state = 5692;
                (localContext as ConvertCharSetContext)._charSet = this.identifierOrText();
                this.state = 5693;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 25:
                {
                localContext = new ConvertTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5695;
                this.match(DorisParser.CONVERT);
                this.state = 5696;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5697;
                (localContext as ConvertTypeContext)._argument = this.expression();
                this.state = 5698;
                this.match(DorisParser.COMMA);
                this.state = 5699;
                this.castDataType();
                this.state = 5700;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 26:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5702;
                this.functionCallExpression();
                }
                break;
            case 27:
                {
                localContext = new SubqueryExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5703;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5704;
                this.query();
                this.state = 5705;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 28:
                {
                localContext = new UserVariableContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5707;
                this.match(DorisParser.ATSIGN);
                this.state = 5708;
                this.identifierOrText();
                }
                break;
            case 29:
                {
                localContext = new SystemVariableContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5709;
                this.match(DorisParser.DOUBLEATSIGN);
                this.state = 5712;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 816, this.context) ) {
                case 1:
                    {
                    this.state = 5710;
                    (localContext as SystemVariableContext)._kind = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 206 || _la === 414)) {
                        (localContext as SystemVariableContext)._kind = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5711;
                    this.match(DorisParser.DOT);
                    }
                    break;
                }
                this.state = 5714;
                this.identifier();
                }
                break;
            case 30:
                {
                localContext = new ColumnReferenceContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5716;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 5715;
                    this.match(DorisParser.BINARY);
                    }
                }

                this.state = 5718;
                this.identifier();
                }
                break;
            case 31:
                {
                localContext = new ParenthesizedExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5719;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5720;
                this.expression();
                this.state = 5721;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case 32:
                {
                localContext = new EncryptKeyContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5723;
                this.match(DorisParser.KEY);
                this.state = 5727;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 818, this.context) ) {
                case 1:
                    {
                    this.state = 5724;
                    (localContext as EncryptKeyContext)._dbName = this.identifier();
                    this.state = 5725;
                    this.match(DorisParser.DOT);
                    }
                    break;
                }
                this.state = 5729;
                (localContext as EncryptKeyContext)._keyName = this.identifier();
                }
                break;
            case 33:
                {
                localContext = new ExtractContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 5730;
                this.match(DorisParser.EXTRACT);
                this.state = 5731;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5732;
                (localContext as ExtractContext)._field = this.identifier();
                this.state = 5733;
                this.match(DorisParser.FROM);
                this.state = 5735;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 819, this.context) ) {
                case 1:
                    {
                    this.state = 5734;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 115 || _la === 460)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 5737;
                (localContext as ExtractContext)._source = this.valueExpression(0);
                this.state = 5738;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 5768;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 824, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 5766;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 823, this.context) ) {
                    case 1:
                        {
                        localContext = new ElementAtContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as ElementAtContext)._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_primaryExpression);
                        this.state = 5742;
                        if (!(this.precpred(this.context, 11))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 11)");
                        }
                        this.state = 5743;
                        this.match(DorisParser.LEFT_BRACKET);
                        this.state = 5744;
                        (localContext as ElementAtContext)._index = this.valueExpression(0);
                        this.state = 5745;
                        this.match(DorisParser.RIGHT_BRACKET);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArraySliceContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as ArraySliceContext)._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_primaryExpression);
                        this.state = 5747;
                        if (!(this.precpred(this.context, 10))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 10)");
                        }
                        this.state = 5748;
                        this.match(DorisParser.LEFT_BRACKET);
                        this.state = 5749;
                        (localContext as ArraySliceContext)._begin = this.valueExpression(0);
                        this.state = 5750;
                        this.match(DorisParser.COLON);
                        this.state = 5752;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 824108676) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343357) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294703327) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 536385407) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 4290488147) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2810112005) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915135) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124648439) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277237887) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984157) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259731579) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 2156429309) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461889555) !== 0)) {
                            {
                            this.state = 5751;
                            (localContext as ArraySliceContext)._end = this.valueExpression(0);
                            }
                        }

                        this.state = 5754;
                        this.match(DorisParser.RIGHT_BRACKET);
                        }
                        break;
                    case 3:
                        {
                        localContext = new DereferenceContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as DereferenceContext)._base = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_primaryExpression);
                        this.state = 5756;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 5757;
                        this.match(DorisParser.DOT);
                        this.state = 5758;
                        (localContext as DereferenceContext)._fieldName = this.identifier();
                        }
                        break;
                    case 4:
                        {
                        localContext = new CollateContext(new PrimaryExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, DorisParser.RULE_primaryExpression);
                        this.state = 5759;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 5760;
                        this.match(DorisParser.COLLATE);
                        this.state = 5764;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case DorisParser.LEFT_BRACE:
                        case DorisParser.RIGHT_BRACE:
                        case DorisParser.ACTIONS:
                        case DorisParser.ADDDATE:
                        case DorisParser.AFTER:
                        case DorisParser.AGG_STATE:
                        case DorisParser.AGGREGATE:
                        case DorisParser.ALIAS:
                        case DorisParser.ANALYZED:
                        case DorisParser.ARRAY:
                        case DorisParser.ARRAY_RANGE:
                        case DorisParser.AT:
                        case DorisParser.AUTHORS:
                        case DorisParser.AUTO_INCREMENT:
                        case DorisParser.ALWAYS:
                        case DorisParser.BACKENDS:
                        case DorisParser.BACKUP:
                        case DorisParser.BEGIN:
                        case DorisParser.BELONG:
                        case DorisParser.BIN:
                        case DorisParser.BITAND:
                        case DorisParser.BITMAP:
                        case DorisParser.BITMAP_EMPTY:
                        case DorisParser.BITMAP_UNION:
                        case DorisParser.BITOR:
                        case DorisParser.BITXOR:
                        case DorisParser.BLOB:
                        case DorisParser.BOOLEAN:
                        case DorisParser.BRIEF:
                        case DorisParser.BROKER:
                        case DorisParser.BUCKETS:
                        case DorisParser.BUILD:
                        case DorisParser.BUILTIN:
                        case DorisParser.BULK:
                        case DorisParser.CACHE:
                        case DorisParser.CACHED:
                        case DorisParser.CALL:
                        case DorisParser.CATALOG:
                        case DorisParser.CATALOGS:
                        case DorisParser.CHAIN:
                        case DorisParser.CHAR:
                        case DorisParser.CHARSET:
                        case DorisParser.CHECK:
                        case DorisParser.CLUSTER:
                        case DorisParser.CLUSTERS:
                        case DorisParser.COLLATION:
                        case DorisParser.COLLECT:
                        case DorisParser.COLOCATE:
                        case DorisParser.COLUMNS:
                        case DorisParser.COMMENT:
                        case DorisParser.COMMIT:
                        case DorisParser.COMMITTED:
                        case DorisParser.COMPACT:
                        case DorisParser.COMPLETE:
                        case DorisParser.COMPRESS_TYPE:
                        case DorisParser.COMPUTE:
                        case DorisParser.CONDITIONS:
                        case DorisParser.CONFIG:
                        case DorisParser.CONNECTION:
                        case DorisParser.CONNECTION_ID:
                        case DorisParser.CONSISTENT:
                        case DorisParser.CONSTRAINTS:
                        case DorisParser.CONVERT:
                        case DorisParser.CONVERT_LSC:
                        case DorisParser.COPY:
                        case DorisParser.COUNT:
                        case DorisParser.CREATION:
                        case DorisParser.CRON:
                        case DorisParser.CURRENT_CATALOG:
                        case DorisParser.CURRENT_DATE:
                        case DorisParser.CURRENT_TIME:
                        case DorisParser.CURRENT_TIMESTAMP:
                        case DorisParser.CURRENT_USER:
                        case DorisParser.DATA:
                        case DorisParser.DATE:
                        case DorisParser.DATE_ADD:
                        case DorisParser.DATE_CEIL:
                        case DorisParser.DATE_DIFF:
                        case DorisParser.DATE_FLOOR:
                        case DorisParser.DATE_SUB:
                        case DorisParser.DATEADD:
                        case DorisParser.DATEDIFF:
                        case DorisParser.DATETIME:
                        case DorisParser.DATETIMEV2:
                        case DorisParser.DATEV2:
                        case DorisParser.DATETIMEV1:
                        case DorisParser.DATEV1:
                        case DorisParser.DAY:
                        case DorisParser.DAYS_ADD:
                        case DorisParser.DAYS_SUB:
                        case DorisParser.DECIMAL:
                        case DorisParser.DECIMALV2:
                        case DorisParser.DECIMALV3:
                        case DorisParser.DEFERRED:
                        case DorisParser.DEMAND:
                        case DorisParser.DIAGNOSE:
                        case DorisParser.DIAGNOSIS:
                        case DorisParser.DISTINCTPC:
                        case DorisParser.DISTINCTPCSA:
                        case DorisParser.DO:
                        case DorisParser.DORIS_INTERNAL_TABLE_ID:
                        case DorisParser.DUAL:
                        case DorisParser.DYNAMIC:
                        case DorisParser.E:
                        case DorisParser.ENABLE:
                        case DorisParser.ENCRYPTKEY:
                        case DorisParser.ENCRYPTKEYS:
                        case DorisParser.END:
                        case DorisParser.ENDS:
                        case DorisParser.ENGINE:
                        case DorisParser.ENGINES:
                        case DorisParser.ERRORS:
                        case DorisParser.EVENTS:
                        case DorisParser.EVERY:
                        case DorisParser.EXCLUDE:
                        case DorisParser.EXPIRED:
                        case DorisParser.EXTERNAL:
                        case DorisParser.FAILED_LOGIN_ATTEMPTS:
                        case DorisParser.FAST:
                        case DorisParser.FEATURE:
                        case DorisParser.FIELDS:
                        case DorisParser.FILE:
                        case DorisParser.FILTER:
                        case DorisParser.FIRST:
                        case DorisParser.FORMAT:
                        case DorisParser.FREE:
                        case DorisParser.FRONTENDS:
                        case DorisParser.FUNCTION:
                        case DorisParser.GENERATED:
                        case DorisParser.GENERIC:
                        case DorisParser.GLOBAL:
                        case DorisParser.GRAPH:
                        case DorisParser.GROUPING:
                        case DorisParser.GROUPS:
                        case DorisParser.HASH:
                        case DorisParser.HDFS:
                        case DorisParser.HELP:
                        case DorisParser.HISTOGRAM:
                        case DorisParser.HLL_UNION:
                        case DorisParser.HOSTNAME:
                        case DorisParser.HOTSPOT:
                        case DorisParser.HOUR:
                        case DorisParser.HUB:
                        case DorisParser.IDENTIFIED:
                        case DorisParser.IGNORE:
                        case DorisParser.IMMEDIATE:
                        case DorisParser.INCREMENTAL:
                        case DorisParser.INDEXES:
                        case DorisParser.INVERTED:
                        case DorisParser.IPV4:
                        case DorisParser.IPV6:
                        case DorisParser.IS_NOT_NULL_PRED:
                        case DorisParser.IS_NULL_PRED:
                        case DorisParser.ISNULL:
                        case DorisParser.ISOLATION:
                        case DorisParser.JOB:
                        case DorisParser.JOBS:
                        case DorisParser.JSON:
                        case DorisParser.JSONB:
                        case DorisParser.LABEL:
                        case DorisParser.LAST:
                        case DorisParser.LDAP:
                        case DorisParser.LDAP_ADMIN_PASSWORD:
                        case DorisParser.LESS:
                        case DorisParser.LEVEL:
                        case DorisParser.LINES:
                        case DorisParser.LINK:
                        case DorisParser.LOCAL:
                        case DorisParser.LOCALTIME:
                        case DorisParser.LOCALTIMESTAMP:
                        case DorisParser.LOCATION:
                        case DorisParser.LOCK:
                        case DorisParser.LOGICAL:
                        case DorisParser.MANUAL:
                        case DorisParser.MAP:
                        case DorisParser.MATCH_ALL:
                        case DorisParser.MATCH_ANY:
                        case DorisParser.MATCH_PHRASE:
                        case DorisParser.MATCH_PHRASE_EDGE:
                        case DorisParser.MATCH_PHRASE_PREFIX:
                        case DorisParser.MATCH_REGEXP:
                        case DorisParser.MATERIALIZED:
                        case DorisParser.MAX:
                        case DorisParser.MEMO:
                        case DorisParser.MERGE:
                        case DorisParser.MIGRATE:
                        case DorisParser.MIGRATIONS:
                        case DorisParser.MIN:
                        case DorisParser.MINUTE:
                        case DorisParser.MODIFY:
                        case DorisParser.MONTH:
                        case DorisParser.MTMV:
                        case DorisParser.NAME:
                        case DorisParser.NAMES:
                        case DorisParser.NEGATIVE:
                        case DorisParser.NEVER:
                        case DorisParser.NEXT:
                        case DorisParser.NGRAM_BF:
                        case DorisParser.NO:
                        case DorisParser.NON_NULLABLE:
                        case DorisParser.NULLS:
                        case DorisParser.OF:
                        case DorisParser.OFFSET:
                        case DorisParser.ONLY:
                        case DorisParser.OPEN:
                        case DorisParser.OPTIMIZED:
                        case DorisParser.PARAMETER:
                        case DorisParser.PARSED:
                        case DorisParser.PARTITIONS:
                        case DorisParser.PASSWORD:
                        case DorisParser.PASSWORD_EXPIRE:
                        case DorisParser.PASSWORD_HISTORY:
                        case DorisParser.PASSWORD_LOCK_TIME:
                        case DorisParser.PASSWORD_REUSE:
                        case DorisParser.PATH:
                        case DorisParser.PAUSE:
                        case DorisParser.PERCENT:
                        case DorisParser.PERIOD:
                        case DorisParser.PERMISSIVE:
                        case DorisParser.PHYSICAL:
                        case DorisParser.PI:
                        case DorisParser.PLAN:
                        case DorisParser.PRIVILEGES:
                        case DorisParser.PROCESS:
                        case DorisParser.PLUGIN:
                        case DorisParser.PLUGINS:
                        case DorisParser.POLICY:
                        case DorisParser.PROC:
                        case DorisParser.PROCESSLIST:
                        case DorisParser.PROFILE:
                        case DorisParser.PROPERTIES:
                        case DorisParser.PROPERTY:
                        case DorisParser.QUANTILE_STATE:
                        case DorisParser.QUANTILE_UNION:
                        case DorisParser.QUERY:
                        case DorisParser.QUOTA:
                        case DorisParser.QUALIFY:
                        case DorisParser.RANDOM:
                        case DorisParser.RECENT:
                        case DorisParser.RECOVER:
                        case DorisParser.RECYCLE:
                        case DorisParser.REFRESH:
                        case DorisParser.REPEATABLE:
                        case DorisParser.REPLACE:
                        case DorisParser.REPLACE_IF_NOT_NULL:
                        case DorisParser.REPLAYER:
                        case DorisParser.REPOSITORIES:
                        case DorisParser.REPOSITORY:
                        case DorisParser.RESOURCE:
                        case DorisParser.RESOURCES:
                        case DorisParser.RESTORE:
                        case DorisParser.RESTRICTIVE:
                        case DorisParser.RESUME:
                        case DorisParser.RETURNS:
                        case DorisParser.REWRITTEN:
                        case DorisParser.RLIKE:
                        case DorisParser.ROLLBACK:
                        case DorisParser.ROLLUP:
                        case DorisParser.ROUTINE:
                        case DorisParser.S3:
                        case DorisParser.SAMPLE:
                        case DorisParser.SCHEDULE:
                        case DorisParser.SCHEDULER:
                        case DorisParser.SCHEMA:
                        case DorisParser.SECOND:
                        case DorisParser.SEQUENCE:
                        case DorisParser.SERIALIZABLE:
                        case DorisParser.SESSION:
                        case DorisParser.SESSION_USER:
                        case DorisParser.SET_SESSION_VARIABLE:
                        case DorisParser.SHAPE:
                        case DorisParser.SKEW:
                        case DorisParser.SNAPSHOT:
                        case DorisParser.SONAME:
                        case DorisParser.SPLIT:
                        case DorisParser.SQL:
                        case DorisParser.STAGE:
                        case DorisParser.STAGES:
                        case DorisParser.START:
                        case DorisParser.STARTS:
                        case DorisParser.STATS:
                        case DorisParser.STATUS:
                        case DorisParser.STOP:
                        case DorisParser.STORAGE:
                        case DorisParser.STREAM:
                        case DorisParser.STREAMING:
                        case DorisParser.STRING:
                        case DorisParser.STRUCT:
                        case DorisParser.SUBDATE:
                        case DorisParser.SUM:
                        case DorisParser.TABLES:
                        case DorisParser.TASK:
                        case DorisParser.TASKS:
                        case DorisParser.TEMPORARY:
                        case DorisParser.TEXT:
                        case DorisParser.THAN:
                        case DorisParser.TIME:
                        case DorisParser.TIMESTAMP:
                        case DorisParser.TIMESTAMPADD:
                        case DorisParser.TIMESTAMPDIFF:
                        case DorisParser.TRANSACTION:
                        case DorisParser.TREE:
                        case DorisParser.TRIGGERS:
                        case DorisParser.TRUNCATE:
                        case DorisParser.TYPE:
                        case DorisParser.TYPES:
                        case DorisParser.UNCOMMITTED:
                        case DorisParser.UNLOCK:
                        case DorisParser.UNSET:
                        case DorisParser.UP:
                        case DorisParser.USER:
                        case DorisParser.VALUE:
                        case DorisParser.VARCHAR:
                        case DorisParser.VARIABLE:
                        case DorisParser.VARIABLES:
                        case DorisParser.VARIANT:
                        case DorisParser.VAULT:
                        case DorisParser.VAULTS:
                        case DorisParser.VERBOSE:
                        case DorisParser.VERSION:
                        case DorisParser.VIEW:
                        case DorisParser.VIEWS:
                        case DorisParser.WARM:
                        case DorisParser.WARNINGS:
                        case DorisParser.WEEK:
                        case DorisParser.WORK:
                        case DorisParser.YEAR:
                        case DorisParser.HINT_START:
                        case DorisParser.HINT_END:
                        case DorisParser.COMMENT_START:
                        case DorisParser.IDENTIFIER:
                        case DorisParser.BACKQUOTED_IDENTIFIER:
                            {
                            this.state = 5761;
                            this.identifier();
                            }
                            break;
                        case DorisParser.STRING_LITERAL:
                            {
                            this.state = 5762;
                            this.match(DorisParser.STRING_LITERAL);
                            }
                            break;
                        case DorisParser.DEFAULT:
                            {
                            this.state = 5763;
                            this.match(DorisParser.DEFAULT);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 5770;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 824, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public exceptOrReplace(): ExceptOrReplaceContext {
        let localContext = new ExceptOrReplaceContext(this.context, this.state);
        this.enterRule(localContext, 382, DorisParser.RULE_exceptOrReplace);
        try {
            this.state = 5781;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.EXCEPT:
                localContext = new ExceptContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5771;
                this.match(DorisParser.EXCEPT);
                this.state = 5772;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5773;
                this.namedExpressionSeq();
                this.state = 5774;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            case DorisParser.REPLACE:
                localContext = new ReplaceContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5776;
                this.match(DorisParser.REPLACE);
                this.state = 5777;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 5778;
                this.namedExpressionSeq();
                this.state = 5779;
                this.match(DorisParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public castDataType(): CastDataTypeContext {
        let localContext = new CastDataTypeContext(this.context, this.state);
        this.enterRule(localContext, 384, DorisParser.RULE_castDataType);
        let _la: number;
        try {
            this.state = 5788;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.AGG_STATE:
            case DorisParser.ALL:
            case DorisParser.ARRAY:
            case DorisParser.BIGINT:
            case DorisParser.BITMAP:
            case DorisParser.BOOLEAN:
            case DorisParser.CHAR:
            case DorisParser.DATE:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DOUBLE:
            case DorisParser.FLOAT:
            case DorisParser.HLL:
            case DorisParser.INT:
            case DorisParser.INTEGER:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LARGEINT:
            case DorisParser.MAP:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.SMALLINT:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.TEXT:
            case DorisParser.TIME:
            case DorisParser.TINYINT:
            case DorisParser.VARCHAR:
            case DorisParser.VARIANT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5783;
                this.dataType();
                }
                break;
            case DorisParser.SIGNED:
            case DorisParser.UNSIGNED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5784;
                _la = this.tokenStream.LA(1);
                if(!(_la === 421 || _la === 482)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5786;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 236 || _la === 237) {
                    {
                    this.state = 5785;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 236 || _la === 237)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionCallExpression(): FunctionCallExpressionContext {
        let localContext = new FunctionCallExpressionContext(this.context, this.state);
        this.enterRule(localContext, 386, DorisParser.RULE_functionCallExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5790;
            this.functionIdentifier();
            this.state = 5791;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 5815;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 826205828) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758076891) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343357) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294703327) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368510783) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 536401791) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 4290488147) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2810112005) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915135) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124779511) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908829179) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277237887) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984157) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259731579) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 2156429309) !== 0) || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 461889683) !== 0)) {
                {
                this.state = 5793;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 21 || _la === 144) {
                    {
                    this.state = 5792;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 21 || _la === 144)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 5795;
                localContext._expression = this.expression();
                localContext._arguments.push(localContext._expression);
                this.state = 5800;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 5796;
                    this.match(DorisParser.COMMA);
                    this.state = 5797;
                    localContext._expression = this.expression();
                    localContext._arguments.push(localContext._expression);
                    }
                    }
                    this.state = 5802;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5813;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 322) {
                    {
                    this.state = 5803;
                    this.match(DorisParser.ORDER);
                    this.state = 5804;
                    this.match(DorisParser.BY);
                    this.state = 5805;
                    this.sortItem();
                    this.state = 5810;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 5806;
                        this.match(DorisParser.COMMA);
                        this.state = 5807;
                        this.sortItem();
                        }
                        }
                        this.state = 5812;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
            }

            this.state = 5817;
            this.match(DorisParser.RIGHT_PAREN);
            this.state = 5820;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 833, this.context) ) {
            case 1:
                {
                this.state = 5818;
                this.match(DorisParser.OVER);
                this.state = 5819;
                this.windowSpec();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionIdentifier(): FunctionIdentifierContext {
        let localContext = new FunctionIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 388, DorisParser.RULE_functionIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5825;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 834, this.context) ) {
            case 1:
                {
                this.state = 5822;
                localContext._dbName = this.identifier();
                this.state = 5823;
                this.match(DorisParser.DOT);
                }
                break;
            }
            this.state = 5827;
            this.functionNameIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameIdentifier(): FunctionNameIdentifierContext {
        let localContext = new FunctionNameIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 390, DorisParser.RULE_functionNameIdentifier);
        try {
            this.state = 5845;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 835, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5829;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5830;
                this.match(DorisParser.ADD);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5831;
                this.match(DorisParser.CONNECTION_ID);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5832;
                this.match(DorisParser.CURRENT_CATALOG);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5833;
                this.match(DorisParser.CURRENT_USER);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5834;
                this.match(DorisParser.DATABASE);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5835;
                this.match(DorisParser.IF);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5836;
                this.match(DorisParser.LEFT);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5837;
                this.match(DorisParser.LIKE);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 5838;
                this.match(DorisParser.PASSWORD);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 5839;
                this.match(DorisParser.REGEXP);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 5840;
                this.match(DorisParser.RIGHT);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 5841;
                this.match(DorisParser.SCHEMA);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 5842;
                this.match(DorisParser.SESSION_USER);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 5843;
                this.match(DorisParser.TRIM);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 5844;
                this.match(DorisParser.USER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpec(): WindowSpecContext {
        let localContext = new WindowSpecContext(this.context, this.state);
        this.enterRule(localContext, 392, DorisParser.RULE_windowSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5847;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 5849;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 329) {
                {
                this.state = 5848;
                this.partitionClause();
                }
            }

            this.state = 5852;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 322) {
                {
                this.state = 5851;
                this.sortClause();
                }
            }

            this.state = 5855;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 366 || _la === 402) {
                {
                this.state = 5854;
                this.windowFrame();
                }
            }

            this.state = 5857;
            this.match(DorisParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 394, DorisParser.RULE_windowFrame);
        try {
            this.state = 5868;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 839, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5859;
                this.frameUnits();
                this.state = 5860;
                localContext._start = this.frameBoundary();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5862;
                this.frameUnits();
                this.state = 5863;
                this.match(DorisParser.BETWEEN);
                this.state = 5864;
                localContext._start = this.frameBoundary();
                this.state = 5865;
                this.match(DorisParser.AND);
                this.state = 5866;
                localContext._end = this.frameBoundary();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameUnits(): FrameUnitsContext {
        let localContext = new FrameUnitsContext(this.context, this.state);
        this.enterRule(localContext, 396, DorisParser.RULE_frameUnits);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5870;
            _la = this.tokenStream.LA(1);
            if(!(_la === 366 || _la === 402)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBoundary(): FrameBoundaryContext {
        let localContext = new FrameBoundaryContext(this.context, this.state);
        this.enterRule(localContext, 398, DorisParser.RULE_frameBoundary);
        let _la: number;
        try {
            this.state = 5879;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.UNBOUNDED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5872;
                this.match(DorisParser.UNBOUNDED);
                this.state = 5873;
                localContext._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 192 || _la === 351)) {
                    localContext._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case DorisParser.CURRENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5874;
                localContext._boundType = this.match(DorisParser.CURRENT);
                this.state = 5875;
                this.match(DorisParser.ROW);
                }
                break;
            case DorisParser.LEFT_PAREN:
            case DorisParser.LEFT_BRACKET:
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADD:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BINARY:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CASE:
            case DorisParser.CAST:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATABASE:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXISTS:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.EXTRACT:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FALSE:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IF:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INTERVAL:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.KEY:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LEFT:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LIKE:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NOT:
            case DorisParser.NULL:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLACEHOLDER:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REGEXP:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RIGHT:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRIM:
            case DorisParser.TRUE:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.PLUS:
            case DorisParser.SUBTRACT:
            case DorisParser.ASTERISK:
            case DorisParser.TILDE:
            case DorisParser.LOGICALNOT:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
            case DorisParser.ATSIGN:
            case DorisParser.DOUBLEATSIGN:
            case DorisParser.STRING_LITERAL:
            case DorisParser.INTEGER_VALUE:
            case DorisParser.EXPONENT_VALUE:
            case DorisParser.DECIMAL_VALUE:
            case DorisParser.IDENTIFIER:
            case DorisParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5876;
                this.expression();
                this.state = 5877;
                localContext._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 192 || _la === 351)) {
                    localContext._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 400, DorisParser.RULE_qualifiedName);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5881;
            this.identifier();
            this.state = 5886;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 841, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5882;
                    this.match(DorisParser.DOT);
                    this.state = 5883;
                    this.identifier();
                    }
                    }
                }
                this.state = 5888;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 841, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public specifiedPartition(): SpecifiedPartitionContext {
        let localContext = new SpecifiedPartitionContext(this.context, this.state);
        this.enterRule(localContext, 402, DorisParser.RULE_specifiedPartition);
        let _la: number;
        try {
            this.state = 5902;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 845, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5890;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 454) {
                    {
                    this.state = 5889;
                    this.match(DorisParser.TEMPORARY);
                    }
                }

                this.state = 5892;
                this.match(DorisParser.PARTITION);
                this.state = 5895;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case DorisParser.LEFT_BRACE:
                case DorisParser.RIGHT_BRACE:
                case DorisParser.ACTIONS:
                case DorisParser.ADDDATE:
                case DorisParser.AFTER:
                case DorisParser.AGG_STATE:
                case DorisParser.AGGREGATE:
                case DorisParser.ALIAS:
                case DorisParser.ANALYZED:
                case DorisParser.ARRAY:
                case DorisParser.ARRAY_RANGE:
                case DorisParser.AT:
                case DorisParser.AUTHORS:
                case DorisParser.AUTO_INCREMENT:
                case DorisParser.ALWAYS:
                case DorisParser.BACKENDS:
                case DorisParser.BACKUP:
                case DorisParser.BEGIN:
                case DorisParser.BELONG:
                case DorisParser.BIN:
                case DorisParser.BITAND:
                case DorisParser.BITMAP:
                case DorisParser.BITMAP_EMPTY:
                case DorisParser.BITMAP_UNION:
                case DorisParser.BITOR:
                case DorisParser.BITXOR:
                case DorisParser.BLOB:
                case DorisParser.BOOLEAN:
                case DorisParser.BRIEF:
                case DorisParser.BROKER:
                case DorisParser.BUCKETS:
                case DorisParser.BUILD:
                case DorisParser.BUILTIN:
                case DorisParser.BULK:
                case DorisParser.CACHE:
                case DorisParser.CACHED:
                case DorisParser.CALL:
                case DorisParser.CATALOG:
                case DorisParser.CATALOGS:
                case DorisParser.CHAIN:
                case DorisParser.CHAR:
                case DorisParser.CHARSET:
                case DorisParser.CHECK:
                case DorisParser.CLUSTER:
                case DorisParser.CLUSTERS:
                case DorisParser.COLLATION:
                case DorisParser.COLLECT:
                case DorisParser.COLOCATE:
                case DorisParser.COLUMNS:
                case DorisParser.COMMENT:
                case DorisParser.COMMIT:
                case DorisParser.COMMITTED:
                case DorisParser.COMPACT:
                case DorisParser.COMPLETE:
                case DorisParser.COMPRESS_TYPE:
                case DorisParser.COMPUTE:
                case DorisParser.CONDITIONS:
                case DorisParser.CONFIG:
                case DorisParser.CONNECTION:
                case DorisParser.CONNECTION_ID:
                case DorisParser.CONSISTENT:
                case DorisParser.CONSTRAINTS:
                case DorisParser.CONVERT:
                case DorisParser.CONVERT_LSC:
                case DorisParser.COPY:
                case DorisParser.COUNT:
                case DorisParser.CREATION:
                case DorisParser.CRON:
                case DorisParser.CURRENT_CATALOG:
                case DorisParser.CURRENT_DATE:
                case DorisParser.CURRENT_TIME:
                case DorisParser.CURRENT_TIMESTAMP:
                case DorisParser.CURRENT_USER:
                case DorisParser.DATA:
                case DorisParser.DATE:
                case DorisParser.DATE_ADD:
                case DorisParser.DATE_CEIL:
                case DorisParser.DATE_DIFF:
                case DorisParser.DATE_FLOOR:
                case DorisParser.DATE_SUB:
                case DorisParser.DATEADD:
                case DorisParser.DATEDIFF:
                case DorisParser.DATETIME:
                case DorisParser.DATETIMEV2:
                case DorisParser.DATEV2:
                case DorisParser.DATETIMEV1:
                case DorisParser.DATEV1:
                case DorisParser.DAY:
                case DorisParser.DAYS_ADD:
                case DorisParser.DAYS_SUB:
                case DorisParser.DECIMAL:
                case DorisParser.DECIMALV2:
                case DorisParser.DECIMALV3:
                case DorisParser.DEFERRED:
                case DorisParser.DEMAND:
                case DorisParser.DIAGNOSE:
                case DorisParser.DIAGNOSIS:
                case DorisParser.DISTINCTPC:
                case DorisParser.DISTINCTPCSA:
                case DorisParser.DO:
                case DorisParser.DORIS_INTERNAL_TABLE_ID:
                case DorisParser.DUAL:
                case DorisParser.DYNAMIC:
                case DorisParser.E:
                case DorisParser.ENABLE:
                case DorisParser.ENCRYPTKEY:
                case DorisParser.ENCRYPTKEYS:
                case DorisParser.END:
                case DorisParser.ENDS:
                case DorisParser.ENGINE:
                case DorisParser.ENGINES:
                case DorisParser.ERRORS:
                case DorisParser.EVENTS:
                case DorisParser.EVERY:
                case DorisParser.EXCLUDE:
                case DorisParser.EXPIRED:
                case DorisParser.EXTERNAL:
                case DorisParser.FAILED_LOGIN_ATTEMPTS:
                case DorisParser.FAST:
                case DorisParser.FEATURE:
                case DorisParser.FIELDS:
                case DorisParser.FILE:
                case DorisParser.FILTER:
                case DorisParser.FIRST:
                case DorisParser.FORMAT:
                case DorisParser.FREE:
                case DorisParser.FRONTENDS:
                case DorisParser.FUNCTION:
                case DorisParser.GENERATED:
                case DorisParser.GENERIC:
                case DorisParser.GLOBAL:
                case DorisParser.GRAPH:
                case DorisParser.GROUPING:
                case DorisParser.GROUPS:
                case DorisParser.HASH:
                case DorisParser.HDFS:
                case DorisParser.HELP:
                case DorisParser.HISTOGRAM:
                case DorisParser.HLL_UNION:
                case DorisParser.HOSTNAME:
                case DorisParser.HOTSPOT:
                case DorisParser.HOUR:
                case DorisParser.HUB:
                case DorisParser.IDENTIFIED:
                case DorisParser.IGNORE:
                case DorisParser.IMMEDIATE:
                case DorisParser.INCREMENTAL:
                case DorisParser.INDEXES:
                case DorisParser.INVERTED:
                case DorisParser.IPV4:
                case DorisParser.IPV6:
                case DorisParser.IS_NOT_NULL_PRED:
                case DorisParser.IS_NULL_PRED:
                case DorisParser.ISNULL:
                case DorisParser.ISOLATION:
                case DorisParser.JOB:
                case DorisParser.JOBS:
                case DorisParser.JSON:
                case DorisParser.JSONB:
                case DorisParser.LABEL:
                case DorisParser.LAST:
                case DorisParser.LDAP:
                case DorisParser.LDAP_ADMIN_PASSWORD:
                case DorisParser.LESS:
                case DorisParser.LEVEL:
                case DorisParser.LINES:
                case DorisParser.LINK:
                case DorisParser.LOCAL:
                case DorisParser.LOCALTIME:
                case DorisParser.LOCALTIMESTAMP:
                case DorisParser.LOCATION:
                case DorisParser.LOCK:
                case DorisParser.LOGICAL:
                case DorisParser.MANUAL:
                case DorisParser.MAP:
                case DorisParser.MATCH_ALL:
                case DorisParser.MATCH_ANY:
                case DorisParser.MATCH_PHRASE:
                case DorisParser.MATCH_PHRASE_EDGE:
                case DorisParser.MATCH_PHRASE_PREFIX:
                case DorisParser.MATCH_REGEXP:
                case DorisParser.MATERIALIZED:
                case DorisParser.MAX:
                case DorisParser.MEMO:
                case DorisParser.MERGE:
                case DorisParser.MIGRATE:
                case DorisParser.MIGRATIONS:
                case DorisParser.MIN:
                case DorisParser.MINUTE:
                case DorisParser.MODIFY:
                case DorisParser.MONTH:
                case DorisParser.MTMV:
                case DorisParser.NAME:
                case DorisParser.NAMES:
                case DorisParser.NEGATIVE:
                case DorisParser.NEVER:
                case DorisParser.NEXT:
                case DorisParser.NGRAM_BF:
                case DorisParser.NO:
                case DorisParser.NON_NULLABLE:
                case DorisParser.NULLS:
                case DorisParser.OF:
                case DorisParser.OFFSET:
                case DorisParser.ONLY:
                case DorisParser.OPEN:
                case DorisParser.OPTIMIZED:
                case DorisParser.PARAMETER:
                case DorisParser.PARSED:
                case DorisParser.PARTITIONS:
                case DorisParser.PASSWORD:
                case DorisParser.PASSWORD_EXPIRE:
                case DorisParser.PASSWORD_HISTORY:
                case DorisParser.PASSWORD_LOCK_TIME:
                case DorisParser.PASSWORD_REUSE:
                case DorisParser.PATH:
                case DorisParser.PAUSE:
                case DorisParser.PERCENT:
                case DorisParser.PERIOD:
                case DorisParser.PERMISSIVE:
                case DorisParser.PHYSICAL:
                case DorisParser.PI:
                case DorisParser.PLAN:
                case DorisParser.PRIVILEGES:
                case DorisParser.PROCESS:
                case DorisParser.PLUGIN:
                case DorisParser.PLUGINS:
                case DorisParser.POLICY:
                case DorisParser.PROC:
                case DorisParser.PROCESSLIST:
                case DorisParser.PROFILE:
                case DorisParser.PROPERTIES:
                case DorisParser.PROPERTY:
                case DorisParser.QUANTILE_STATE:
                case DorisParser.QUANTILE_UNION:
                case DorisParser.QUERY:
                case DorisParser.QUOTA:
                case DorisParser.QUALIFY:
                case DorisParser.RANDOM:
                case DorisParser.RECENT:
                case DorisParser.RECOVER:
                case DorisParser.RECYCLE:
                case DorisParser.REFRESH:
                case DorisParser.REPEATABLE:
                case DorisParser.REPLACE:
                case DorisParser.REPLACE_IF_NOT_NULL:
                case DorisParser.REPLAYER:
                case DorisParser.REPOSITORIES:
                case DorisParser.REPOSITORY:
                case DorisParser.RESOURCE:
                case DorisParser.RESOURCES:
                case DorisParser.RESTORE:
                case DorisParser.RESTRICTIVE:
                case DorisParser.RESUME:
                case DorisParser.RETURNS:
                case DorisParser.REWRITTEN:
                case DorisParser.RLIKE:
                case DorisParser.ROLLBACK:
                case DorisParser.ROLLUP:
                case DorisParser.ROUTINE:
                case DorisParser.S3:
                case DorisParser.SAMPLE:
                case DorisParser.SCHEDULE:
                case DorisParser.SCHEDULER:
                case DorisParser.SCHEMA:
                case DorisParser.SECOND:
                case DorisParser.SEQUENCE:
                case DorisParser.SERIALIZABLE:
                case DorisParser.SESSION:
                case DorisParser.SESSION_USER:
                case DorisParser.SET_SESSION_VARIABLE:
                case DorisParser.SHAPE:
                case DorisParser.SKEW:
                case DorisParser.SNAPSHOT:
                case DorisParser.SONAME:
                case DorisParser.SPLIT:
                case DorisParser.SQL:
                case DorisParser.STAGE:
                case DorisParser.STAGES:
                case DorisParser.START:
                case DorisParser.STARTS:
                case DorisParser.STATS:
                case DorisParser.STATUS:
                case DorisParser.STOP:
                case DorisParser.STORAGE:
                case DorisParser.STREAM:
                case DorisParser.STREAMING:
                case DorisParser.STRING:
                case DorisParser.STRUCT:
                case DorisParser.SUBDATE:
                case DorisParser.SUM:
                case DorisParser.TABLES:
                case DorisParser.TASK:
                case DorisParser.TASKS:
                case DorisParser.TEMPORARY:
                case DorisParser.TEXT:
                case DorisParser.THAN:
                case DorisParser.TIME:
                case DorisParser.TIMESTAMP:
                case DorisParser.TIMESTAMPADD:
                case DorisParser.TIMESTAMPDIFF:
                case DorisParser.TRANSACTION:
                case DorisParser.TREE:
                case DorisParser.TRIGGERS:
                case DorisParser.TRUNCATE:
                case DorisParser.TYPE:
                case DorisParser.TYPES:
                case DorisParser.UNCOMMITTED:
                case DorisParser.UNLOCK:
                case DorisParser.UNSET:
                case DorisParser.UP:
                case DorisParser.USER:
                case DorisParser.VALUE:
                case DorisParser.VARCHAR:
                case DorisParser.VARIABLE:
                case DorisParser.VARIABLES:
                case DorisParser.VARIANT:
                case DorisParser.VAULT:
                case DorisParser.VAULTS:
                case DorisParser.VERBOSE:
                case DorisParser.VERSION:
                case DorisParser.VIEW:
                case DorisParser.VIEWS:
                case DorisParser.WARM:
                case DorisParser.WARNINGS:
                case DorisParser.WEEK:
                case DorisParser.WORK:
                case DorisParser.YEAR:
                case DorisParser.HINT_START:
                case DorisParser.HINT_END:
                case DorisParser.COMMENT_START:
                case DorisParser.IDENTIFIER:
                case DorisParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 5893;
                    this.identifier();
                    }
                    break;
                case DorisParser.LEFT_PAREN:
                    {
                    this.state = 5894;
                    this.identifierList();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5898;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 454) {
                    {
                    this.state = 5897;
                    this.match(DorisParser.TEMPORARY);
                    }
                }

                this.state = 5900;
                this.match(DorisParser.PARTITIONS);
                this.state = 5901;
                this.identifierList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constant(): ConstantContext {
        let localContext = new ConstantContext(this.context, this.state);
        this.enterRule(localContext, 404, DorisParser.RULE_constant);
        let _la: number;
        try {
            this.state = 5955;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 852, this.context) ) {
            case 1:
                localContext = new NullLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5904;
                this.match(DorisParser.NULL);
                }
                break;
            case 2:
                localContext = new TypeConstructorContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5905;
                (localContext as TypeConstructorContext)._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & 5121) !== 0) || _la === 460)) {
                    (localContext as TypeConstructorContext)._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5906;
                this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 3:
                localContext = new NumericLiteralContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5907;
                this.number_();
                }
                break;
            case 4:
                localContext = new BooleanLiteralContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5908;
                this.booleanValue();
                }
                break;
            case 5:
                localContext = new StringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 5909;
                    this.match(DorisParser.BINARY);
                    }
                }

                this.state = 5912;
                this.match(DorisParser.STRING_LITERAL);
                }
                break;
            case 6:
                localContext = new ArrayLiteralContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5913;
                this.match(DorisParser.LEFT_BRACKET);
                this.state = 5915;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 7 || _la === 9 || _la === 45 || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & 5121) !== 0) || _la === 183 || _la === 312 || _la === 343 || _la === 460 || _la === 470 || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 58982401) !== 0)) {
                    {
                    this.state = 5914;
                    (localContext as ArrayLiteralContext)._constant = this.constant();
                    (localContext as ArrayLiteralContext)._items.push((localContext as ArrayLiteralContext)._constant);
                    }
                }

                this.state = 5921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 5917;
                    this.match(DorisParser.COMMA);
                    this.state = 5918;
                    (localContext as ArrayLiteralContext)._constant = this.constant();
                    (localContext as ArrayLiteralContext)._items.push((localContext as ArrayLiteralContext)._constant);
                    }
                    }
                    this.state = 5923;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5924;
                this.match(DorisParser.RIGHT_BRACKET);
                }
                break;
            case 7:
                localContext = new MapLiteralContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5925;
                this.match(DorisParser.LEFT_BRACE);
                this.state = 5930;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 7 || _la === 9 || _la === 45 || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & 5121) !== 0) || _la === 183 || _la === 312 || _la === 343 || _la === 460 || _la === 470 || ((((_la - 520)) & ~0x1F) === 0 && ((1 << (_la - 520)) & 58982401) !== 0)) {
                    {
                    this.state = 5926;
                    (localContext as MapLiteralContext)._constant = this.constant();
                    (localContext as MapLiteralContext)._items.push((localContext as MapLiteralContext)._constant);
                    this.state = 5927;
                    this.match(DorisParser.COLON);
                    this.state = 5928;
                    (localContext as MapLiteralContext)._constant = this.constant();
                    (localContext as MapLiteralContext)._items.push((localContext as MapLiteralContext)._constant);
                    }
                }

                this.state = 5939;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 5932;
                    this.match(DorisParser.COMMA);
                    this.state = 5933;
                    (localContext as MapLiteralContext)._constant = this.constant();
                    (localContext as MapLiteralContext)._items.push((localContext as MapLiteralContext)._constant);
                    this.state = 5934;
                    this.match(DorisParser.COLON);
                    this.state = 5935;
                    (localContext as MapLiteralContext)._constant = this.constant();
                    (localContext as MapLiteralContext)._items.push((localContext as MapLiteralContext)._constant);
                    }
                    }
                    this.state = 5941;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5942;
                this.match(DorisParser.RIGHT_BRACE);
                }
                break;
            case 8:
                localContext = new StructLiteralContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5943;
                this.match(DorisParser.LEFT_BRACE);
                this.state = 5944;
                (localContext as StructLiteralContext)._constant = this.constant();
                (localContext as StructLiteralContext)._items.push((localContext as StructLiteralContext)._constant);
                this.state = 5949;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 5945;
                    this.match(DorisParser.COMMA);
                    this.state = 5946;
                    (localContext as StructLiteralContext)._constant = this.constant();
                    (localContext as StructLiteralContext)._items.push((localContext as StructLiteralContext)._constant);
                    }
                    }
                    this.state = 5951;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5952;
                this.match(DorisParser.RIGHT_BRACE);
                }
                break;
            case 9:
                localContext = new PlaceholderContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5954;
                this.match(DorisParser.PLACEHOLDER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 406, DorisParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5957;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & 127) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 408, DorisParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5959;
            _la = this.tokenStream.LA(1);
            if(!(_la === 183 || _la === 470)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 410, DorisParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5961;
            this.match(DorisParser.WHEN);
            this.state = 5962;
            localContext._condition = this.expression();
            this.state = 5963;
            this.match(DorisParser.THEN);
            this.state = 5964;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 412, DorisParser.RULE_interval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5966;
            this.match(DorisParser.INTERVAL);
            this.state = 5967;
            localContext._value = this.expression();
            this.state = 5968;
            localContext._unit = this.unitIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitIdentifier(): UnitIdentifierContext {
        let localContext = new UnitIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 414, DorisParser.RULE_unitIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5970;
            _la = this.tokenStream.LA(1);
            if(!(_la === 128 || _la === 222 || _la === 298 || _la === 300 || _la === 409 || _la === 502 || _la === 511)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataTypeWithNullable(): DataTypeWithNullableContext {
        let localContext = new DataTypeWithNullableContext(this.context, this.state);
        this.enterRule(localContext, 416, DorisParser.RULE_dataTypeWithNullable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5972;
            this.dataType();
            this.state = 5977;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 311 || _la === 312) {
                {
                this.state = 5974;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 5973;
                    this.match(DorisParser.NOT);
                    }
                }

                this.state = 5976;
                this.match(DorisParser.NULL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataType(): DataTypeContext {
        let localContext = new DataTypeContext(this.context, this.state);
        this.enterRule(localContext, 418, DorisParser.RULE_dataType);
        let _la: number;
        try {
            this.state = 6024;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 858, this.context) ) {
            case 1:
                localContext = new ComplexDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5979;
                (localContext as ComplexDataTypeContext)._complex = this.match(DorisParser.ARRAY);
                this.state = 5980;
                this.match(DorisParser.LT);
                this.state = 5981;
                this.dataType();
                this.state = 5982;
                this.match(DorisParser.GT);
                }
                break;
            case 2:
                localContext = new ComplexDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5984;
                (localContext as ComplexDataTypeContext)._complex = this.match(DorisParser.MAP);
                this.state = 5985;
                this.match(DorisParser.LT);
                this.state = 5986;
                this.dataType();
                this.state = 5987;
                this.match(DorisParser.COMMA);
                this.state = 5988;
                this.dataType();
                this.state = 5989;
                this.match(DorisParser.GT);
                }
                break;
            case 3:
                localContext = new ComplexDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5991;
                (localContext as ComplexDataTypeContext)._complex = this.match(DorisParser.STRUCT);
                this.state = 5992;
                this.match(DorisParser.LT);
                this.state = 5993;
                this.complexColTypeList();
                this.state = 5994;
                this.match(DorisParser.GT);
                }
                break;
            case 4:
                localContext = new AggStateDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5996;
                this.match(DorisParser.AGG_STATE);
                this.state = 5997;
                this.match(DorisParser.LT);
                this.state = 5998;
                this.functionNameIdentifier();
                this.state = 5999;
                this.match(DorisParser.LEFT_PAREN);
                this.state = 6000;
                (localContext as AggStateDataTypeContext)._dataTypeWithNullable = this.dataTypeWithNullable();
                (localContext as AggStateDataTypeContext)._dataTypes.push((localContext as AggStateDataTypeContext)._dataTypeWithNullable);
                this.state = 6005;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 6001;
                    this.match(DorisParser.COMMA);
                    this.state = 6002;
                    (localContext as AggStateDataTypeContext)._dataTypeWithNullable = this.dataTypeWithNullable();
                    (localContext as AggStateDataTypeContext)._dataTypes.push((localContext as AggStateDataTypeContext)._dataTypeWithNullable);
                    }
                    }
                    this.state = 6007;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 6008;
                this.match(DorisParser.RIGHT_PAREN);
                this.state = 6009;
                this.match(DorisParser.GT);
                }
                break;
            case 5:
                localContext = new PrimitiveDataTypeContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6011;
                this.primitiveColType();
                this.state = 6022;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 857, this.context) ) {
                case 1:
                    {
                    this.state = 6012;
                    this.match(DorisParser.LEFT_PAREN);
                    this.state = 6013;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 521 || _la === 543)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 6018;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 6014;
                        this.match(DorisParser.COMMA);
                        this.state = 6015;
                        this.match(DorisParser.INTEGER_VALUE);
                        }
                        }
                        this.state = 6020;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 6021;
                    this.match(DorisParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primitiveColType(): PrimitiveColTypeContext {
        let localContext = new PrimitiveColTypeContext(this.context, this.state);
        this.enterRule(localContext, 420, DorisParser.RULE_primitiveColType);
        let _la: number;
        try {
            this.state = 6058;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.TINYINT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6026;
                localContext._type_ = this.match(DorisParser.TINYINT);
                }
                break;
            case DorisParser.SMALLINT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6027;
                localContext._type_ = this.match(DorisParser.SMALLINT);
                }
                break;
            case DorisParser.INT:
            case DorisParser.INTEGER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6028;
                localContext._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 236 || _la === 237)) {
                    localContext._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case DorisParser.BIGINT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6029;
                localContext._type_ = this.match(DorisParser.BIGINT);
                }
                break;
            case DorisParser.LARGEINT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6030;
                localContext._type_ = this.match(DorisParser.LARGEINT);
                }
                break;
            case DorisParser.BOOLEAN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6031;
                localContext._type_ = this.match(DorisParser.BOOLEAN);
                }
                break;
            case DorisParser.FLOAT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6032;
                localContext._type_ = this.match(DorisParser.FLOAT);
                }
                break;
            case DorisParser.DOUBLE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6033;
                localContext._type_ = this.match(DorisParser.DOUBLE);
                }
                break;
            case DorisParser.DATE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6034;
                localContext._type_ = this.match(DorisParser.DATE);
                }
                break;
            case DorisParser.DATETIME:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 6035;
                localContext._type_ = this.match(DorisParser.DATETIME);
                }
                break;
            case DorisParser.TIME:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 6036;
                localContext._type_ = this.match(DorisParser.TIME);
                }
                break;
            case DorisParser.DATEV2:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 6037;
                localContext._type_ = this.match(DorisParser.DATEV2);
                }
                break;
            case DorisParser.DATETIMEV2:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 6038;
                localContext._type_ = this.match(DorisParser.DATETIMEV2);
                }
                break;
            case DorisParser.DATEV1:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 6039;
                localContext._type_ = this.match(DorisParser.DATEV1);
                }
                break;
            case DorisParser.DATETIMEV1:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 6040;
                localContext._type_ = this.match(DorisParser.DATETIMEV1);
                }
                break;
            case DorisParser.BITMAP:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 6041;
                localContext._type_ = this.match(DorisParser.BITMAP);
                }
                break;
            case DorisParser.QUANTILE_STATE:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 6042;
                localContext._type_ = this.match(DorisParser.QUANTILE_STATE);
                }
                break;
            case DorisParser.HLL:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 6043;
                localContext._type_ = this.match(DorisParser.HLL);
                }
                break;
            case DorisParser.AGG_STATE:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 6044;
                localContext._type_ = this.match(DorisParser.AGG_STATE);
                }
                break;
            case DorisParser.STRING:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 6045;
                localContext._type_ = this.match(DorisParser.STRING);
                }
                break;
            case DorisParser.JSON:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 6046;
                localContext._type_ = this.match(DorisParser.JSON);
                }
                break;
            case DorisParser.JSONB:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 6047;
                localContext._type_ = this.match(DorisParser.JSONB);
                }
                break;
            case DorisParser.TEXT:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 6048;
                localContext._type_ = this.match(DorisParser.TEXT);
                }
                break;
            case DorisParser.VARCHAR:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 6049;
                localContext._type_ = this.match(DorisParser.VARCHAR);
                }
                break;
            case DorisParser.CHAR:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 6050;
                localContext._type_ = this.match(DorisParser.CHAR);
                }
                break;
            case DorisParser.DECIMAL:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 6051;
                localContext._type_ = this.match(DorisParser.DECIMAL);
                }
                break;
            case DorisParser.DECIMALV2:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 6052;
                localContext._type_ = this.match(DorisParser.DECIMALV2);
                }
                break;
            case DorisParser.DECIMALV3:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 6053;
                localContext._type_ = this.match(DorisParser.DECIMALV3);
                }
                break;
            case DorisParser.IPV4:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 6054;
                localContext._type_ = this.match(DorisParser.IPV4);
                }
                break;
            case DorisParser.IPV6:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 6055;
                localContext._type_ = this.match(DorisParser.IPV6);
                }
                break;
            case DorisParser.VARIANT:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 6056;
                localContext._type_ = this.match(DorisParser.VARIANT);
                }
                break;
            case DorisParser.ALL:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 6057;
                localContext._type_ = this.match(DorisParser.ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public complexColTypeList(): ComplexColTypeListContext {
        let localContext = new ComplexColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 422, DorisParser.RULE_complexColTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6060;
            this.complexColType();
            this.state = 6065;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 6061;
                this.match(DorisParser.COMMA);
                this.state = 6062;
                this.complexColType();
                }
                }
                this.state = 6067;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public complexColType(): ComplexColTypeContext {
        let localContext = new ComplexColTypeContext(this.context, this.state);
        this.enterRule(localContext, 424, DorisParser.RULE_complexColType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6068;
            this.identifier();
            this.state = 6069;
            this.match(DorisParser.COLON);
            this.state = 6070;
            this.dataType();
            this.state = 6072;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 6071;
                this.commentSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commentSpec(): CommentSpecContext {
        let localContext = new CommentSpecContext(this.context, this.state);
        this.enterRule(localContext, 426, DorisParser.RULE_commentSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6074;
            this.match(DorisParser.COMMENT);
            this.state = 6075;
            this.match(DorisParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sample(): SampleContext {
        let localContext = new SampleContext(this.context, this.state);
        this.enterRule(localContext, 428, DorisParser.RULE_sample);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6077;
            this.match(DorisParser.TABLESAMPLE);
            this.state = 6078;
            this.match(DorisParser.LEFT_PAREN);
            this.state = 6080;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 543) {
                {
                this.state = 6079;
                this.sampleMethod();
                }
            }

            this.state = 6082;
            this.match(DorisParser.RIGHT_PAREN);
            this.state = 6085;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 863, this.context) ) {
            case 1:
                {
                this.state = 6083;
                this.match(DorisParser.REPEATABLE);
                this.state = 6084;
                localContext._seed = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleMethod(): SampleMethodContext {
        let localContext = new SampleMethodContext(this.context, this.state);
        this.enterRule(localContext, 430, DorisParser.RULE_sampleMethod);
        try {
            this.state = 6091;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 864, this.context) ) {
            case 1:
                localContext = new SampleByPercentileContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6087;
                (localContext as SampleByPercentileContext)._percentage = this.match(DorisParser.INTEGER_VALUE);
                this.state = 6088;
                this.match(DorisParser.PERCENT);
                }
                break;
            case 2:
                localContext = new SampleByRowsContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6089;
                this.match(DorisParser.INTEGER_VALUE);
                this.state = 6090;
                this.match(DorisParser.ROWS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSnapshot(): TableSnapshotContext {
        let localContext = new TableSnapshotContext(this.context, this.state);
        this.enterRule(localContext, 432, DorisParser.RULE_tableSnapshot);
        try {
            this.state = 6103;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 865, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6093;
                this.match(DorisParser.FOR);
                this.state = 6094;
                this.match(DorisParser.VERSION);
                this.state = 6095;
                this.match(DorisParser.AS);
                this.state = 6096;
                this.match(DorisParser.OF);
                this.state = 6097;
                localContext._version = this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6098;
                this.match(DorisParser.FOR);
                this.state = 6099;
                this.match(DorisParser.TIME);
                this.state = 6100;
                this.match(DorisParser.AS);
                this.state = 6101;
                this.match(DorisParser.OF);
                this.state = 6102;
                localContext._time = this.match(DorisParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        let localContext = new ErrorCapturingIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 434, DorisParser.RULE_errorCapturingIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6105;
            this.identifier();
            this.state = 6106;
            this.errorCapturingIdentifierExtra();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        let localContext = new ErrorCapturingIdentifierExtraContext(this.context, this.state);
        this.enterRule(localContext, 436, DorisParser.RULE_errorCapturingIdentifierExtra);
        try {
            let alternative: number;
            this.state = 6115;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 867, this.context) ) {
            case 1:
                localContext = new ErrorIdentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6110;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 6108;
                        this.match(DorisParser.SUBTRACT);
                        this.state = 6109;
                        this.identifier();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 6112;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 866, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 2:
                localContext = new RealIdentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 438, DorisParser.RULE_identifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6117;
            this.strictIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public strictIdentifier(): StrictIdentifierContext {
        let localContext = new StrictIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 440, DorisParser.RULE_strictIdentifier);
        try {
            this.state = 6122;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case DorisParser.IDENTIFIER:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6119;
                this.match(DorisParser.IDENTIFIER);
                }
                break;
            case DorisParser.BACKQUOTED_IDENTIFIER:
                localContext = new QuotedIdentifierAlternativeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6120;
                this.quotedIdentifier();
                }
                break;
            case DorisParser.LEFT_BRACE:
            case DorisParser.RIGHT_BRACE:
            case DorisParser.ACTIONS:
            case DorisParser.ADDDATE:
            case DorisParser.AFTER:
            case DorisParser.AGG_STATE:
            case DorisParser.AGGREGATE:
            case DorisParser.ALIAS:
            case DorisParser.ANALYZED:
            case DorisParser.ARRAY:
            case DorisParser.ARRAY_RANGE:
            case DorisParser.AT:
            case DorisParser.AUTHORS:
            case DorisParser.AUTO_INCREMENT:
            case DorisParser.ALWAYS:
            case DorisParser.BACKENDS:
            case DorisParser.BACKUP:
            case DorisParser.BEGIN:
            case DorisParser.BELONG:
            case DorisParser.BIN:
            case DorisParser.BITAND:
            case DorisParser.BITMAP:
            case DorisParser.BITMAP_EMPTY:
            case DorisParser.BITMAP_UNION:
            case DorisParser.BITOR:
            case DorisParser.BITXOR:
            case DorisParser.BLOB:
            case DorisParser.BOOLEAN:
            case DorisParser.BRIEF:
            case DorisParser.BROKER:
            case DorisParser.BUCKETS:
            case DorisParser.BUILD:
            case DorisParser.BUILTIN:
            case DorisParser.BULK:
            case DorisParser.CACHE:
            case DorisParser.CACHED:
            case DorisParser.CALL:
            case DorisParser.CATALOG:
            case DorisParser.CATALOGS:
            case DorisParser.CHAIN:
            case DorisParser.CHAR:
            case DorisParser.CHARSET:
            case DorisParser.CHECK:
            case DorisParser.CLUSTER:
            case DorisParser.CLUSTERS:
            case DorisParser.COLLATION:
            case DorisParser.COLLECT:
            case DorisParser.COLOCATE:
            case DorisParser.COLUMNS:
            case DorisParser.COMMENT:
            case DorisParser.COMMIT:
            case DorisParser.COMMITTED:
            case DorisParser.COMPACT:
            case DorisParser.COMPLETE:
            case DorisParser.COMPRESS_TYPE:
            case DorisParser.COMPUTE:
            case DorisParser.CONDITIONS:
            case DorisParser.CONFIG:
            case DorisParser.CONNECTION:
            case DorisParser.CONNECTION_ID:
            case DorisParser.CONSISTENT:
            case DorisParser.CONSTRAINTS:
            case DorisParser.CONVERT:
            case DorisParser.CONVERT_LSC:
            case DorisParser.COPY:
            case DorisParser.COUNT:
            case DorisParser.CREATION:
            case DorisParser.CRON:
            case DorisParser.CURRENT_CATALOG:
            case DorisParser.CURRENT_DATE:
            case DorisParser.CURRENT_TIME:
            case DorisParser.CURRENT_TIMESTAMP:
            case DorisParser.CURRENT_USER:
            case DorisParser.DATA:
            case DorisParser.DATE:
            case DorisParser.DATE_ADD:
            case DorisParser.DATE_CEIL:
            case DorisParser.DATE_DIFF:
            case DorisParser.DATE_FLOOR:
            case DorisParser.DATE_SUB:
            case DorisParser.DATEADD:
            case DorisParser.DATEDIFF:
            case DorisParser.DATETIME:
            case DorisParser.DATETIMEV2:
            case DorisParser.DATEV2:
            case DorisParser.DATETIMEV1:
            case DorisParser.DATEV1:
            case DorisParser.DAY:
            case DorisParser.DAYS_ADD:
            case DorisParser.DAYS_SUB:
            case DorisParser.DECIMAL:
            case DorisParser.DECIMALV2:
            case DorisParser.DECIMALV3:
            case DorisParser.DEFERRED:
            case DorisParser.DEMAND:
            case DorisParser.DIAGNOSE:
            case DorisParser.DIAGNOSIS:
            case DorisParser.DISTINCTPC:
            case DorisParser.DISTINCTPCSA:
            case DorisParser.DO:
            case DorisParser.DORIS_INTERNAL_TABLE_ID:
            case DorisParser.DUAL:
            case DorisParser.DYNAMIC:
            case DorisParser.E:
            case DorisParser.ENABLE:
            case DorisParser.ENCRYPTKEY:
            case DorisParser.ENCRYPTKEYS:
            case DorisParser.END:
            case DorisParser.ENDS:
            case DorisParser.ENGINE:
            case DorisParser.ENGINES:
            case DorisParser.ERRORS:
            case DorisParser.EVENTS:
            case DorisParser.EVERY:
            case DorisParser.EXCLUDE:
            case DorisParser.EXPIRED:
            case DorisParser.EXTERNAL:
            case DorisParser.FAILED_LOGIN_ATTEMPTS:
            case DorisParser.FAST:
            case DorisParser.FEATURE:
            case DorisParser.FIELDS:
            case DorisParser.FILE:
            case DorisParser.FILTER:
            case DorisParser.FIRST:
            case DorisParser.FORMAT:
            case DorisParser.FREE:
            case DorisParser.FRONTENDS:
            case DorisParser.FUNCTION:
            case DorisParser.GENERATED:
            case DorisParser.GENERIC:
            case DorisParser.GLOBAL:
            case DorisParser.GRAPH:
            case DorisParser.GROUPING:
            case DorisParser.GROUPS:
            case DorisParser.HASH:
            case DorisParser.HDFS:
            case DorisParser.HELP:
            case DorisParser.HISTOGRAM:
            case DorisParser.HLL_UNION:
            case DorisParser.HOSTNAME:
            case DorisParser.HOTSPOT:
            case DorisParser.HOUR:
            case DorisParser.HUB:
            case DorisParser.IDENTIFIED:
            case DorisParser.IGNORE:
            case DorisParser.IMMEDIATE:
            case DorisParser.INCREMENTAL:
            case DorisParser.INDEXES:
            case DorisParser.INVERTED:
            case DorisParser.IPV4:
            case DorisParser.IPV6:
            case DorisParser.IS_NOT_NULL_PRED:
            case DorisParser.IS_NULL_PRED:
            case DorisParser.ISNULL:
            case DorisParser.ISOLATION:
            case DorisParser.JOB:
            case DorisParser.JOBS:
            case DorisParser.JSON:
            case DorisParser.JSONB:
            case DorisParser.LABEL:
            case DorisParser.LAST:
            case DorisParser.LDAP:
            case DorisParser.LDAP_ADMIN_PASSWORD:
            case DorisParser.LESS:
            case DorisParser.LEVEL:
            case DorisParser.LINES:
            case DorisParser.LINK:
            case DorisParser.LOCAL:
            case DorisParser.LOCALTIME:
            case DorisParser.LOCALTIMESTAMP:
            case DorisParser.LOCATION:
            case DorisParser.LOCK:
            case DorisParser.LOGICAL:
            case DorisParser.MANUAL:
            case DorisParser.MAP:
            case DorisParser.MATCH_ALL:
            case DorisParser.MATCH_ANY:
            case DorisParser.MATCH_PHRASE:
            case DorisParser.MATCH_PHRASE_EDGE:
            case DorisParser.MATCH_PHRASE_PREFIX:
            case DorisParser.MATCH_REGEXP:
            case DorisParser.MATERIALIZED:
            case DorisParser.MAX:
            case DorisParser.MEMO:
            case DorisParser.MERGE:
            case DorisParser.MIGRATE:
            case DorisParser.MIGRATIONS:
            case DorisParser.MIN:
            case DorisParser.MINUTE:
            case DorisParser.MODIFY:
            case DorisParser.MONTH:
            case DorisParser.MTMV:
            case DorisParser.NAME:
            case DorisParser.NAMES:
            case DorisParser.NEGATIVE:
            case DorisParser.NEVER:
            case DorisParser.NEXT:
            case DorisParser.NGRAM_BF:
            case DorisParser.NO:
            case DorisParser.NON_NULLABLE:
            case DorisParser.NULLS:
            case DorisParser.OF:
            case DorisParser.OFFSET:
            case DorisParser.ONLY:
            case DorisParser.OPEN:
            case DorisParser.OPTIMIZED:
            case DorisParser.PARAMETER:
            case DorisParser.PARSED:
            case DorisParser.PARTITIONS:
            case DorisParser.PASSWORD:
            case DorisParser.PASSWORD_EXPIRE:
            case DorisParser.PASSWORD_HISTORY:
            case DorisParser.PASSWORD_LOCK_TIME:
            case DorisParser.PASSWORD_REUSE:
            case DorisParser.PATH:
            case DorisParser.PAUSE:
            case DorisParser.PERCENT:
            case DorisParser.PERIOD:
            case DorisParser.PERMISSIVE:
            case DorisParser.PHYSICAL:
            case DorisParser.PI:
            case DorisParser.PLAN:
            case DorisParser.PRIVILEGES:
            case DorisParser.PROCESS:
            case DorisParser.PLUGIN:
            case DorisParser.PLUGINS:
            case DorisParser.POLICY:
            case DorisParser.PROC:
            case DorisParser.PROCESSLIST:
            case DorisParser.PROFILE:
            case DorisParser.PROPERTIES:
            case DorisParser.PROPERTY:
            case DorisParser.QUANTILE_STATE:
            case DorisParser.QUANTILE_UNION:
            case DorisParser.QUERY:
            case DorisParser.QUOTA:
            case DorisParser.QUALIFY:
            case DorisParser.RANDOM:
            case DorisParser.RECENT:
            case DorisParser.RECOVER:
            case DorisParser.RECYCLE:
            case DorisParser.REFRESH:
            case DorisParser.REPEATABLE:
            case DorisParser.REPLACE:
            case DorisParser.REPLACE_IF_NOT_NULL:
            case DorisParser.REPLAYER:
            case DorisParser.REPOSITORIES:
            case DorisParser.REPOSITORY:
            case DorisParser.RESOURCE:
            case DorisParser.RESOURCES:
            case DorisParser.RESTORE:
            case DorisParser.RESTRICTIVE:
            case DorisParser.RESUME:
            case DorisParser.RETURNS:
            case DorisParser.REWRITTEN:
            case DorisParser.RLIKE:
            case DorisParser.ROLLBACK:
            case DorisParser.ROLLUP:
            case DorisParser.ROUTINE:
            case DorisParser.S3:
            case DorisParser.SAMPLE:
            case DorisParser.SCHEDULE:
            case DorisParser.SCHEDULER:
            case DorisParser.SCHEMA:
            case DorisParser.SECOND:
            case DorisParser.SEQUENCE:
            case DorisParser.SERIALIZABLE:
            case DorisParser.SESSION:
            case DorisParser.SESSION_USER:
            case DorisParser.SET_SESSION_VARIABLE:
            case DorisParser.SHAPE:
            case DorisParser.SKEW:
            case DorisParser.SNAPSHOT:
            case DorisParser.SONAME:
            case DorisParser.SPLIT:
            case DorisParser.SQL:
            case DorisParser.STAGE:
            case DorisParser.STAGES:
            case DorisParser.START:
            case DorisParser.STARTS:
            case DorisParser.STATS:
            case DorisParser.STATUS:
            case DorisParser.STOP:
            case DorisParser.STORAGE:
            case DorisParser.STREAM:
            case DorisParser.STREAMING:
            case DorisParser.STRING:
            case DorisParser.STRUCT:
            case DorisParser.SUBDATE:
            case DorisParser.SUM:
            case DorisParser.TABLES:
            case DorisParser.TASK:
            case DorisParser.TASKS:
            case DorisParser.TEMPORARY:
            case DorisParser.TEXT:
            case DorisParser.THAN:
            case DorisParser.TIME:
            case DorisParser.TIMESTAMP:
            case DorisParser.TIMESTAMPADD:
            case DorisParser.TIMESTAMPDIFF:
            case DorisParser.TRANSACTION:
            case DorisParser.TREE:
            case DorisParser.TRIGGERS:
            case DorisParser.TRUNCATE:
            case DorisParser.TYPE:
            case DorisParser.TYPES:
            case DorisParser.UNCOMMITTED:
            case DorisParser.UNLOCK:
            case DorisParser.UNSET:
            case DorisParser.UP:
            case DorisParser.USER:
            case DorisParser.VALUE:
            case DorisParser.VARCHAR:
            case DorisParser.VARIABLE:
            case DorisParser.VARIABLES:
            case DorisParser.VARIANT:
            case DorisParser.VAULT:
            case DorisParser.VAULTS:
            case DorisParser.VERBOSE:
            case DorisParser.VERSION:
            case DorisParser.VIEW:
            case DorisParser.VIEWS:
            case DorisParser.WARM:
            case DorisParser.WARNINGS:
            case DorisParser.WEEK:
            case DorisParser.WORK:
            case DorisParser.YEAR:
            case DorisParser.HINT_START:
            case DorisParser.HINT_END:
            case DorisParser.COMMENT_START:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6121;
                this.nonReserved();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotedIdentifier(): QuotedIdentifierContext {
        let localContext = new QuotedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 442, DorisParser.RULE_quotedIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6124;
            this.match(DorisParser.BACKQUOTED_IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 444, DorisParser.RULE_number);
        let _la: number;
        try {
            this.state = 6134;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 871, this.context) ) {
            case 1:
                localContext = new IntegerLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6127;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 520) {
                    {
                    this.state = 6126;
                    this.match(DorisParser.SUBTRACT);
                    }
                }

                this.state = 6129;
                this.match(DorisParser.INTEGER_VALUE);
                }
                break;
            case 2:
                localContext = new DecimalLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6131;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 520) {
                    {
                    this.state = 6130;
                    this.match(DorisParser.SUBTRACT);
                    }
                }

                this.state = 6133;
                _la = this.tokenStream.LA(1);
                if(!(_la === 544 || _la === 545)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 446, DorisParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6136;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 824092160) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3758068699) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 2147343345) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294572255) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3368445247) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 531142527) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 3753617235) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 2743001093) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 3756915099) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 124386295) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 3908763643) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 4277172351) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 2581984149) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 1896349679) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 1259707003) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 8945661) !== 0) || ((((_la - 533)) & ~0x1F) === 0 && ((1 << (_la - 533)) & 7) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 112:
            return this.queryTerm_sempred(localContext as QueryTermContext, predIndex);
        case 115:
            return this.querySpecification_sempred(localContext as QuerySpecificationContext, predIndex);
        case 184:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 188:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 190:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        }
        return true;
    }
    private queryTerm_sempred(localContext: QueryTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        case 1:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private querySpecification_sempred(localContext: QuerySpecificationContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return doris_legacy_SQL_syntax;
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return this.precpred(this.context, 4);
        case 4:
            return this.precpred(this.context, 3);
        case 5:
            return this.precpred(this.context, 2);
        case 6:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 7:
            return this.precpred(this.context, 6);
        case 8:
            return this.precpred(this.context, 5);
        case 9:
            return this.precpred(this.context, 4);
        case 10:
            return this.precpred(this.context, 3);
        case 11:
            return this.precpred(this.context, 2);
        case 12:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 13:
            return this.precpred(this.context, 11);
        case 14:
            return this.precpred(this.context, 10);
        case 15:
            return this.precpred(this.context, 5);
        case 16:
            return this.precpred(this.context, 1);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,553,6139,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,1,0,5,0,450,
        8,0,10,0,12,0,453,9,0,1,0,1,0,1,1,5,1,458,8,1,10,1,12,1,461,9,1,
        1,1,3,1,464,8,1,1,1,4,1,467,8,1,11,1,12,1,468,1,1,5,1,472,8,1,10,
        1,12,1,475,9,1,1,1,5,1,478,8,1,10,1,12,1,481,9,1,1,1,1,1,1,2,5,2,
        486,8,2,10,2,12,2,489,9,2,1,2,3,2,492,8,2,1,2,5,2,495,8,2,10,2,12,
        2,498,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,509,8,3,10,3,12,
        3,512,9,3,3,3,514,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,522,8,3,1,3,3,
        3,525,8,3,1,3,1,3,1,3,1,3,5,3,531,8,3,10,3,12,3,534,9,3,1,3,1,3,
        5,3,538,8,3,10,3,12,3,541,9,3,1,3,1,3,1,3,1,3,3,3,547,8,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,3,3,556,8,3,1,3,1,3,1,3,1,3,1,3,3,3,563,8,
        3,1,3,1,3,1,3,1,3,1,3,3,3,570,8,3,1,3,1,3,3,3,574,8,3,3,3,576,8,
        3,1,4,3,4,579,8,4,1,4,1,4,3,4,583,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,602,8,4,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,621,
        8,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,629,8,6,1,6,1,6,1,6,1,6,1,6,3,6,
        636,8,6,1,6,3,6,639,8,6,1,6,1,6,3,6,643,8,6,1,6,3,6,646,8,6,3,6,
        648,8,6,1,6,3,6,651,8,6,1,6,1,6,3,6,655,8,6,1,6,1,6,3,6,659,8,6,
        1,6,1,6,1,6,1,6,1,6,1,6,3,6,667,8,6,1,6,1,6,1,6,1,6,1,6,3,6,674,
        8,6,1,6,1,6,3,6,678,8,6,3,6,680,8,6,1,6,3,6,683,8,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,695,8,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,3,6,709,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
        717,8,6,1,6,1,6,1,6,1,6,1,6,3,6,724,8,6,1,6,1,6,1,6,1,6,1,6,3,6,
        731,8,6,1,6,1,6,1,6,3,6,736,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        3,6,762,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,775,
        8,7,3,7,777,8,7,1,7,1,7,3,7,781,8,7,1,7,1,7,1,7,3,7,786,8,7,3,7,
        788,8,7,1,7,3,7,791,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,799,8,7,1,7,
        1,7,1,7,1,7,3,7,805,8,7,1,7,3,7,808,8,7,1,7,1,7,1,7,3,7,813,8,7,
        1,7,1,7,1,7,3,7,818,8,7,3,7,820,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,841,8,8,1,9,
        3,9,844,8,9,1,9,3,9,847,8,9,1,9,1,9,1,9,1,9,3,9,853,8,9,1,9,1,9,
        1,9,1,9,1,9,3,9,860,8,9,1,9,3,9,863,8,9,1,9,1,9,1,9,3,9,868,8,9,
        1,9,3,9,871,8,9,1,9,1,9,1,9,1,9,3,9,877,8,9,1,9,1,9,3,9,881,8,9,
        1,9,3,9,884,8,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,892,8,9,1,9,3,9,895,
        8,9,1,9,3,9,898,8,9,1,9,3,9,901,8,9,1,9,1,9,1,9,1,9,3,9,907,8,9,
        1,9,1,9,1,9,3,9,912,8,9,1,9,3,9,915,8,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,5,9,924,8,9,10,9,12,9,927,9,9,1,9,1,9,3,9,931,8,9,1,9,3,9,934,
        8,9,1,9,3,9,937,8,9,1,9,1,9,1,9,1,9,1,9,3,9,944,8,9,1,9,3,9,947,
        8,9,1,9,1,9,1,9,3,9,952,8,9,1,9,3,9,955,8,9,1,9,3,9,958,8,9,1,10,
        1,10,3,10,962,8,10,1,10,1,10,1,10,1,10,3,10,968,8,10,1,10,1,10,3,
        10,972,8,10,1,10,1,10,1,10,1,10,3,10,978,8,10,1,10,3,10,981,8,10,
        1,10,1,10,3,10,985,8,10,1,10,1,10,1,10,3,10,990,8,10,1,10,1,10,1,
        10,1,10,1,10,1,10,3,10,998,8,10,3,10,1000,8,10,1,10,1,10,3,10,1004,
        8,10,1,10,3,10,1007,8,10,1,10,1,10,1,10,1,10,1,10,3,10,1014,8,10,
        1,10,1,10,1,10,3,10,1019,8,10,3,10,1021,8,10,3,10,1023,8,10,1,10,
        1,10,1,10,1,10,1,10,3,10,1030,8,10,1,10,3,10,1033,8,10,1,10,1,10,
        3,10,1037,8,10,1,10,1,10,3,10,1041,8,10,1,10,1,10,1,10,3,10,1046,
        8,10,1,10,1,10,1,10,1,10,3,10,1052,8,10,1,10,1,10,1,10,1,10,1,10,
        3,10,1059,8,10,1,10,1,10,3,10,1063,8,10,1,10,1,10,1,10,1,10,1,10,
        3,10,1070,8,10,1,10,1,10,1,10,1,10,3,10,1076,8,10,1,10,1,10,1,10,
        1,10,1,10,1,10,3,10,1084,8,10,3,10,1086,8,10,1,10,1,10,1,10,1,10,
        1,10,1,10,3,10,1094,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,3,10,1105,8,10,1,10,1,10,1,10,1,10,1,10,3,10,1112,8,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,3,11,1121,8,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,3,11,1142,8,11,1,11,1,11,1,11,1,11,1,11,3,11,1149,8,11,
        3,11,1151,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,3,12,1165,8,12,1,12,1,12,1,12,1,12,1,12,3,12,1172,8,12,
        1,12,1,12,1,12,1,12,1,12,3,12,1179,8,12,1,12,1,12,1,12,1,12,1,12,
        3,12,1186,8,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,1194,8,12,1,12,
        1,12,1,12,1,12,1,12,1,12,3,12,1202,8,12,1,12,1,12,1,12,1,12,1,12,
        1,12,3,12,1210,8,12,1,12,3,12,1213,8,12,1,13,1,13,3,13,1217,8,13,
        1,13,1,13,3,13,1221,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,3,13,1233,8,13,1,13,1,13,1,13,1,13,3,13,1239,8,13,1,13,
        3,13,1242,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,1251,8,13,
        1,13,1,13,3,13,1255,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,1272,8,13,1,13,1,13,1,13,
        1,13,1,13,1,13,3,13,1280,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,1299,8,13,
        1,13,1,13,3,13,1303,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,3,13,1314,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,
        1337,8,13,1,13,1,13,1,13,3,13,1342,8,13,1,13,3,13,1345,8,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,3,13,1354,8,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,1367,8,13,10,13,12,13,1370,
        9,13,3,13,1372,8,13,1,14,1,14,3,14,1376,8,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,3,15,1385,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,5,15,1395,8,15,10,15,12,15,1398,9,15,3,15,1400,8,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,3,15,1409,8,15,1,15,1,15,1,15,1,15,1,
        15,3,15,1416,8,15,1,15,1,15,1,15,1,15,5,15,1422,8,15,10,15,12,15,
        1425,9,15,3,15,1427,8,15,1,15,3,15,1430,8,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,5,15,1442,8,15,10,15,12,15,1445,9,
        15,1,15,1,15,3,15,1449,8,15,1,15,3,15,1452,8,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,1464,8,15,10,15,12,15,1467,
        9,15,1,15,1,15,3,15,1471,8,15,1,15,3,15,1474,8,15,1,15,1,15,1,15,
        1,15,1,15,3,15,1481,8,15,3,15,1483,8,15,1,16,1,16,1,16,1,16,3,16,
        1489,8,16,1,17,1,17,1,17,3,17,1494,8,17,1,17,1,17,3,17,1498,8,17,
        1,17,3,17,1501,8,17,1,17,3,17,1504,8,17,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,3,18,1513,8,18,3,18,1515,8,18,1,18,1,18,1,18,1,18,1,18,
        1,18,3,18,1523,8,18,3,18,1525,8,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1542,8,18,1,18,
        3,18,1545,8,18,1,18,1,18,1,18,1,18,1,18,3,18,1552,8,18,1,18,3,18,
        1555,8,18,1,18,1,18,3,18,1559,8,18,1,18,1,18,1,18,3,18,1564,8,18,
        1,18,3,18,1567,8,18,1,18,1,18,3,18,1571,8,18,1,18,1,18,1,18,3,18,
        1576,8,18,1,18,3,18,1579,8,18,1,18,1,18,3,18,1583,8,18,1,18,1,18,
        1,18,3,18,1588,8,18,1,18,1,18,3,18,1592,8,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1606,8,18,1,18,1,18,
        1,18,1,18,3,18,1612,8,18,1,18,1,18,1,18,3,18,1617,8,18,1,18,1,18,
        1,18,1,18,3,18,1623,8,18,1,18,3,18,1626,8,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,3,18,1637,8,18,1,18,1,18,1,18,1,18,1,18,
        3,18,1644,8,18,1,18,1,18,1,18,1,18,1,18,3,18,1651,8,18,1,18,3,18,
        1654,8,18,1,18,1,18,1,18,3,18,1659,8,18,1,18,1,18,1,18,1,18,3,18,
        1665,8,18,1,18,3,18,1668,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,3,18,1679,8,18,1,18,1,18,1,18,1,18,1,18,3,18,1686,8,18,
        1,18,3,18,1689,8,18,1,18,3,18,1692,8,18,1,18,1,18,3,18,1696,8,18,
        1,18,1,18,3,18,1700,8,18,1,18,1,18,1,18,3,18,1705,8,18,1,18,3,18,
        1708,8,18,1,18,3,18,1711,8,18,1,18,3,18,1714,8,18,1,18,1,18,1,18,
        1,18,3,18,1720,8,18,1,18,3,18,1723,8,18,1,18,3,18,1726,8,18,1,18,
        3,18,1729,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1738,8,18,
        1,18,1,18,3,18,1742,8,18,1,18,3,18,1745,8,18,1,18,3,18,1748,8,18,
        1,18,3,18,1751,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        3,18,1762,8,18,1,18,3,18,1765,8,18,1,18,3,18,1768,8,18,1,18,1,18,
        3,18,1772,8,18,1,18,1,18,1,18,1,18,3,18,1778,8,18,1,18,3,18,1781,
        8,18,1,18,3,18,1784,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        3,18,1794,8,18,1,18,3,18,1797,8,18,1,18,3,18,1800,8,18,1,18,3,18,
        1803,8,18,1,18,1,18,1,18,1,18,3,18,1809,8,18,1,18,3,18,1812,8,18,
        1,18,1,18,1,18,1,18,3,18,1818,8,18,1,18,1,18,1,18,1,18,3,18,1824,
        8,18,1,18,3,18,1827,8,18,1,18,1,18,3,18,1831,8,18,1,18,1,18,1,18,
        3,18,1836,8,18,1,18,3,18,1839,8,18,1,18,1,18,1,18,3,18,1844,8,18,
        1,18,3,18,1847,8,18,1,18,3,18,1850,8,18,1,18,1,18,1,18,1,18,3,18,
        1856,8,18,1,18,1,18,1,18,1,18,3,18,1862,8,18,1,18,1,18,1,18,1,18,
        1,18,3,18,1869,8,18,1,18,1,18,3,18,1873,8,18,1,18,3,18,1876,8,18,
        1,18,1,18,1,18,3,18,1881,8,18,1,18,3,18,1884,8,18,1,18,1,18,1,18,
        3,18,1889,8,18,1,18,1,18,3,18,1893,8,18,1,18,1,18,1,18,1,18,3,18,
        1899,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1907,8,18,1,18,1,18,
        1,18,1,18,3,18,1913,8,18,1,18,3,18,1916,8,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1930,8,18,1,18,3,18,
        1933,8,18,1,18,1,18,1,18,1,18,1,18,3,18,1940,8,18,1,18,1,18,1,18,
        1,18,1,18,3,18,1947,8,18,1,18,3,18,1950,8,18,1,18,1,18,1,18,1,18,
        1,18,3,18,1957,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        3,18,1968,8,18,3,18,1970,8,18,3,18,1972,8,18,1,18,1,18,1,18,1,18,
        1,18,3,18,1979,8,18,1,18,3,18,1982,8,18,1,18,3,18,1985,8,18,1,18,
        3,18,1988,8,18,1,18,1,18,1,18,1,18,3,18,1994,8,18,1,18,1,18,1,18,
        1,18,3,18,2000,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,2008,8,18,
        1,18,1,18,1,18,1,18,1,18,3,18,2015,8,18,1,18,1,18,1,18,1,18,3,18,
        2021,8,18,1,18,3,18,2024,8,18,1,18,3,18,2027,8,18,1,18,3,18,2030,
        8,18,1,18,1,18,1,18,1,18,1,18,3,18,2037,8,18,3,18,2039,8,18,1,19,
        1,19,1,19,1,19,1,19,1,19,3,19,2047,8,19,1,19,1,19,3,19,2051,8,19,
        1,19,1,19,1,19,5,19,2056,8,19,10,19,12,19,2059,9,19,3,19,2061,8,
        19,1,19,3,19,2064,8,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,2072,8,
        19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,2081,8,20,1,20,3,20,2084,
        8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        3,20,2098,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,3,20,2137,8,20,1,20,1,20,1,20,1,20,1,20,3,20,2144,8,20,3,20,
        2146,8,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,2154,8,20,1,20,3,20,
        2157,8,20,1,20,1,20,3,20,2161,8,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,3,20,2173,8,20,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,3,21,2185,8,21,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
        1,26,5,26,2207,8,26,10,26,12,26,2210,9,26,1,26,1,26,1,27,1,27,1,
        27,3,27,2217,8,27,1,27,1,27,1,27,1,27,3,27,2223,8,27,1,27,1,27,3,
        27,2227,8,27,1,28,1,28,1,28,5,28,2232,8,28,10,28,12,28,2235,9,28,
        1,29,1,29,1,29,1,29,1,29,3,29,2242,8,29,1,29,3,29,2245,8,29,1,30,
        1,30,1,30,1,30,3,30,2251,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,3,32,2264,8,32,1,32,1,32,1,32,1,32,1,32,3,32,
        2271,8,32,3,32,2273,8,32,1,33,1,33,1,33,3,33,2278,8,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,2289,8,33,1,33,1,33,1,33,
        1,33,3,33,2295,8,33,1,34,1,34,1,34,1,34,3,34,2301,8,34,1,34,3,34,
        2304,8,34,1,34,1,34,1,34,1,34,3,34,2310,8,34,1,34,3,34,2313,8,34,
        1,34,1,34,1,34,1,34,1,34,3,34,2320,8,34,3,34,2322,8,34,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,3,35,2331,8,35,1,35,1,35,1,35,1,35,1,35,
        1,35,5,35,2339,8,35,10,35,12,35,2342,9,35,1,35,3,35,2345,8,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,2356,8,35,10,35,
        12,35,2359,9,35,1,35,3,35,2362,8,35,1,35,1,35,1,35,1,35,1,35,1,35,
        5,35,2370,8,35,10,35,12,35,2373,9,35,1,35,1,35,1,35,1,35,3,35,2379,
        8,35,1,35,1,35,1,35,1,35,3,35,2385,8,35,3,35,2387,8,35,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,3,37,2400,8,37,1,37,
        1,37,3,37,2404,8,37,1,37,1,37,1,37,1,37,3,37,2410,8,37,1,37,1,37,
        3,37,2414,8,37,1,37,1,37,1,37,1,37,3,37,2420,8,37,1,37,1,37,3,37,
        2424,8,37,1,37,1,37,1,37,3,37,2429,8,37,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,3,38,2438,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,2472,
        8,38,1,38,1,38,1,38,1,38,1,38,3,38,2479,8,38,1,38,1,38,1,38,1,38,
        1,38,3,38,2486,8,38,1,38,3,38,2489,8,38,1,38,1,38,1,38,1,38,3,38,
        2495,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,
        2507,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        3,38,2520,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        3,38,2532,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,2541,8,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,2553,8,38,
        1,38,1,38,1,38,1,38,1,38,3,38,2560,8,38,1,38,1,38,1,38,1,38,1,38,
        1,38,3,38,2568,8,38,3,38,2570,8,38,1,39,1,39,3,39,2574,8,39,1,39,
        3,39,2577,8,39,1,39,3,39,2580,8,39,1,39,3,39,2583,8,39,1,39,1,39,
        3,39,2587,8,39,1,39,3,39,2590,8,39,1,40,1,40,1,40,1,40,3,40,2596,
        8,40,1,41,1,41,1,41,1,41,3,41,2602,8,41,3,41,2604,8,41,1,41,1,41,
        3,41,2608,8,41,1,41,1,41,3,41,2612,8,41,1,41,3,41,2615,8,41,1,41,
        3,41,2618,8,41,1,41,3,41,2621,8,41,1,41,1,41,3,41,2625,8,41,1,41,
        1,41,3,41,2629,8,41,1,41,3,41,2632,8,41,1,41,3,41,2635,8,41,1,41,
        3,41,2638,8,41,3,41,2640,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,3,42,2650,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,3,42,2664,8,42,1,42,1,42,1,42,1,42,1,42,3,42,2671,
        8,42,1,42,1,42,1,42,1,42,5,42,2677,8,42,10,42,12,42,2680,9,42,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,2692,8,42,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,2706,
        8,42,1,42,1,42,1,42,1,42,1,42,3,42,2713,8,42,1,42,1,42,1,42,1,42,
        5,42,2719,8,42,10,42,12,42,2722,9,42,1,42,1,42,3,42,2726,8,42,1,
        43,1,43,3,43,2730,8,43,1,43,3,43,2733,8,43,1,44,1,44,1,44,5,44,2738,
        8,44,10,44,12,44,2741,9,44,1,45,1,45,1,45,1,45,1,45,1,45,5,45,2749,
        8,45,10,45,12,45,2752,9,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,5,45,2762,8,45,10,45,12,45,2765,9,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,5,45,2775,8,45,10,45,12,45,2778,9,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,2791,8,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,3,45,2834,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,3,45,2851,8,45,1,45,1,45,1,45,1,45,1,
        45,1,45,3,45,2859,8,45,1,45,1,45,1,45,1,45,3,45,2865,8,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,3,45,2885,8,45,1,45,1,45,1,45,1,45,3,45,2891,8,
        45,1,45,1,45,1,45,1,45,3,45,2897,8,45,3,45,2899,8,45,1,46,1,46,1,
        46,1,46,1,46,5,46,2906,8,46,10,46,12,46,2909,9,46,1,46,3,46,2912,
        8,46,1,46,1,46,1,46,1,46,1,46,5,46,2919,8,46,10,46,12,46,2922,9,
        46,1,46,1,46,1,46,1,46,1,46,5,46,2929,8,46,10,46,12,46,2932,9,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,5,46,2952,8,46,10,46,12,46,2955,9,46,1,
        46,1,46,1,46,1,46,1,46,1,46,5,46,2963,8,46,10,46,12,46,2966,9,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,2977,8,46,1,46,
        1,46,1,46,1,46,1,46,5,46,2984,8,46,10,46,12,46,2987,9,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,2999,8,46,1,47,1,
        47,3,47,3003,8,47,1,48,1,48,1,48,1,48,1,48,3,48,3010,8,48,1,48,3,
        48,3013,8,48,1,48,3,48,3016,8,48,1,49,1,49,1,49,1,49,3,49,3022,8,
        49,1,49,3,49,3025,8,49,1,49,3,49,3028,8,49,1,49,1,49,1,49,1,49,1,
        49,1,49,5,49,3036,8,49,10,49,12,49,3039,9,49,1,49,1,49,3,49,3043,
        8,49,1,49,3,49,3046,8,49,1,49,1,49,1,49,1,49,3,49,3052,8,49,1,49,
        3,49,3055,8,49,1,49,1,49,1,49,1,49,3,49,3061,8,49,1,49,3,49,3064,
        8,49,1,49,3,49,3067,8,49,1,49,1,49,1,49,1,49,3,49,3073,8,49,1,49,
        3,49,3076,8,49,1,49,1,49,3,49,3080,8,49,1,49,1,49,1,49,3,49,3085,
        8,49,1,49,1,49,1,49,1,49,3,49,3091,8,49,1,49,1,49,1,49,1,49,1,49,
        3,49,3098,8,49,1,49,1,49,1,49,3,49,3103,8,49,3,49,3105,8,49,3,49,
        3107,8,49,1,49,3,49,3110,8,49,1,49,1,49,3,49,3114,8,49,1,49,1,49,
        1,49,3,49,3119,8,49,1,49,1,49,3,49,3123,8,49,1,49,1,49,1,49,3,49,
        3128,8,49,1,49,1,49,3,49,3132,8,49,1,49,1,49,1,49,3,49,3137,8,49,
        1,49,1,49,1,49,1,49,1,49,3,49,3144,8,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,3,49,3153,8,49,1,49,1,49,3,49,3157,8,49,1,49,3,49,3160,
        8,49,1,49,3,49,3163,8,49,1,49,1,49,1,49,1,49,1,49,3,49,3170,8,49,
        1,49,3,49,3173,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,3,49,3198,8,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,3206,8,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,3215,8,49,1,49,1,49,1,49,
        3,49,3220,8,49,3,49,3222,8,49,3,49,3224,8,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,3240,8,49,
        1,49,1,49,3,49,3244,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        3,49,3254,8,49,1,49,3,49,3257,8,49,3,49,3259,8,49,1,50,1,50,1,50,
        3,50,3264,8,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,
        3,53,3276,8,53,1,53,1,53,3,53,3280,8,53,1,53,1,53,1,53,1,53,3,53,
        3286,8,53,1,53,1,53,1,53,3,53,3291,8,53,1,53,1,53,1,53,3,53,3296,
        8,53,1,53,1,53,1,53,3,53,3301,8,53,1,53,1,53,1,53,1,53,1,53,1,53,
        3,53,3309,8,53,1,53,1,53,3,53,3313,8,53,1,53,1,53,1,53,1,53,3,53,
        3319,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,3329,8,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,3339,8,53,1,53,1,53,
        1,53,1,53,1,53,1,53,3,53,3347,8,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,3,53,3356,8,53,3,53,3358,8,53,1,53,1,53,1,53,1,53,1,53,3,53,
        3365,8,53,1,53,1,53,1,53,1,53,1,53,3,53,3372,8,53,1,53,3,53,3375,
        8,53,1,54,1,54,1,54,1,54,3,54,3381,8,54,1,54,3,54,3384,8,54,1,54,
        1,54,5,54,3388,8,54,10,54,12,54,3391,9,54,1,54,3,54,3394,8,54,1,
        54,1,54,1,54,1,54,1,54,5,54,3401,8,54,10,54,12,54,3404,9,54,1,54,
        3,54,3407,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,
        3418,8,54,1,54,1,54,1,54,1,54,1,54,3,54,3425,8,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,3,54,3436,8,54,1,54,1,54,1,54,1,54,
        3,54,3442,8,54,1,54,3,54,3445,8,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,3466,8,54,1,54,3,54,3469,8,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,3484,8,54,1,54,1,54,1,54,
        3,54,3489,8,54,1,54,3,54,3492,8,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,3,54,3502,8,54,1,54,1,54,3,54,3506,8,54,1,54,3,54,3509,
        8,54,1,54,1,54,1,54,1,54,3,54,3515,8,54,1,54,1,54,1,54,1,54,3,54,
        3521,8,54,1,54,3,54,3524,8,54,1,54,1,54,1,54,1,54,1,54,3,54,3531,
        8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,3543,
        8,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,3551,8,55,1,56,1,56,1,56,
        1,56,1,56,3,56,3558,8,56,1,56,1,56,3,56,3562,8,56,1,56,1,56,1,56,
        1,56,1,56,3,56,3569,8,56,1,56,1,56,1,56,1,56,3,56,3575,8,56,1,56,
        1,56,3,56,3579,8,56,1,56,3,56,3582,8,56,1,56,1,56,3,56,3586,8,56,
        1,56,3,56,3589,8,56,1,56,1,56,1,56,1,56,3,56,3595,8,56,1,56,1,56,
        1,56,3,56,3600,8,56,1,56,1,56,1,56,1,56,1,56,3,56,3607,8,56,1,56,
        3,56,3610,8,56,1,56,1,56,3,56,3614,8,56,1,56,1,56,1,56,1,56,1,56,
        3,56,3621,8,56,1,56,1,56,1,56,3,56,3626,8,56,1,56,1,56,1,56,1,56,
        1,56,3,56,3633,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        3,56,3644,8,56,1,56,1,56,1,56,1,56,1,56,3,56,3651,8,56,1,56,1,56,
        1,56,3,56,3656,8,56,1,56,1,56,1,56,3,56,3661,8,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,3673,8,56,1,56,1,56,1,56,
        3,56,3678,8,56,1,56,1,56,1,56,1,56,1,56,3,56,3685,8,56,1,56,1,56,
        1,56,1,56,1,56,1,56,3,56,3693,8,56,1,56,1,56,1,56,1,56,1,56,1,56,
        3,56,3701,8,56,1,56,3,56,3704,8,56,1,56,1,56,3,56,3708,8,56,1,56,
        1,56,3,56,3712,8,56,1,56,1,56,1,56,1,56,3,56,3718,8,56,1,56,1,56,
        3,56,3722,8,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,3730,8,56,1,56,
        1,56,3,56,3734,8,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,3742,8,56,
        1,56,1,56,3,56,3746,8,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,3754,
        8,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,3762,8,56,1,56,1,56,1,56,
        1,56,1,56,3,56,3769,8,56,1,56,3,56,3772,8,56,1,56,1,56,1,56,1,56,
        1,56,3,56,3779,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        3,56,3790,8,56,1,56,1,56,3,56,3794,8,56,1,56,1,56,1,56,1,56,1,56,
        1,56,3,56,3802,8,56,1,56,1,56,3,56,3806,8,56,1,56,1,56,1,56,1,56,
        1,56,1,56,3,56,3814,8,56,1,56,1,56,1,56,1,56,1,56,3,56,3821,8,56,
        1,56,1,56,3,56,3825,8,56,3,56,3827,8,56,1,57,1,57,1,57,5,57,3832,
        8,57,10,57,12,57,3835,9,57,1,58,1,58,1,58,1,58,3,58,3841,8,58,3,
        58,3843,8,58,1,59,1,59,1,59,5,59,3848,8,59,10,59,12,59,3851,9,59,
        1,60,1,60,1,60,1,60,3,60,3857,8,60,1,61,1,61,3,61,3861,8,61,1,61,
        1,61,1,61,1,61,3,61,3867,8,61,1,62,1,62,1,62,3,62,3872,8,62,3,62,
        3874,8,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,3882,8,62,3,62,3884,
        8,62,1,62,1,62,1,62,1,62,1,62,3,62,3891,8,62,3,62,3893,8,62,1,62,
        1,62,3,62,3897,8,62,1,62,1,62,1,62,1,62,3,62,3903,8,62,3,62,3905,
        8,62,1,62,3,62,3908,8,62,1,63,1,63,1,63,5,63,3913,8,63,10,63,12,
        63,3916,9,63,1,64,1,64,3,64,3920,8,64,1,65,1,65,1,65,3,65,3925,8,
        65,1,65,1,65,1,65,3,65,3930,8,65,5,65,3932,8,65,10,65,12,65,3935,
        9,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,
        3948,8,65,1,65,1,65,1,65,3,65,3953,8,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,3,65,3966,8,65,3,65,3968,8,65,1,66,
        1,66,1,66,1,66,1,66,3,66,3975,8,66,1,67,1,67,1,67,1,67,1,67,1,67,
        3,67,3983,8,67,1,67,1,67,3,67,3987,8,67,1,67,1,67,1,67,3,67,3992,
        8,67,1,67,1,67,1,67,3,67,3997,8,67,1,67,1,67,1,67,3,67,4002,8,67,
        1,67,1,67,1,67,1,67,1,67,1,67,3,67,4010,8,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,3,67,4019,8,67,1,67,3,67,4022,8,67,1,68,1,68,1,68,
        3,68,4027,8,68,3,68,4029,8,68,1,68,1,68,1,68,1,68,3,68,4035,8,68,
        1,68,1,68,1,68,1,68,1,68,3,68,4042,8,68,1,69,1,69,1,69,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,4056,8,70,1,71,1,71,3,71,
        4060,8,71,1,71,1,71,1,71,3,71,4065,8,71,1,71,1,71,1,71,1,71,3,71,
        4071,8,71,1,72,1,72,1,72,1,72,3,72,4077,8,72,1,72,1,72,1,72,1,72,
        1,72,3,72,4084,8,72,1,72,3,72,4087,8,72,1,72,1,72,1,72,1,72,3,72,
        4093,8,72,1,73,1,73,1,73,1,73,3,73,4099,8,73,1,73,3,73,4102,8,73,
        1,73,1,73,1,73,1,73,3,73,4108,8,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,3,73,4118,8,73,1,73,1,73,3,73,4122,8,73,1,73,3,73,4125,
        8,73,3,73,4127,8,73,1,74,1,74,1,74,3,74,4132,8,74,1,74,1,74,1,74,
        3,74,4137,8,74,1,75,1,75,3,75,4141,8,75,1,75,1,75,1,75,1,75,3,75,
        4147,8,75,1,76,1,76,1,76,1,76,1,76,3,76,4154,8,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,4166,8,76,3,76,4168,8,76,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,
        4182,8,77,1,78,3,78,4185,8,78,1,78,1,78,1,78,3,78,4190,8,78,1,78,
        1,78,1,78,1,78,1,78,1,78,3,78,4198,8,78,1,79,3,79,4201,8,79,1,79,
        1,79,1,79,3,79,4206,8,79,1,79,1,79,1,79,3,79,4211,8,79,1,79,1,79,
        1,80,1,80,1,80,1,80,5,80,4219,8,80,10,80,12,80,4222,9,80,1,80,1,
        80,1,81,1,81,3,81,4228,8,81,1,82,3,82,4231,8,82,1,82,3,82,4234,8,
        82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,4242,8,82,10,82,12,82,4245,
        9,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,4253,8,82,1,82,1,82,1,82,
        1,82,3,82,4259,8,82,1,82,1,82,1,82,1,82,3,82,4265,8,82,1,82,1,82,
        1,82,3,82,4270,8,82,1,82,1,82,1,82,3,82,4275,8,82,1,82,3,82,4278,
        8,82,1,82,3,82,4281,8,82,1,82,3,82,4284,8,82,1,82,3,82,4287,8,82,
        1,82,3,82,4290,8,82,1,82,3,82,4293,8,82,1,82,3,82,4296,8,82,1,82,
        3,82,4299,8,82,1,82,3,82,4302,8,82,1,82,3,82,4305,8,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,4316,8,82,1,82,3,82,4319,
        8,82,1,82,3,82,4322,8,82,1,82,3,82,4325,8,82,1,82,3,82,4328,8,82,
        3,82,4330,8,82,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        3,84,4342,8,84,1,85,1,85,1,85,1,85,1,85,3,85,4349,8,85,1,86,1,86,
        1,87,1,87,3,87,4355,8,87,1,88,1,88,3,88,4359,8,88,1,89,1,89,1,89,
        3,89,4364,8,89,1,90,1,90,1,90,5,90,4369,8,90,10,90,12,90,4372,9,
        90,1,91,1,91,3,91,4376,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,
        92,4385,8,92,3,92,4387,8,92,1,93,1,93,1,93,1,93,3,93,4393,8,93,1,
        93,3,93,4396,8,93,1,94,1,94,3,94,4400,8,94,1,94,3,94,4403,8,94,1,
        94,3,94,4406,8,94,1,95,1,95,1,96,1,96,1,97,1,97,1,97,1,97,1,98,1,
        98,1,98,1,98,3,98,4420,8,98,1,99,1,99,1,100,1,100,1,100,1,100,1,
        101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,103,1,103,1,103,
        1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,5,104,4447,8,104,
        10,104,12,104,4450,9,104,1,104,1,104,1,105,1,105,1,105,1,105,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,3,106,4484,8,106,3,106,4486,8,106,1,107,1,107,
        1,107,1,107,1,107,1,107,1,107,3,107,4495,8,107,1,108,1,108,3,108,
        4499,8,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,4508,
        8,108,1,108,1,108,1,108,1,108,3,108,4514,8,108,1,108,1,108,1,108,
        1,108,3,108,4520,8,108,1,108,3,108,4523,8,108,1,108,3,108,4526,8,
        108,1,108,3,108,4529,8,108,1,108,3,108,4532,8,108,1,109,1,109,1,
        109,1,109,1,109,1,109,3,109,4540,8,109,1,110,1,110,1,110,1,110,1,
        110,1,110,3,110,4548,8,110,1,110,3,110,4551,8,110,1,111,3,111,4554,
        8,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,112,1,112,3,112,
        4565,8,112,1,112,1,112,1,112,1,112,3,112,4571,8,112,1,112,5,112,
        4574,8,112,10,112,12,112,4577,9,112,1,113,1,113,1,114,1,114,1,114,
        1,114,1,114,1,114,3,114,4587,8,114,1,115,1,115,3,115,4591,8,115,
        1,115,3,115,4594,8,115,1,115,3,115,4597,8,115,1,115,3,115,4600,8,
        115,1,115,3,115,4603,8,115,1,115,3,115,4606,8,115,1,115,1,115,1,
        115,1,116,1,116,1,116,1,116,5,116,4615,8,116,10,116,12,116,4618,
        9,116,1,117,1,117,3,117,4622,8,117,1,117,1,117,1,117,1,117,1,117,
        1,118,1,118,1,118,1,118,5,118,4633,8,118,10,118,12,118,4636,9,118,
        1,118,1,118,1,119,1,119,3,119,4642,8,119,1,119,1,119,1,120,1,120,
        1,121,1,121,1,121,1,122,1,122,1,122,1,123,3,123,4655,8,123,1,123,
        1,123,1,123,3,123,4660,8,123,1,123,1,123,1,123,3,123,4665,8,123,
        5,123,4667,8,123,10,123,12,123,4670,9,123,1,124,1,124,1,124,1,125,
        1,125,1,125,1,125,1,125,1,126,1,126,1,126,5,126,4683,8,126,10,126,
        12,126,4686,9,126,1,127,1,127,5,127,4690,8,127,10,127,12,127,4693,
        9,127,1,128,1,128,1,128,3,128,4698,8,128,1,128,1,128,3,128,4702,
        8,128,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,4712,
        8,129,1,130,1,130,1,130,1,130,5,130,4718,8,130,10,130,12,130,4721,
        9,130,1,130,1,130,1,130,1,130,1,130,1,130,5,130,4729,8,130,10,130,
        12,130,4732,9,130,1,130,1,130,3,130,4736,8,130,1,131,1,131,1,131,
        1,131,1,132,1,132,1,132,1,132,1,132,5,132,4747,8,132,10,132,12,132,
        4750,9,132,3,132,4752,8,132,1,132,1,132,1,132,1,132,1,132,1,132,
        5,132,4760,8,132,10,132,12,132,4763,9,132,3,132,4765,8,132,1,132,
        1,132,1,132,1,132,1,132,1,132,1,132,5,132,4774,8,132,10,132,12,132,
        4777,9,132,1,132,1,132,1,132,1,132,1,132,5,132,4784,8,132,10,132,
        12,132,4787,9,132,3,132,4789,8,132,1,133,1,133,1,133,1,133,5,133,
        4795,8,133,10,133,12,133,4798,9,133,3,133,4800,8,133,1,133,1,133,
        1,134,1,134,1,134,1,135,1,135,1,135,1,136,1,136,3,136,4812,8,136,
        1,136,5,136,4815,8,136,10,136,12,136,4818,9,136,1,136,1,136,1,137,
        1,137,1,137,1,137,3,137,4826,8,137,1,137,5,137,4829,8,137,10,137,
        12,137,4832,9,137,1,137,1,137,3,137,4836,8,137,1,138,1,138,1,138,
        1,138,3,138,4842,8,138,3,138,4844,8,138,1,138,3,138,4847,8,138,1,
        139,1,139,1,139,1,139,3,139,4853,8,139,1,140,1,140,1,140,5,140,4858,
        8,140,10,140,12,140,4861,9,140,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,5,141,4870,8,141,10,141,12,141,4873,9,141,3,141,4875,8,141,
        1,141,1,141,1,141,1,141,1,141,1,141,5,141,4883,8,141,10,141,12,141,
        4886,9,141,1,142,3,142,4889,8,142,1,142,3,142,4892,8,142,1,143,1,
        143,1,143,1,143,1,143,5,143,4899,8,143,10,143,12,143,4902,9,143,
        1,144,1,144,3,144,4906,8,144,1,144,1,144,3,144,4910,8,144,1,145,
        1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,3,145,4922,
        8,145,1,146,1,146,1,146,1,146,1,146,5,146,4929,8,146,10,146,12,146,
        4932,9,146,1,147,3,147,4935,8,147,1,147,1,147,1,147,3,147,4940,8,
        147,1,147,1,147,3,147,4944,8,147,1,147,1,147,3,147,4948,8,147,1,
        147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,4958,8,147,1,
        148,1,148,1,148,1,148,3,148,4964,8,148,1,149,1,149,1,149,1,149,1,
        150,1,150,1,150,5,150,4973,8,150,10,150,12,150,4976,9,150,1,151,
        1,151,1,151,1,151,3,151,4982,8,151,1,151,1,151,1,152,1,152,3,152,
        4988,8,152,1,152,3,152,4991,8,152,1,152,3,152,4994,8,152,1,152,3,
        152,4997,8,152,1,152,3,152,5000,8,152,1,152,1,152,3,152,5004,8,152,
        1,152,3,152,5007,8,152,1,152,5,152,5010,8,152,10,152,12,152,5013,
        9,152,1,152,1,152,1,152,1,152,1,152,5,152,5020,8,152,10,152,12,152,
        5023,9,152,1,152,1,152,1,152,3,152,5028,8,152,1,152,1,152,1,152,
        1,152,1,152,1,152,1,152,3,152,5037,8,152,1,153,1,153,1,153,1,154,
        1,154,1,154,1,154,1,154,1,155,1,155,1,155,5,155,5050,8,155,10,155,
        12,155,5053,9,155,1,156,1,156,1,156,1,156,1,157,1,157,3,157,5061,
        8,157,1,158,1,158,3,158,5065,8,158,1,159,3,159,5068,8,159,1,159,
        1,159,3,159,5072,8,159,3,159,5074,8,159,1,160,1,160,1,160,5,160,
        5079,8,160,10,160,12,160,5082,9,160,1,161,1,161,1,161,5,161,5087,
        8,161,10,161,12,161,5090,9,161,1,162,1,162,1,162,3,162,5095,8,162,
        1,163,1,163,1,163,5,163,5100,8,163,10,163,12,163,5103,9,163,1,164,
        1,164,1,164,3,164,5108,8,164,1,164,3,164,5111,8,164,1,164,1,164,
        3,164,5115,8,164,1,164,1,164,1,164,1,164,1,164,3,164,5122,8,164,
        1,164,3,164,5125,8,164,1,164,3,164,5128,8,164,1,164,1,164,1,164,
        1,164,1,164,3,164,5135,8,164,3,164,5137,8,164,1,164,1,164,1,164,
        1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
        3,164,5153,8,164,3,164,5155,8,164,3,164,5157,8,164,1,164,1,164,1,
        164,1,164,1,164,1,164,1,164,3,164,5166,8,164,3,164,5168,8,164,1,
        164,1,164,3,164,5172,8,164,1,165,1,165,1,165,5,165,5177,8,165,10,
        165,12,165,5180,9,165,1,166,1,166,1,166,1,166,3,166,5186,8,166,1,
        166,1,166,1,166,1,166,3,166,5192,8,166,1,166,1,166,1,166,1,166,1,
        166,3,166,5199,8,166,1,166,1,166,3,166,5203,8,166,1,167,1,167,1,
        167,5,167,5208,8,167,10,167,12,167,5211,9,167,1,168,1,168,1,168,
        1,168,3,168,5217,8,168,1,168,1,168,1,168,1,168,3,168,5223,8,168,
        1,169,1,169,1,169,1,169,3,169,5229,8,169,1,169,1,169,1,169,1,169,
        1,169,1,169,3,169,5237,8,169,1,170,1,170,1,170,1,170,3,170,5243,
        8,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,171,1,171,
        1,171,1,171,1,171,1,171,1,171,3,171,5260,8,171,1,172,1,172,1,172,
        1,172,3,172,5266,8,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
        5,172,5275,8,172,10,172,12,172,5278,9,172,1,172,1,172,1,172,3,172,
        5283,8,172,3,172,5285,8,172,1,173,1,173,1,173,1,173,5,173,5291,8,
        173,10,173,12,173,5294,9,173,1,173,1,173,1,174,1,174,1,175,1,175,
        1,175,5,175,5303,8,175,10,175,12,175,5306,9,175,1,176,1,176,1,176,
        1,176,1,176,3,176,5313,8,176,1,176,3,176,5316,8,176,1,177,1,177,
        1,178,1,178,1,178,1,178,1,178,5,178,5325,8,178,10,178,12,178,5328,
        9,178,1,178,1,178,1,179,1,179,1,179,1,179,5,179,5336,8,179,10,179,
        12,179,5339,9,179,1,180,1,180,3,180,5343,8,180,1,180,3,180,5346,
        8,180,1,181,1,181,1,181,5,181,5351,8,181,10,181,12,181,5354,9,181,
        1,182,1,182,3,182,5358,8,182,1,183,1,183,1,183,1,183,1,183,1,183,
        1,183,1,183,4,183,5368,8,183,11,183,12,183,5369,1,183,1,183,1,183,
        1,183,3,183,5376,8,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,1,184,3,184,5398,8,184,1,184,1,184,3,184,5402,8,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        5,184,5416,8,184,10,184,12,184,5419,9,184,1,185,1,185,1,185,1,185,
        5,185,5425,8,185,10,185,12,185,5428,9,185,3,185,5430,8,185,1,185,
        1,185,1,186,1,186,3,186,5436,8,186,1,187,3,187,5439,8,187,1,187,
        1,187,1,187,1,187,1,187,1,187,3,187,5447,8,187,1,187,1,187,1,187,
        3,187,5452,8,187,1,187,1,187,1,187,3,187,5457,8,187,1,187,1,187,
        1,187,1,187,1,187,1,187,3,187,5465,8,187,1,187,1,187,1,187,1,187,
        1,187,5,187,5472,8,187,10,187,12,187,5475,9,187,1,187,1,187,1,187,
        1,187,3,187,5481,8,187,1,187,1,187,1,187,3,187,5486,8,187,1,187,
        3,187,5489,8,187,1,188,1,188,1,188,1,188,3,188,5495,8,188,1,188,
        1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
        1,188,1,188,1,188,1,188,1,188,1,188,1,188,5,188,5516,8,188,10,188,
        12,188,5519,9,188,1,189,1,189,1,190,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,5558,8,190,1,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,
        5571,8,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,3,190,5584,8,190,1,190,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,3,190,5597,8,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,
        5612,8,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,4,190,5625,8,190,11,190,12,190,5626,1,190,1,190,3,190,
        5631,8,190,1,190,1,190,1,190,1,190,1,190,4,190,5638,8,190,11,190,
        12,190,5639,1,190,1,190,3,190,5644,8,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,5,190,5659,
        8,190,10,190,12,190,5662,9,190,1,190,1,190,1,190,1,190,5,190,5668,
        8,190,10,190,12,190,5671,9,190,1,190,1,190,1,190,1,190,1,190,5,190,
        5678,8,190,10,190,12,190,5681,9,190,1,190,1,190,3,190,5685,8,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,3,190,5713,8,190,1,190,1,190,3,190,5717,
        8,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,
        5728,8,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,5736,8,190,
        1,190,1,190,1,190,3,190,5741,8,190,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,3,190,5753,8,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,5765,8,190,5,190,
        5767,8,190,10,190,12,190,5770,9,190,1,191,1,191,1,191,1,191,1,191,
        1,191,1,191,1,191,1,191,1,191,3,191,5782,8,191,1,192,1,192,1,192,
        3,192,5787,8,192,3,192,5789,8,192,1,193,1,193,1,193,3,193,5794,8,
        193,1,193,1,193,1,193,5,193,5799,8,193,10,193,12,193,5802,9,193,
        1,193,1,193,1,193,1,193,1,193,5,193,5809,8,193,10,193,12,193,5812,
        9,193,3,193,5814,8,193,3,193,5816,8,193,1,193,1,193,1,193,3,193,
        5821,8,193,1,194,1,194,1,194,3,194,5826,8,194,1,194,1,194,1,195,
        1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,3,195,5846,8,195,1,196,1,196,3,196,5850,
        8,196,1,196,3,196,5853,8,196,1,196,3,196,5856,8,196,1,196,1,196,
        1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,3,197,5869,
        8,197,1,198,1,198,1,199,1,199,1,199,1,199,1,199,1,199,1,199,3,199,
        5880,8,199,1,200,1,200,1,200,5,200,5885,8,200,10,200,12,200,5888,
        9,200,1,201,3,201,5891,8,201,1,201,1,201,1,201,3,201,5896,8,201,
        1,201,3,201,5899,8,201,1,201,1,201,3,201,5903,8,201,1,202,1,202,
        1,202,1,202,1,202,1,202,3,202,5911,8,202,1,202,1,202,1,202,3,202,
        5916,8,202,1,202,1,202,5,202,5920,8,202,10,202,12,202,5923,9,202,
        1,202,1,202,1,202,1,202,1,202,1,202,3,202,5931,8,202,1,202,1,202,
        1,202,1,202,1,202,5,202,5938,8,202,10,202,12,202,5941,9,202,1,202,
        1,202,1,202,1,202,1,202,5,202,5948,8,202,10,202,12,202,5951,9,202,
        1,202,1,202,1,202,3,202,5956,8,202,1,203,1,203,1,204,1,204,1,205,
        1,205,1,205,1,205,1,205,1,206,1,206,1,206,1,206,1,207,1,207,1,208,
        1,208,3,208,5975,8,208,1,208,3,208,5978,8,208,1,209,1,209,1,209,
        1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,5,209,
        6004,8,209,10,209,12,209,6007,9,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,1,209,5,209,6017,8,209,10,209,12,209,6020,9,209,1,209,
        3,209,6023,8,209,3,209,6025,8,209,1,210,1,210,1,210,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,3,210,6059,8,210,1,211,1,211,1,211,
        5,211,6064,8,211,10,211,12,211,6067,9,211,1,212,1,212,1,212,1,212,
        3,212,6073,8,212,1,213,1,213,1,213,1,214,1,214,1,214,3,214,6081,
        8,214,1,214,1,214,1,214,3,214,6086,8,214,1,215,1,215,1,215,1,215,
        3,215,6092,8,215,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,3,216,6104,8,216,1,217,1,217,1,217,1,218,1,218,4,218,
        6111,8,218,11,218,12,218,6112,1,218,3,218,6116,8,218,1,219,1,219,
        1,220,1,220,1,220,3,220,6123,8,220,1,221,1,221,1,222,3,222,6128,
        8,222,1,222,1,222,3,222,6132,8,222,1,222,3,222,6135,8,222,1,223,
        1,223,1,223,2,532,539,4,224,368,376,380,224,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
        264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,
        296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
        328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,
        360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,
        392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,
        424,426,428,430,432,434,436,438,440,442,444,446,0,65,1,0,354,355,
        2,0,202,202,355,355,2,0,37,37,199,199,2,0,34,34,543,543,3,0,19,19,
        157,157,479,479,2,0,340,340,389,389,2,0,198,198,228,228,3,0,206,
        206,273,273,414,414,2,0,173,173,317,317,1,0,494,495,2,0,113,113,
        407,407,2,0,114,114,408,408,2,0,82,82,186,186,2,0,169,169,501,501,
        2,0,230,231,255,256,3,0,27,27,137,137,293,293,3,0,112,112,383,383,
        465,465,1,0,153,154,2,0,228,228,464,464,2,0,19,19,448,448,3,0,48,
        48,242,242,308,308,4,0,56,56,215,215,273,273,403,403,3,0,128,128,
        222,222,409,409,1,0,11,12,2,0,318,318,509,509,2,0,538,538,543,543,
        1,0,329,330,2,0,271,271,366,366,2,0,136,136,227,227,2,0,34,34,87,
        87,5,0,156,156,209,209,344,344,467,467,496,496,2,0,139,140,177,177,
        10,0,21,21,24,24,147,147,278,278,292,292,320,320,328,328,341,341,
        393,393,419,419,3,0,172,172,297,297,478,478,2,0,21,21,144,144,2,
        0,31,31,139,139,2,0,189,189,260,260,4,0,291,291,312,312,538,538,
        543,543,8,0,50,50,205,205,219,219,290,290,296,296,361,361,380,381,
        442,442,1,0,247,248,2,0,25,25,526,526,3,0,267,267,375,375,395,395,
        1,0,282,288,2,0,183,183,470,470,2,0,519,520,524,524,2,0,149,149,
        521,523,1,0,519,520,7,0,128,128,222,222,298,298,300,300,409,409,
        502,502,511,511,2,0,47,47,51,52,2,0,122,122,462,462,2,0,121,121,
        461,461,3,0,15,15,116,116,129,129,3,0,120,120,130,130,441,441,2,
        0,29,29,412,412,2,0,206,206,414,414,2,0,115,115,460,460,2,0,421,
        421,482,482,1,0,236,237,2,0,366,366,402,402,2,0,192,192,351,351,
        4,0,115,115,125,125,127,127,460,460,1,0,512,518,2,0,521,521,543,
        543,1,0,544,545,98,0,9,10,13,13,15,15,17,20,24,24,28,29,32,33,35,
        36,38,41,44,44,47,60,62,64,68,73,75,76,78,80,82,94,96,100,102,103,
        107,112,115,133,136,136,138,138,141,142,145,146,150,151,155,155,
        158,159,161,167,169,171,173,173,176,176,180,180,182,182,184,189,
        196,197,200,200,202,202,204,206,209,209,211,213,215,217,219,224,
        226,227,229,229,231,231,242,244,246,251,253,254,258,258,260,260,
        262,263,265,266,269,270,273,278,280,281,283,290,292,296,298,303,
        305,310,313,313,315,316,318,320,327,328,330,342,344,344,346,350,
        354,354,356,365,370,373,379,382,384,391,393,393,395,395,398,400,
        403,407,409,409,412,415,418,419,422,422,424,427,429,442,448,448,
        452,454,456,457,459,462,465,465,467,468,471,472,474,474,476,476,
        480,481,483,483,486,486,488,488,490,502,507,507,511,511,533,535,
        7248,0,451,1,0,0,0,2,459,1,0,0,0,4,487,1,0,0,0,6,575,1,0,0,0,8,601,
        1,0,0,0,10,620,1,0,0,0,12,761,1,0,0,0,14,819,1,0,0,0,16,840,1,0,
        0,0,18,957,1,0,0,0,20,1111,1,0,0,0,22,1150,1,0,0,0,24,1212,1,0,0,
        0,26,1371,1,0,0,0,28,1375,1,0,0,0,30,1482,1,0,0,0,32,1484,1,0,0,
        0,34,1490,1,0,0,0,36,2038,1,0,0,0,38,2040,1,0,0,0,40,2172,1,0,0,
        0,42,2184,1,0,0,0,44,2186,1,0,0,0,46,2190,1,0,0,0,48,2194,1,0,0,
        0,50,2197,1,0,0,0,52,2201,1,0,0,0,54,2226,1,0,0,0,56,2228,1,0,0,
        0,58,2236,1,0,0,0,60,2246,1,0,0,0,62,2252,1,0,0,0,64,2272,1,0,0,
        0,66,2294,1,0,0,0,68,2321,1,0,0,0,70,2386,1,0,0,0,72,2388,1,0,0,
        0,74,2428,1,0,0,0,76,2569,1,0,0,0,78,2571,1,0,0,0,80,2595,1,0,0,
        0,82,2639,1,0,0,0,84,2725,1,0,0,0,86,2732,1,0,0,0,88,2734,1,0,0,
        0,90,2898,1,0,0,0,92,2998,1,0,0,0,94,3000,1,0,0,0,96,3004,1,0,0,
        0,98,3258,1,0,0,0,100,3263,1,0,0,0,102,3265,1,0,0,0,104,3268,1,0,
        0,0,106,3374,1,0,0,0,108,3530,1,0,0,0,110,3550,1,0,0,0,112,3826,
        1,0,0,0,114,3828,1,0,0,0,116,3842,1,0,0,0,118,3844,1,0,0,0,120,3852,
        1,0,0,0,122,3858,1,0,0,0,124,3873,1,0,0,0,126,3909,1,0,0,0,128,3919,
        1,0,0,0,130,3967,1,0,0,0,132,3969,1,0,0,0,134,4021,1,0,0,0,136,4041,
        1,0,0,0,138,4043,1,0,0,0,140,4046,1,0,0,0,142,4070,1,0,0,0,144,4092,
        1,0,0,0,146,4126,1,0,0,0,148,4128,1,0,0,0,150,4146,1,0,0,0,152,4167,
        1,0,0,0,154,4181,1,0,0,0,156,4197,1,0,0,0,158,4200,1,0,0,0,160,4214,
        1,0,0,0,162,4227,1,0,0,0,164,4329,1,0,0,0,166,4331,1,0,0,0,168,4341,
        1,0,0,0,170,4343,1,0,0,0,172,4350,1,0,0,0,174,4354,1,0,0,0,176,4358,
        1,0,0,0,178,4363,1,0,0,0,180,4365,1,0,0,0,182,4375,1,0,0,0,184,4377,
        1,0,0,0,186,4388,1,0,0,0,188,4397,1,0,0,0,190,4407,1,0,0,0,192,4409,
        1,0,0,0,194,4411,1,0,0,0,196,4419,1,0,0,0,198,4421,1,0,0,0,200,4423,
        1,0,0,0,202,4427,1,0,0,0,204,4431,1,0,0,0,206,4435,1,0,0,0,208,4441,
        1,0,0,0,210,4453,1,0,0,0,212,4485,1,0,0,0,214,4487,1,0,0,0,216,4496,
        1,0,0,0,218,4539,1,0,0,0,220,4541,1,0,0,0,222,4553,1,0,0,0,224,4558,
        1,0,0,0,226,4578,1,0,0,0,228,4586,1,0,0,0,230,4588,1,0,0,0,232,4610,
        1,0,0,0,234,4619,1,0,0,0,236,4628,1,0,0,0,238,4639,1,0,0,0,240,4645,
        1,0,0,0,242,4647,1,0,0,0,244,4650,1,0,0,0,246,4654,1,0,0,0,248,4671,
        1,0,0,0,250,4674,1,0,0,0,252,4679,1,0,0,0,254,4687,1,0,0,0,256,4694,
        1,0,0,0,258,4711,1,0,0,0,260,4735,1,0,0,0,262,4737,1,0,0,0,264,4788,
        1,0,0,0,266,4790,1,0,0,0,268,4803,1,0,0,0,270,4806,1,0,0,0,272,4809,
        1,0,0,0,274,4821,1,0,0,0,276,4846,1,0,0,0,278,4848,1,0,0,0,280,4854,
        1,0,0,0,282,4862,1,0,0,0,284,4888,1,0,0,0,286,4893,1,0,0,0,288,4903,
        1,0,0,0,290,4921,1,0,0,0,292,4923,1,0,0,0,294,4957,1,0,0,0,296,4963,
        1,0,0,0,298,4965,1,0,0,0,300,4969,1,0,0,0,302,4977,1,0,0,0,304,5036,
        1,0,0,0,306,5038,1,0,0,0,308,5041,1,0,0,0,310,5046,1,0,0,0,312,5054,
        1,0,0,0,314,5060,1,0,0,0,316,5064,1,0,0,0,318,5073,1,0,0,0,320,5075,
        1,0,0,0,322,5083,1,0,0,0,324,5091,1,0,0,0,326,5096,1,0,0,0,328,5104,
        1,0,0,0,330,5173,1,0,0,0,332,5181,1,0,0,0,334,5204,1,0,0,0,336,5216,
        1,0,0,0,338,5224,1,0,0,0,340,5238,1,0,0,0,342,5252,1,0,0,0,344,5261,
        1,0,0,0,346,5286,1,0,0,0,348,5297,1,0,0,0,350,5299,1,0,0,0,352,5307,
        1,0,0,0,354,5317,1,0,0,0,356,5319,1,0,0,0,358,5331,1,0,0,0,360,5340,
        1,0,0,0,362,5347,1,0,0,0,364,5357,1,0,0,0,366,5375,1,0,0,0,368,5401,
        1,0,0,0,370,5420,1,0,0,0,372,5435,1,0,0,0,374,5488,1,0,0,0,376,5494,
        1,0,0,0,378,5520,1,0,0,0,380,5740,1,0,0,0,382,5781,1,0,0,0,384,5788,
        1,0,0,0,386,5790,1,0,0,0,388,5825,1,0,0,0,390,5845,1,0,0,0,392,5847,
        1,0,0,0,394,5868,1,0,0,0,396,5870,1,0,0,0,398,5879,1,0,0,0,400,5881,
        1,0,0,0,402,5902,1,0,0,0,404,5955,1,0,0,0,406,5957,1,0,0,0,408,5959,
        1,0,0,0,410,5961,1,0,0,0,412,5966,1,0,0,0,414,5970,1,0,0,0,416,5972,
        1,0,0,0,418,6024,1,0,0,0,420,6058,1,0,0,0,422,6060,1,0,0,0,424,6068,
        1,0,0,0,426,6074,1,0,0,0,428,6077,1,0,0,0,430,6091,1,0,0,0,432,6103,
        1,0,0,0,434,6105,1,0,0,0,436,6115,1,0,0,0,438,6117,1,0,0,0,440,6122,
        1,0,0,0,442,6124,1,0,0,0,444,6134,1,0,0,0,446,6136,1,0,0,0,448,450,
        3,6,3,0,449,448,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,
        1,0,0,0,452,454,1,0,0,0,453,451,1,0,0,0,454,455,5,0,0,1,455,1,1,
        0,0,0,456,458,5,1,0,0,457,456,1,0,0,0,458,461,1,0,0,0,459,457,1,
        0,0,0,459,460,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,462,464,3,
        6,3,0,463,462,1,0,0,0,463,464,1,0,0,0,464,473,1,0,0,0,465,467,5,
        1,0,0,466,465,1,0,0,0,467,468,1,0,0,0,468,466,1,0,0,0,468,469,1,
        0,0,0,469,470,1,0,0,0,470,472,3,6,3,0,471,466,1,0,0,0,472,475,1,
        0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,479,1,0,0,0,475,473,1,
        0,0,0,476,478,5,1,0,0,477,476,1,0,0,0,478,481,1,0,0,0,479,477,1,
        0,0,0,479,480,1,0,0,0,480,482,1,0,0,0,481,479,1,0,0,0,482,483,5,
        0,0,1,483,3,1,0,0,0,484,486,5,1,0,0,485,484,1,0,0,0,486,489,1,0,
        0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,491,1,0,0,0,489,487,1,0,
        0,0,490,492,3,6,3,0,491,490,1,0,0,0,491,492,1,0,0,0,492,496,1,0,
        0,0,493,495,5,1,0,0,494,493,1,0,0,0,495,498,1,0,0,0,496,494,1,0,
        0,0,496,497,1,0,0,0,497,499,1,0,0,0,498,496,1,0,0,0,499,500,5,0,
        0,1,500,5,1,0,0,0,501,576,3,8,4,0,502,503,5,64,0,0,503,504,3,320,
        160,0,504,513,5,2,0,0,505,510,3,364,182,0,506,507,5,4,0,0,507,509,
        3,364,182,0,508,506,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,
        511,1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,0,513,505,1,0,0,0,513,
        514,1,0,0,0,514,515,1,0,0,0,515,516,5,3,0,0,516,576,1,0,0,0,517,
        525,5,22,0,0,518,521,5,101,0,0,519,520,5,321,0,0,520,522,5,380,0,
        0,521,519,1,0,0,0,521,522,1,0,0,0,522,525,1,0,0,0,523,525,5,380,
        0,0,524,517,1,0,0,0,524,518,1,0,0,0,524,523,1,0,0,0,525,526,1,0,
        0,0,526,527,7,0,0,0,527,528,3,320,160,0,528,532,5,2,0,0,529,531,
        9,0,0,0,530,529,1,0,0,0,531,534,1,0,0,0,532,533,1,0,0,0,532,530,
        1,0,0,0,533,535,1,0,0,0,534,532,1,0,0,0,535,539,5,3,0,0,536,538,
        9,0,0,0,537,536,1,0,0,0,538,541,1,0,0,0,539,540,1,0,0,0,539,537,
        1,0,0,0,540,576,1,0,0,0,541,539,1,0,0,0,542,543,5,153,0,0,543,546,
        7,0,0,0,544,545,5,225,0,0,545,547,5,175,0,0,546,544,1,0,0,0,546,
        547,1,0,0,0,547,548,1,0,0,0,548,576,3,320,160,0,549,550,5,420,0,
        0,550,551,7,1,0,0,551,555,5,434,0,0,552,553,5,267,0,0,553,556,3,
        376,188,0,554,556,3,242,121,0,555,552,1,0,0,0,555,554,1,0,0,0,555,
        556,1,0,0,0,556,576,1,0,0,0,557,558,5,420,0,0,558,559,5,101,0,0,
        559,560,5,355,0,0,560,576,3,320,160,0,561,563,5,16,0,0,562,561,1,
        0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,565,5,420,0,0,565,566,
        7,2,0,0,566,569,5,91,0,0,567,568,5,267,0,0,568,570,3,376,188,0,569,
        567,1,0,0,0,569,570,1,0,0,0,570,573,1,0,0,0,571,572,5,198,0,0,572,
        574,5,543,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,576,1,0,0,0,575,
        501,1,0,0,0,575,502,1,0,0,0,575,524,1,0,0,0,575,542,1,0,0,0,575,
        549,1,0,0,0,575,557,1,0,0,0,575,562,1,0,0,0,576,7,1,0,0,0,577,579,
        3,188,94,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,582,
        3,222,111,0,581,583,3,220,110,0,582,581,1,0,0,0,582,583,1,0,0,0,
        583,602,1,0,0,0,584,602,3,18,9,0,585,602,3,20,10,0,586,602,3,22,
        11,0,587,602,3,12,6,0,588,602,3,14,7,0,589,602,3,16,8,0,590,602,
        3,62,31,0,591,602,3,24,12,0,592,602,3,130,65,0,593,602,3,142,71,
        0,594,602,3,60,30,0,595,602,3,26,13,0,596,602,3,28,14,0,597,602,
        3,68,34,0,598,602,3,74,37,0,599,602,3,72,36,0,600,602,3,10,5,0,601,
        578,1,0,0,0,601,584,1,0,0,0,601,585,1,0,0,0,601,586,1,0,0,0,601,
        587,1,0,0,0,601,588,1,0,0,0,601,589,1,0,0,0,601,590,1,0,0,0,601,
        591,1,0,0,0,601,592,1,0,0,0,601,593,1,0,0,0,601,594,1,0,0,0,601,
        595,1,0,0,0,601,596,1,0,0,0,601,597,1,0,0,0,601,598,1,0,0,0,601,
        599,1,0,0,0,601,600,1,0,0,0,602,9,1,0,0,0,603,621,3,144,72,0,604,
        621,3,146,73,0,605,621,3,150,75,0,606,621,3,152,76,0,607,621,3,112,
        56,0,608,621,3,106,53,0,609,621,3,108,54,0,610,621,3,90,45,0,611,
        621,3,84,42,0,612,621,3,76,38,0,613,621,3,82,41,0,614,621,3,70,35,
        0,615,621,3,66,33,0,616,621,3,64,32,0,617,621,3,40,20,0,618,621,
        3,36,18,0,619,621,3,30,15,0,620,603,1,0,0,0,620,604,1,0,0,0,620,
        605,1,0,0,0,620,606,1,0,0,0,620,607,1,0,0,0,620,608,1,0,0,0,620,
        609,1,0,0,0,620,610,1,0,0,0,620,611,1,0,0,0,620,612,1,0,0,0,620,
        613,1,0,0,0,620,614,1,0,0,0,620,615,1,0,0,0,620,616,1,0,0,0,620,
        617,1,0,0,0,620,618,1,0,0,0,620,619,1,0,0,0,621,11,1,0,0,0,622,623,
        5,101,0,0,623,624,5,289,0,0,624,628,5,498,0,0,625,626,5,225,0,0,
        626,627,5,311,0,0,627,629,5,175,0,0,628,625,1,0,0,0,628,629,1,0,
        0,0,629,630,1,0,0,0,630,635,3,320,160,0,631,632,5,2,0,0,632,633,
        3,322,161,0,633,634,5,3,0,0,634,636,1,0,0,0,635,631,1,0,0,0,635,
        636,1,0,0,0,636,638,1,0,0,0,637,639,3,166,83,0,638,637,1,0,0,0,638,
        639,1,0,0,0,639,647,1,0,0,0,640,642,5,373,0,0,641,643,3,172,86,0,
        642,641,1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,646,3,168,84,
        0,645,644,1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,0,647,640,1,0,0,
        0,647,648,1,0,0,0,648,654,1,0,0,0,649,651,5,157,0,0,650,649,1,0,
        0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,653,5,255,0,0,653,655,3,
        298,149,0,654,650,1,0,0,0,654,655,1,0,0,0,655,658,1,0,0,0,656,657,
        5,83,0,0,657,659,5,538,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,666,
        1,0,0,0,660,661,5,329,0,0,661,662,5,61,0,0,662,663,5,2,0,0,663,664,
        3,174,87,0,664,665,5,3,0,0,665,667,1,0,0,0,666,660,1,0,0,0,666,667,
        1,0,0,0,667,679,1,0,0,0,668,669,5,147,0,0,669,673,5,61,0,0,670,671,
        5,213,0,0,671,674,3,298,149,0,672,674,5,365,0,0,673,670,1,0,0,0,
        673,672,1,0,0,0,674,677,1,0,0,0,675,676,5,57,0,0,676,678,7,3,0,0,
        677,675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,668,1,0,0,0,
        679,680,1,0,0,0,680,682,1,0,0,0,681,683,3,308,154,0,682,681,1,0,
        0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,685,5,30,0,0,685,686,3,222,
        111,0,686,762,1,0,0,0,687,688,5,373,0,0,688,689,5,289,0,0,689,690,
        5,498,0,0,690,694,3,320,160,0,691,695,3,156,78,0,692,695,5,87,0,
        0,693,695,5,34,0,0,694,691,1,0,0,0,694,692,1,0,0,0,694,693,1,0,0,
        0,695,762,1,0,0,0,696,697,5,22,0,0,697,698,5,289,0,0,698,699,5,498,
        0,0,699,723,3,320,160,0,700,701,5,377,0,0,701,724,3,438,219,0,702,
        708,5,373,0,0,703,709,3,172,86,0,704,709,3,168,84,0,705,706,3,172,
        86,0,706,707,3,168,84,0,707,709,1,0,0,0,708,703,1,0,0,0,708,704,
        1,0,0,0,708,705,1,0,0,0,709,724,1,0,0,0,710,711,5,380,0,0,711,712,
        5,506,0,0,712,713,5,289,0,0,713,714,5,498,0,0,714,716,3,438,219,
        0,715,717,3,308,154,0,716,715,1,0,0,0,716,717,1,0,0,0,717,724,1,
        0,0,0,718,719,5,416,0,0,719,720,5,2,0,0,720,721,3,310,155,0,721,
        722,5,3,0,0,722,724,1,0,0,0,723,700,1,0,0,0,723,702,1,0,0,0,723,
        710,1,0,0,0,723,718,1,0,0,0,724,762,1,0,0,0,725,726,5,153,0,0,726,
        727,5,289,0,0,727,730,5,498,0,0,728,729,5,225,0,0,729,731,5,175,
        0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,732,1,0,0,0,732,735,3,320,
        160,0,733,734,5,317,0,0,734,736,3,320,160,0,735,733,1,0,0,0,735,
        736,1,0,0,0,736,762,1,0,0,0,737,738,5,337,0,0,738,739,5,289,0,0,
        739,740,5,498,0,0,740,741,5,250,0,0,741,742,5,317,0,0,742,762,3,
        320,160,0,743,744,5,390,0,0,744,745,5,289,0,0,745,746,5,498,0,0,
        746,747,5,250,0,0,747,748,5,317,0,0,748,762,3,320,160,0,749,750,
        5,65,0,0,750,751,5,289,0,0,751,752,5,498,0,0,752,753,5,452,0,0,753,
        754,5,543,0,0,754,755,5,317,0,0,755,762,3,320,160,0,756,757,5,420,
        0,0,757,758,5,101,0,0,758,759,5,289,0,0,759,760,5,498,0,0,760,762,
        3,320,160,0,761,622,1,0,0,0,761,687,1,0,0,0,761,696,1,0,0,0,761,
        725,1,0,0,0,761,737,1,0,0,0,761,743,1,0,0,0,761,749,1,0,0,0,761,
        756,1,0,0,0,762,13,1,0,0,0,763,764,5,101,0,0,764,765,5,250,0,0,765,
        766,3,320,160,0,766,767,5,317,0,0,767,787,5,405,0,0,768,769,5,171,
        0,0,769,770,5,543,0,0,770,776,3,438,219,0,771,774,5,432,0,0,772,
        775,5,538,0,0,773,775,5,110,0,0,774,772,1,0,0,0,774,773,1,0,0,0,
        775,777,1,0,0,0,776,771,1,0,0,0,776,777,1,0,0,0,777,780,1,0,0,0,
        778,779,5,165,0,0,779,781,5,538,0,0,780,778,1,0,0,0,780,781,1,0,
        0,0,781,788,1,0,0,0,782,785,5,32,0,0,783,786,5,538,0,0,784,786,5,
        110,0,0,785,783,1,0,0,0,785,784,1,0,0,0,786,788,1,0,0,0,787,768,
        1,0,0,0,787,782,1,0,0,0,788,790,1,0,0,0,789,791,3,426,213,0,790,
        789,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,793,5,150,0,0,793,
        794,3,18,9,0,794,820,1,0,0,0,795,796,5,337,0,0,796,798,5,250,0,0,
        797,799,3,80,40,0,798,797,1,0,0,0,798,799,1,0,0,0,799,820,1,0,0,
        0,800,801,5,153,0,0,801,804,5,250,0,0,802,803,5,225,0,0,803,805,
        5,175,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,808,
        3,80,40,0,807,806,1,0,0,0,807,808,1,0,0,0,808,820,1,0,0,0,809,810,
        5,390,0,0,810,812,5,250,0,0,811,813,3,80,40,0,812,811,1,0,0,0,812,
        813,1,0,0,0,813,820,1,0,0,0,814,815,5,65,0,0,815,817,5,452,0,0,816,
        818,3,80,40,0,817,816,1,0,0,0,817,818,1,0,0,0,818,820,1,0,0,0,819,
        763,1,0,0,0,819,795,1,0,0,0,819,800,1,0,0,0,819,809,1,0,0,0,819,
        814,1,0,0,0,820,15,1,0,0,0,821,822,5,22,0,0,822,823,5,447,0,0,823,
        824,3,320,160,0,824,825,5,14,0,0,825,826,5,95,0,0,826,827,3,434,
        217,0,827,828,3,154,77,0,828,841,1,0,0,0,829,830,5,22,0,0,830,831,
        5,447,0,0,831,832,3,320,160,0,832,833,5,153,0,0,833,834,5,95,0,0,
        834,835,3,434,217,0,835,841,1,0,0,0,836,837,5,420,0,0,837,838,5,
        96,0,0,838,839,5,198,0,0,839,841,3,320,160,0,840,821,1,0,0,0,840,
        829,1,0,0,0,840,836,1,0,0,0,841,17,1,0,0,0,842,844,3,188,94,0,843,
        842,1,0,0,0,843,844,1,0,0,0,844,846,1,0,0,0,845,847,3,232,116,0,
        846,845,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,852,5,234,0,
        0,849,853,5,241,0,0,850,851,5,326,0,0,851,853,5,447,0,0,852,849,
        1,0,0,0,852,850,1,0,0,0,853,859,1,0,0,0,854,860,3,320,160,0,855,
        856,5,151,0,0,856,857,5,2,0,0,857,858,5,543,0,0,858,860,5,3,0,0,
        859,854,1,0,0,0,859,855,1,0,0,0,860,862,1,0,0,0,861,863,3,156,78,
        0,862,861,1,0,0,0,862,863,1,0,0,0,863,867,1,0,0,0,864,865,5,506,
        0,0,865,866,5,258,0,0,866,868,3,438,219,0,867,864,1,0,0,0,867,868,
        1,0,0,0,868,870,1,0,0,0,869,871,3,298,149,0,870,869,1,0,0,0,870,
        871,1,0,0,0,871,876,1,0,0,0,872,873,5,7,0,0,873,874,3,300,150,0,
        874,875,5,8,0,0,875,877,1,0,0,0,876,872,1,0,0,0,876,877,1,0,0,0,
        877,878,1,0,0,0,878,958,3,222,111,0,879,881,3,188,94,0,880,879,1,
        0,0,0,880,881,1,0,0,0,881,883,1,0,0,0,882,884,3,232,116,0,883,882,
        1,0,0,0,883,884,1,0,0,0,884,885,1,0,0,0,885,886,5,484,0,0,886,887,
        3,320,160,0,887,888,3,318,159,0,888,889,5,416,0,0,889,891,3,280,
        140,0,890,892,3,244,122,0,891,890,1,0,0,0,891,892,1,0,0,0,892,894,
        1,0,0,0,893,895,3,242,121,0,894,893,1,0,0,0,894,895,1,0,0,0,895,
        958,1,0,0,0,896,898,3,188,94,0,897,896,1,0,0,0,897,898,1,0,0,0,898,
        900,1,0,0,0,899,901,3,232,116,0,900,899,1,0,0,0,900,901,1,0,0,0,
        901,902,1,0,0,0,902,903,5,137,0,0,903,904,5,198,0,0,904,906,3,320,
        160,0,905,907,3,156,78,0,906,905,1,0,0,0,906,907,1,0,0,0,907,908,
        1,0,0,0,908,911,3,318,159,0,909,910,5,487,0,0,910,912,3,252,126,
        0,911,909,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,913,915,3,242,
        121,0,914,913,1,0,0,0,914,915,1,0,0,0,915,958,1,0,0,0,916,917,5,
        272,0,0,917,918,5,258,0,0,918,919,3,320,160,0,919,920,5,2,0,0,920,
        925,3,164,82,0,921,922,5,4,0,0,922,924,3,164,82,0,923,921,1,0,0,
        0,924,927,1,0,0,0,925,923,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,
        0,927,925,1,0,0,0,928,930,5,3,0,0,929,931,3,212,106,0,930,929,1,
        0,0,0,930,931,1,0,0,0,931,933,1,0,0,0,932,934,3,308,154,0,933,932,
        1,0,0,0,933,934,1,0,0,0,934,936,1,0,0,0,935,937,3,426,213,0,936,
        935,1,0,0,0,936,937,1,0,0,0,937,958,1,0,0,0,938,939,5,178,0,0,939,
        940,5,447,0,0,940,943,3,320,160,0,941,942,5,329,0,0,942,944,3,298,
        149,0,943,941,1,0,0,0,943,944,1,0,0,0,944,946,1,0,0,0,945,947,3,
        242,121,0,946,945,1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,949,
        5,464,0,0,949,951,5,538,0,0,950,952,3,308,154,0,951,950,1,0,0,0,
        951,952,1,0,0,0,952,954,1,0,0,0,953,955,3,212,106,0,954,953,1,0,
        0,0,954,955,1,0,0,0,955,958,1,0,0,0,956,958,3,194,97,0,957,843,1,
        0,0,0,957,880,1,0,0,0,957,897,1,0,0,0,957,916,1,0,0,0,957,938,1,
        0,0,0,957,956,1,0,0,0,958,19,1,0,0,0,959,961,5,101,0,0,960,962,5,
        180,0,0,961,960,1,0,0,0,961,962,1,0,0,0,962,963,1,0,0,0,963,967,
        5,447,0,0,964,965,5,225,0,0,965,966,5,311,0,0,966,968,5,175,0,0,
        967,964,1,0,0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,984,3,320,160,
        0,970,972,3,298,149,0,971,970,1,0,0,0,971,972,1,0,0,0,972,985,1,
        0,0,0,973,974,5,2,0,0,974,977,3,326,163,0,975,976,5,4,0,0,976,978,
        3,330,165,0,977,975,1,0,0,0,977,978,1,0,0,0,978,980,1,0,0,0,979,
        981,5,4,0,0,980,979,1,0,0,0,980,981,1,0,0,0,981,982,1,0,0,0,982,
        983,5,3,0,0,983,985,1,0,0,0,984,971,1,0,0,0,984,973,1,0,0,0,985,
        989,1,0,0,0,986,987,5,166,0,0,987,988,5,512,0,0,988,990,3,438,219,
        0,989,986,1,0,0,0,989,990,1,0,0,0,990,999,1,0,0,0,991,992,7,4,0,
        0,992,993,5,255,0,0,993,997,3,298,149,0,994,995,5,75,0,0,995,996,
        5,61,0,0,996,998,3,298,149,0,997,994,1,0,0,0,997,998,1,0,0,0,998,
        1000,1,0,0,0,999,991,1,0,0,0,999,1000,1,0,0,0,1000,1003,1,0,0,0,
        1001,1002,5,83,0,0,1002,1004,5,538,0,0,1003,1001,1,0,0,0,1003,1004,
        1,0,0,0,1004,1006,1,0,0,0,1005,1007,3,158,79,0,1006,1005,1,0,0,0,
        1006,1007,1,0,0,0,1007,1022,1,0,0,0,1008,1009,5,147,0,0,1009,1013,
        5,61,0,0,1010,1011,5,213,0,0,1011,1014,3,298,149,0,1012,1014,5,365,
        0,0,1013,1010,1,0,0,0,1013,1012,1,0,0,0,1014,1020,1,0,0,0,1015,1018,
        5,57,0,0,1016,1019,5,543,0,0,1017,1019,5,34,0,0,1018,1016,1,0,0,
        0,1018,1017,1,0,0,0,1019,1021,1,0,0,0,1020,1015,1,0,0,0,1020,1021,
        1,0,0,0,1021,1023,1,0,0,0,1022,1008,1,0,0,0,1022,1023,1,0,0,0,1023,
        1029,1,0,0,0,1024,1025,5,399,0,0,1025,1026,5,2,0,0,1026,1027,3,350,
        175,0,1027,1028,5,3,0,0,1028,1030,1,0,0,0,1029,1024,1,0,0,0,1029,
        1030,1,0,0,0,1030,1032,1,0,0,0,1031,1033,3,308,154,0,1032,1031,1,
        0,0,0,1032,1033,1,0,0,0,1033,1036,1,0,0,0,1034,1035,5,56,0,0,1035,
        1037,3,308,154,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1040,1,
        0,0,0,1038,1039,5,30,0,0,1039,1041,3,222,111,0,1040,1038,1,0,0,0,
        1040,1041,1,0,0,0,1041,1112,1,0,0,0,1042,1045,5,101,0,0,1043,1044,
        5,321,0,0,1044,1046,5,380,0,0,1045,1043,1,0,0,0,1045,1046,1,0,0,
        0,1046,1047,1,0,0,0,1047,1051,5,498,0,0,1048,1049,5,225,0,0,1049,
        1050,5,311,0,0,1050,1052,5,175,0,0,1051,1048,1,0,0,0,1051,1052,1,
        0,0,0,1052,1053,1,0,0,0,1053,1058,3,320,160,0,1054,1055,5,2,0,0,
        1055,1056,3,322,161,0,1056,1057,5,3,0,0,1057,1059,1,0,0,0,1058,1054,
        1,0,0,0,1058,1059,1,0,0,0,1059,1062,1,0,0,0,1060,1061,5,83,0,0,1061,
        1063,5,538,0,0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,1064,1,0,
        0,0,1064,1065,5,30,0,0,1065,1066,3,222,111,0,1066,1112,1,0,0,0,1067,
        1069,5,101,0,0,1068,1070,5,180,0,0,1069,1068,1,0,0,0,1069,1070,1,
        0,0,0,1070,1071,1,0,0,0,1071,1075,5,447,0,0,1072,1073,5,225,0,0,
        1073,1074,5,311,0,0,1074,1076,5,175,0,0,1075,1072,1,0,0,0,1075,1076,
        1,0,0,0,1076,1077,1,0,0,0,1077,1078,3,320,160,0,1078,1079,5,267,
        0,0,1079,1085,3,320,160,0,1080,1081,5,506,0,0,1081,1083,5,399,0,
        0,1082,1084,3,298,149,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,
        1086,1,0,0,0,1085,1080,1,0,0,0,1085,1086,1,0,0,0,1086,1112,1,0,0,
        0,1087,1088,5,101,0,0,1088,1089,5,401,0,0,1089,1093,5,350,0,0,1090,
        1091,5,225,0,0,1091,1092,5,311,0,0,1092,1094,5,175,0,0,1093,1090,
        1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1096,3,438,219,
        0,1096,1097,5,317,0,0,1097,1098,3,320,160,0,1098,1099,5,30,0,0,1099,
        1100,7,5,0,0,1100,1104,5,464,0,0,1101,1105,3,184,92,0,1102,1103,
        5,396,0,0,1103,1105,3,438,219,0,1104,1101,1,0,0,0,1104,1102,1,0,
        0,0,1105,1106,1,0,0,0,1106,1107,5,487,0,0,1107,1108,5,2,0,0,1108,
        1109,3,368,184,0,1109,1110,5,3,0,0,1110,1112,1,0,0,0,1111,959,1,
        0,0,0,1111,1042,1,0,0,0,1111,1067,1,0,0,0,1111,1087,1,0,0,0,1112,
        21,1,0,0,0,1113,1114,5,22,0,0,1114,1115,5,498,0,0,1115,1120,3,320,
        160,0,1116,1117,5,2,0,0,1117,1118,3,322,161,0,1118,1119,5,3,0,0,
        1119,1121,1,0,0,0,1120,1116,1,0,0,0,1120,1121,1,0,0,0,1121,1122,
        1,0,0,0,1122,1123,5,30,0,0,1123,1124,3,222,111,0,1124,1151,1,0,0,
        0,1125,1126,5,22,0,0,1126,1127,5,436,0,0,1127,1128,5,494,0,0,1128,
        1129,3,320,160,0,1129,1130,3,308,154,0,1130,1151,1,0,0,0,1131,1132,
        5,22,0,0,1132,1133,5,396,0,0,1133,1134,3,438,219,0,1134,1135,3,426,
        213,0,1135,1151,1,0,0,0,1136,1137,5,22,0,0,1137,1138,5,508,0,0,1138,
        1139,5,210,0,0,1139,1141,3,176,88,0,1140,1142,3,308,154,0,1141,1140,
        1,0,0,0,1141,1142,1,0,0,0,1142,1151,1,0,0,0,1143,1144,5,22,0,0,1144,
        1145,5,508,0,0,1145,1146,5,350,0,0,1146,1148,3,176,88,0,1147,1149,
        3,308,154,0,1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,1151,1,0,0,
        0,1150,1113,1,0,0,0,1150,1125,1,0,0,0,1150,1131,1,0,0,0,1150,1136,
        1,0,0,0,1150,1143,1,0,0,0,1151,23,1,0,0,0,1152,1153,5,153,0,0,1153,
        1154,5,68,0,0,1154,1155,5,372,0,0,1155,1156,5,44,0,0,1156,1157,5,
        504,0,0,1157,1158,5,538,0,0,1158,1159,5,512,0,0,1159,1213,5,543,
        0,0,1160,1161,5,153,0,0,1161,1164,5,162,0,0,1162,1163,5,225,0,0,
        1163,1165,5,175,0,0,1164,1162,1,0,0,0,1164,1165,1,0,0,0,1165,1166,
        1,0,0,0,1166,1213,3,320,160,0,1167,1168,5,153,0,0,1168,1171,5,396,
        0,0,1169,1170,5,225,0,0,1170,1172,5,175,0,0,1171,1169,1,0,0,0,1171,
        1172,1,0,0,0,1172,1173,1,0,0,0,1173,1213,3,438,219,0,1174,1175,5,
        153,0,0,1175,1178,5,428,0,0,1176,1177,5,225,0,0,1177,1179,5,175,
        0,0,1178,1176,1,0,0,0,1178,1179,1,0,0,0,1179,1180,1,0,0,0,1180,1213,
        3,300,150,0,1181,1182,5,153,0,0,1182,1185,5,486,0,0,1183,1184,5,
        225,0,0,1184,1186,5,175,0,0,1185,1183,1,0,0,0,1185,1186,1,0,0,0,
        1186,1187,1,0,0,0,1187,1213,3,184,92,0,1188,1189,5,153,0,0,1189,
        1190,5,508,0,0,1190,1193,5,210,0,0,1191,1192,5,225,0,0,1192,1194,
        5,175,0,0,1193,1191,1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,
        1195,1213,3,176,88,0,1196,1197,5,153,0,0,1197,1198,5,187,0,0,1198,
        1201,5,538,0,0,1199,1200,7,6,0,0,1200,1202,3,438,219,0,1201,1199,
        1,0,0,0,1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,1213,3,308,154,
        0,1204,1205,5,153,0,0,1205,1206,5,508,0,0,1206,1209,5,350,0,0,1207,
        1208,5,225,0,0,1208,1210,5,175,0,0,1209,1207,1,0,0,0,1209,1210,1,
        0,0,0,1210,1211,1,0,0,0,1211,1213,3,176,88,0,1212,1152,1,0,0,0,1212,
        1160,1,0,0,0,1212,1167,1,0,0,0,1212,1174,1,0,0,0,1212,1181,1,0,0,
        0,1212,1188,1,0,0,0,1212,1196,1,0,0,0,1212,1204,1,0,0,0,1213,25,
        1,0,0,0,1214,1216,5,420,0,0,1215,1217,7,7,0,0,1216,1215,1,0,0,0,
        1216,1217,1,0,0,0,1217,1218,1,0,0,0,1218,1220,5,492,0,0,1219,1221,
        3,80,40,0,1220,1219,1,0,0,0,1220,1221,1,0,0,0,1221,1372,1,0,0,0,
        1222,1223,5,420,0,0,1223,1372,5,33,0,0,1224,1225,5,420,0,0,1225,
        1372,5,56,0,0,1226,1227,5,420,0,0,1227,1228,5,158,0,0,1228,1229,
        5,329,0,0,1229,1232,5,448,0,0,1230,1231,7,6,0,0,1231,1233,3,320,
        160,0,1232,1230,1,0,0,0,1232,1233,1,0,0,0,1233,1372,1,0,0,0,1234,
        1235,5,420,0,0,1235,1238,5,170,0,0,1236,1237,7,6,0,0,1237,1239,3,
        320,160,0,1238,1236,1,0,0,0,1238,1239,1,0,0,0,1239,1241,1,0,0,0,
        1240,1242,3,80,40,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1372,
        1,0,0,0,1243,1244,5,420,0,0,1244,1245,5,260,0,0,1245,1372,5,234,
        0,0,1246,1247,5,420,0,0,1247,1250,5,137,0,0,1248,1249,7,6,0,0,1249,
        1251,3,320,160,0,1250,1248,1,0,0,0,1250,1251,1,0,0,0,1251,1372,1,
        0,0,0,1252,1254,5,420,0,0,1253,1255,5,21,0,0,1254,1253,1,0,0,0,1254,
        1255,1,0,0,0,1255,1256,1,0,0,0,1256,1372,5,208,0,0,1257,1258,5,420,
        0,0,1258,1259,5,208,0,0,1259,1260,5,193,0,0,1260,1372,3,184,92,0,
        1261,1262,5,420,0,0,1262,1263,5,272,0,0,1263,1264,5,357,0,0,1264,
        1372,5,538,0,0,1265,1266,5,420,0,0,1266,1267,5,498,0,0,1267,1268,
        7,6,0,0,1268,1271,3,320,160,0,1269,1270,7,6,0,0,1270,1272,3,438,
        219,0,1271,1269,1,0,0,0,1271,1272,1,0,0,0,1272,1372,1,0,0,0,1273,
        1274,5,420,0,0,1274,1372,5,349,0,0,1275,1276,5,420,0,0,1276,1372,
        5,384,0,0,1277,1279,5,420,0,0,1278,1280,5,55,0,0,1279,1278,1,0,0,
        0,1279,1280,1,0,0,0,1280,1281,1,0,0,0,1281,1282,5,101,0,0,1282,1283,
        5,447,0,0,1283,1372,3,320,160,0,1284,1285,5,420,0,0,1285,1372,5,
        397,0,0,1286,1287,5,420,0,0,1287,1288,5,329,0,0,1288,1372,5,543,
        0,0,1289,1290,5,420,0,0,1290,1372,5,346,0,0,1291,1292,5,420,0,0,
        1292,1293,5,354,0,0,1293,1372,5,538,0,0,1294,1295,5,420,0,0,1295,
        1298,5,187,0,0,1296,1297,7,6,0,0,1297,1299,3,320,160,0,1298,1296,
        1,0,0,0,1298,1299,1,0,0,0,1299,1372,1,0,0,0,1300,1302,5,420,0,0,
        1301,1303,5,436,0,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,1304,
        1,0,0,0,1304,1372,5,167,0,0,1305,1306,5,420,0,0,1306,1307,5,101,
        0,0,1307,1308,5,68,0,0,1308,1372,3,438,219,0,1309,1310,5,420,0,0,
        1310,1313,5,428,0,0,1311,1312,5,193,0,0,1312,1314,3,438,219,0,1313,
        1311,1,0,0,0,1313,1314,1,0,0,0,1314,1372,1,0,0,0,1315,1316,5,420,
        0,0,1316,1317,5,101,0,0,1317,1318,5,498,0,0,1318,1372,3,320,160,
        0,1319,1320,5,420,0,0,1320,1321,5,101,0,0,1321,1322,5,289,0,0,1322,
        1323,5,498,0,0,1323,1324,3,438,219,0,1324,1325,5,317,0,0,1325,1326,
        3,320,160,0,1326,1372,1,0,0,0,1327,1328,5,420,0,0,1328,1372,5,38,
        0,0,1329,1330,5,420,0,0,1330,1331,5,383,0,0,1331,1332,5,148,0,0,
        1332,1333,5,198,0,0,1333,1372,3,78,39,0,1334,1336,5,420,0,0,1335,
        1337,5,201,0,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,
        0,0,1338,1341,5,468,0,0,1339,1340,7,6,0,0,1340,1342,3,320,160,0,
        1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,1344,1,0,0,0,1343,1345,
        3,80,40,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,1372,1,0,0,0,
        1346,1347,5,420,0,0,1347,1348,5,450,0,0,1348,1349,5,142,0,0,1349,
        1372,5,543,0,0,1350,1351,5,420,0,0,1351,1353,5,200,0,0,1352,1354,
        3,438,219,0,1353,1352,1,0,0,0,1353,1354,1,0,0,0,1354,1372,1,0,0,
        0,1355,1356,5,420,0,0,1356,1357,5,447,0,0,1357,1372,5,543,0,0,1358,
        1359,5,420,0,0,1359,1372,5,505,0,0,1360,1361,5,420,0,0,1361,1362,
        5,451,0,0,1362,1363,5,41,0,0,1363,1368,5,543,0,0,1364,1365,5,4,0,
        0,1365,1367,5,543,0,0,1366,1364,1,0,0,0,1367,1370,1,0,0,0,1368,1366,
        1,0,0,0,1368,1369,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1371,
        1214,1,0,0,0,1371,1222,1,0,0,0,1371,1224,1,0,0,0,1371,1226,1,0,0,
        0,1371,1234,1,0,0,0,1371,1243,1,0,0,0,1371,1246,1,0,0,0,1371,1252,
        1,0,0,0,1371,1257,1,0,0,0,1371,1261,1,0,0,0,1371,1265,1,0,0,0,1371,
        1273,1,0,0,0,1371,1275,1,0,0,0,1371,1277,1,0,0,0,1371,1284,1,0,0,
        0,1371,1286,1,0,0,0,1371,1289,1,0,0,0,1371,1291,1,0,0,0,1371,1294,
        1,0,0,0,1371,1300,1,0,0,0,1371,1305,1,0,0,0,1371,1309,1,0,0,0,1371,
        1315,1,0,0,0,1371,1319,1,0,0,0,1371,1327,1,0,0,0,1371,1329,1,0,0,
        0,1371,1334,1,0,0,0,1371,1346,1,0,0,0,1371,1350,1,0,0,0,1371,1355,
        1,0,0,0,1371,1358,1,0,0,0,1371,1360,1,0,0,0,1372,27,1,0,0,0,1373,
        1376,5,445,0,0,1374,1376,3,38,19,0,1375,1373,1,0,0,0,1375,1374,1,
        0,0,0,1376,29,1,0,0,0,1377,1378,5,216,0,0,1378,1483,3,176,88,0,1379,
        1380,5,235,0,0,1380,1381,5,348,0,0,1381,1382,5,198,0,0,1382,1384,
        3,176,88,0,1383,1385,3,308,154,0,1384,1383,1,0,0,0,1384,1385,1,0,
        0,0,1385,1483,1,0,0,0,1386,1387,5,477,0,0,1387,1388,5,348,0,0,1388,
        1483,3,176,88,0,1389,1390,5,277,0,0,1390,1399,5,448,0,0,1391,1396,
        3,34,17,0,1392,1393,5,4,0,0,1393,1395,3,34,17,0,1394,1392,1,0,0,
        0,1395,1398,1,0,0,0,1396,1394,1,0,0,0,1396,1397,1,0,0,0,1397,1400,
        1,0,0,0,1398,1396,1,0,0,0,1399,1391,1,0,0,0,1399,1400,1,0,0,0,1400,
        1483,1,0,0,0,1401,1402,5,480,0,0,1402,1483,5,448,0,0,1403,1404,5,
        500,0,0,1404,1408,5,483,0,0,1405,1409,5,75,0,0,1406,1407,5,89,0,
        0,1407,1409,5,210,0,0,1408,1405,1,0,0,0,1408,1406,1,0,0,0,1409,1410,
        1,0,0,0,1410,1411,3,438,219,0,1411,1426,5,506,0,0,1412,1416,5,75,
        0,0,1413,1414,5,89,0,0,1414,1416,5,210,0,0,1415,1412,1,0,0,0,1415,
        1413,1,0,0,0,1416,1417,1,0,0,0,1417,1427,3,438,219,0,1418,1423,3,
        32,16,0,1419,1420,5,25,0,0,1420,1422,3,32,16,0,1421,1419,1,0,0,0,
        1422,1425,1,0,0,0,1423,1421,1,0,0,0,1423,1424,1,0,0,0,1424,1427,
        1,0,0,0,1425,1423,1,0,0,0,1426,1415,1,0,0,0,1426,1418,1,0,0,0,1427,
        1429,1,0,0,0,1428,1430,5,195,0,0,1429,1428,1,0,0,0,1429,1430,1,0,
        0,0,1430,1483,1,0,0,0,1431,1432,5,39,0,0,1432,1433,5,424,0,0,1433,
        1434,3,320,160,0,1434,1435,5,464,0,0,1435,1448,3,438,219,0,1436,
        1437,7,8,0,0,1437,1438,5,2,0,0,1438,1443,3,78,39,0,1439,1440,5,4,
        0,0,1440,1442,3,78,39,0,1441,1439,1,0,0,0,1442,1445,1,0,0,0,1443,
        1441,1,0,0,0,1443,1444,1,0,0,0,1444,1446,1,0,0,0,1445,1443,1,0,0,
        0,1446,1447,5,3,0,0,1447,1449,1,0,0,0,1448,1436,1,0,0,0,1448,1449,
        1,0,0,0,1449,1451,1,0,0,0,1450,1452,3,308,154,0,1451,1450,1,0,0,
        0,1451,1452,1,0,0,0,1452,1483,1,0,0,0,1453,1454,5,388,0,0,1454,1455,
        5,424,0,0,1455,1456,3,320,160,0,1456,1457,5,198,0,0,1457,1470,3,
        438,219,0,1458,1459,7,8,0,0,1459,1460,5,2,0,0,1460,1465,3,78,39,
        0,1461,1462,5,4,0,0,1462,1464,3,78,39,0,1463,1461,1,0,0,0,1464,1467,
        1,0,0,0,1465,1463,1,0,0,0,1465,1466,1,0,0,0,1466,1468,1,0,0,0,1467,
        1465,1,0,0,0,1468,1469,5,3,0,0,1469,1471,1,0,0,0,1470,1458,1,0,0,
        0,1470,1471,1,0,0,0,1471,1473,1,0,0,0,1472,1474,3,308,154,0,1473,
        1472,1,0,0,0,1473,1474,1,0,0,0,1474,1483,1,0,0,0,1475,1476,5,431,
        0,0,1476,1480,5,465,0,0,1477,1478,5,506,0,0,1478,1479,5,94,0,0,1479,
        1481,5,424,0,0,1480,1477,1,0,0,0,1480,1481,1,0,0,0,1481,1483,1,0,
        0,0,1482,1377,1,0,0,0,1482,1379,1,0,0,0,1482,1386,1,0,0,0,1482,1389,
        1,0,0,0,1482,1401,1,0,0,0,1482,1403,1,0,0,0,1482,1431,1,0,0,0,1482,
        1453,1,0,0,0,1482,1475,1,0,0,0,1483,31,1,0,0,0,1484,1485,5,447,0,
        0,1485,1488,3,320,160,0,1486,1487,5,329,0,0,1487,1489,3,438,219,
        0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,33,1,0,0,0,1490,1493,
        3,320,160,0,1491,1492,5,30,0,0,1492,1494,3,176,88,0,1493,1491,1,
        0,0,0,1493,1494,1,0,0,0,1494,1503,1,0,0,0,1495,1497,5,367,0,0,1496,
        1498,5,273,0,0,1497,1496,1,0,0,0,1497,1498,1,0,0,0,1498,1504,1,0,
        0,0,1499,1501,5,279,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,
        1502,1,0,0,0,1502,1504,5,509,0,0,1503,1495,1,0,0,0,1503,1500,1,0,
        0,0,1504,35,1,0,0,0,1505,1506,5,420,0,0,1506,1507,5,401,0,0,1507,
        1514,5,350,0,0,1508,1512,5,193,0,0,1509,1513,3,184,92,0,1510,1511,
        5,396,0,0,1511,1513,3,438,219,0,1512,1509,1,0,0,0,1512,1510,1,0,
        0,0,1513,1515,1,0,0,0,1514,1508,1,0,0,0,1514,1515,1,0,0,0,1515,2039,
        1,0,0,0,1516,1517,5,420,0,0,1517,1518,5,436,0,0,1518,1524,5,350,
        0,0,1519,1522,5,487,0,0,1520,1521,5,193,0,0,1521,1523,3,176,88,0,
        1522,1520,1,0,0,0,1522,1523,1,0,0,0,1523,1525,1,0,0,0,1524,1519,
        1,0,0,0,1524,1525,1,0,0,0,1525,2039,1,0,0,0,1526,1527,5,420,0,0,
        1527,2039,5,430,0,0,1528,1529,5,420,0,0,1529,1530,5,436,0,0,1530,
        2039,7,9,0,0,1531,1532,5,420,0,0,1532,1533,5,101,0,0,1533,1534,5,
        385,0,0,1534,1535,5,193,0,0,1535,2039,3,438,219,0,1536,1537,5,420,
        0,0,1537,1538,5,319,0,0,1538,1541,5,448,0,0,1539,1540,7,6,0,0,1540,
        1542,3,320,160,0,1541,1539,1,0,0,0,1541,1542,1,0,0,0,1542,1544,1,
        0,0,0,1543,1545,3,80,40,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,1545,
        2039,1,0,0,0,1546,1547,5,420,0,0,1547,1548,5,447,0,0,1548,1551,5,
        434,0,0,1549,1550,7,6,0,0,1550,1552,3,320,160,0,1551,1549,1,0,0,
        0,1551,1552,1,0,0,0,1552,1554,1,0,0,0,1553,1555,3,80,40,0,1554,1553,
        1,0,0,0,1554,1555,1,0,0,0,1555,2039,1,0,0,0,1556,1558,5,420,0,0,
        1557,1559,5,201,0,0,1558,1557,1,0,0,0,1558,1559,1,0,0,0,1559,1560,
        1,0,0,0,1560,1563,5,448,0,0,1561,1562,7,6,0,0,1562,1564,3,320,160,
        0,1563,1561,1,0,0,0,1563,1564,1,0,0,0,1564,1566,1,0,0,0,1565,1567,
        3,80,40,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,2039,1,0,0,0,
        1568,1570,5,420,0,0,1569,1571,5,201,0,0,1570,1569,1,0,0,0,1570,1571,
        1,0,0,0,1571,1572,1,0,0,0,1572,1575,5,499,0,0,1573,1574,7,6,0,0,
        1574,1576,3,320,160,0,1575,1573,1,0,0,0,1575,1576,1,0,0,0,1576,1578,
        1,0,0,0,1577,1579,3,80,40,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,
        1579,2039,1,0,0,0,1580,1582,5,420,0,0,1581,1583,5,201,0,0,1582,1581,
        1,0,0,0,1582,1583,1,0,0,0,1583,1584,1,0,0,0,1584,2039,5,356,0,0,
        1585,1587,5,420,0,0,1586,1588,7,7,0,0,1587,1586,1,0,0,0,1587,1588,
        1,0,0,0,1588,1589,1,0,0,0,1589,1591,5,434,0,0,1590,1592,3,80,40,
        0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,2039,1,0,0,0,1593,1594,
        5,420,0,0,1594,1595,5,101,0,0,1595,1596,5,289,0,0,1596,1597,5,498,
        0,0,1597,2039,3,320,160,0,1598,1599,5,420,0,0,1599,1600,5,101,0,
        0,1600,1601,7,10,0,0,1601,2039,3,320,160,0,1602,1603,5,420,0,0,1603,
        1605,5,101,0,0,1604,1606,7,7,0,0,1605,1604,1,0,0,0,1605,1606,1,0,
        0,0,1606,1607,1,0,0,0,1607,1608,5,202,0,0,1608,1609,3,388,194,0,
        1609,1611,5,2,0,0,1610,1612,3,126,63,0,1611,1610,1,0,0,0,1611,1612,
        1,0,0,0,1612,1613,1,0,0,0,1613,1616,5,3,0,0,1614,1615,7,6,0,0,1615,
        1617,3,320,160,0,1616,1614,1,0,0,0,1616,1617,1,0,0,0,1617,2039,1,
        0,0,0,1618,1619,5,420,0,0,1619,1622,7,11,0,0,1620,1621,5,198,0,0,
        1621,1623,3,438,219,0,1622,1620,1,0,0,0,1622,1623,1,0,0,0,1623,1625,
        1,0,0,0,1624,1626,3,80,40,0,1625,1624,1,0,0,0,1625,1626,1,0,0,0,
        1626,2039,1,0,0,0,1627,1628,5,420,0,0,1628,1629,5,113,0,0,1629,2039,
        5,543,0,0,1630,1631,5,420,0,0,1631,1632,5,112,0,0,1632,2039,5,474,
        0,0,1633,1634,5,420,0,0,1634,1636,5,69,0,0,1635,1637,3,80,40,0,1636,
        1635,1,0,0,0,1636,1637,1,0,0,0,1637,2039,1,0,0,0,1638,1639,5,420,
        0,0,1639,1640,5,68,0,0,1640,2039,3,438,219,0,1641,1643,5,420,0,0,
        1642,1644,5,201,0,0,1643,1642,1,0,0,0,1643,1644,1,0,0,0,1644,1645,
        1,0,0,0,1645,1646,7,12,0,0,1646,1647,7,6,0,0,1647,1650,3,320,160,
        0,1648,1649,7,6,0,0,1649,1651,3,320,160,0,1650,1648,1,0,0,0,1650,
        1651,1,0,0,0,1651,1653,1,0,0,0,1652,1654,3,80,40,0,1653,1652,1,0,
        0,0,1653,1654,1,0,0,0,1654,2039,1,0,0,0,1655,1656,5,420,0,0,1656,
        1658,5,78,0,0,1657,1659,3,80,40,0,1658,1657,1,0,0,0,1658,1659,1,
        0,0,0,1659,2039,1,0,0,0,1660,1664,5,420,0,0,1661,1662,5,71,0,0,1662,
        1665,5,416,0,0,1663,1665,5,72,0,0,1664,1661,1,0,0,0,1664,1663,1,
        0,0,0,1665,1667,1,0,0,0,1666,1668,3,80,40,0,1667,1666,1,0,0,0,1667,
        1668,1,0,0,0,1668,2039,1,0,0,0,1669,1670,5,420,0,0,1670,1671,5,100,
        0,0,1671,1672,5,2,0,0,1672,1673,5,521,0,0,1673,1674,5,3,0,0,1674,
        2039,7,13,0,0,1675,1676,5,420,0,0,1676,1678,7,13,0,0,1677,1679,3,
        290,145,0,1678,1677,1,0,0,0,1678,1679,1,0,0,0,1679,2039,1,0,0,0,
        1680,1681,5,420,0,0,1681,1682,5,272,0,0,1682,1695,5,501,0,0,1683,
        1684,7,6,0,0,1684,1686,3,320,160,0,1685,1683,1,0,0,0,1685,1686,1,
        0,0,0,1686,1688,1,0,0,0,1687,1689,3,80,40,0,1688,1687,1,0,0,0,1688,
        1689,1,0,0,0,1689,1691,1,0,0,0,1690,1692,3,290,145,0,1691,1690,1,
        0,0,0,1691,1692,1,0,0,0,1692,1696,1,0,0,0,1693,1694,5,317,0,0,1694,
        1696,5,538,0,0,1695,1685,1,0,0,0,1695,1693,1,0,0,0,1696,2039,1,0,
        0,0,1697,1699,5,420,0,0,1698,1700,5,437,0,0,1699,1698,1,0,0,0,1699,
        1700,1,0,0,0,1700,1701,1,0,0,0,1701,1704,5,272,0,0,1702,1703,7,6,
        0,0,1703,1705,3,320,160,0,1704,1702,1,0,0,0,1704,1705,1,0,0,0,1705,
        1707,1,0,0,0,1706,1708,3,80,40,0,1707,1706,1,0,0,0,1707,1708,1,0,
        0,0,1708,1710,1,0,0,0,1709,1711,3,286,143,0,1710,1709,1,0,0,0,1710,
        1711,1,0,0,0,1711,1713,1,0,0,0,1712,1714,3,290,145,0,1713,1712,1,
        0,0,0,1713,1714,1,0,0,0,1714,2039,1,0,0,0,1715,1716,5,420,0,0,1716,
        1719,5,178,0,0,1717,1718,7,6,0,0,1718,1720,3,320,160,0,1719,1717,
        1,0,0,0,1719,1720,1,0,0,0,1720,1722,1,0,0,0,1721,1723,3,80,40,0,
        1722,1721,1,0,0,0,1722,1723,1,0,0,0,1723,1725,1,0,0,0,1724,1726,
        3,286,143,0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,1728,1,0,0,
        0,1727,1729,3,290,145,0,1728,1727,1,0,0,0,1728,1729,1,0,0,0,1729,
        2039,1,0,0,0,1730,1731,5,420,0,0,1731,1732,5,22,0,0,1732,1737,5,
        447,0,0,1733,1738,5,399,0,0,1734,1735,5,289,0,0,1735,1738,5,498,
        0,0,1736,1738,5,81,0,0,1737,1733,1,0,0,0,1737,1734,1,0,0,0,1737,
        1736,1,0,0,0,1738,1741,1,0,0,0,1739,1740,7,6,0,0,1740,1742,3,320,
        160,0,1741,1739,1,0,0,0,1741,1742,1,0,0,0,1742,1744,1,0,0,0,1743,
        1745,3,80,40,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1747,1,0,
        0,0,1746,1748,3,286,143,0,1747,1746,1,0,0,0,1747,1748,1,0,0,0,1748,
        1750,1,0,0,0,1749,1751,3,290,145,0,1750,1749,1,0,0,0,1750,1751,1,
        0,0,0,1751,2039,1,0,0,0,1752,1753,5,420,0,0,1753,1754,5,112,0,0,
        1754,1755,5,422,0,0,1755,1756,5,198,0,0,1756,2039,3,78,39,0,1757,
        1758,5,420,0,0,1758,1761,5,112,0,0,1759,1760,5,198,0,0,1760,1762,
        3,320,160,0,1761,1759,1,0,0,0,1761,1762,1,0,0,0,1762,1764,1,0,0,
        0,1763,1765,3,286,143,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,
        1767,1,0,0,0,1766,1768,3,308,154,0,1767,1766,1,0,0,0,1767,1768,1,
        0,0,0,1768,2039,1,0,0,0,1769,1771,5,420,0,0,1770,1772,5,454,0,0,
        1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1774,
        5,330,0,0,1774,1775,5,198,0,0,1775,1777,3,320,160,0,1776,1778,3,
        80,40,0,1777,1776,1,0,0,0,1777,1778,1,0,0,0,1778,1780,1,0,0,0,1779,
        1781,3,286,143,0,1780,1779,1,0,0,0,1780,1781,1,0,0,0,1781,1783,1,
        0,0,0,1782,1784,3,290,145,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,
        1784,2039,1,0,0,0,1785,1786,5,420,0,0,1786,1787,5,450,0,0,1787,2039,
        5,543,0,0,1788,1789,5,420,0,0,1789,1790,5,451,0,0,1790,1791,5,198,
        0,0,1791,1793,3,320,160,0,1792,1794,3,156,78,0,1793,1792,1,0,0,0,
        1793,1794,1,0,0,0,1794,1796,1,0,0,0,1795,1797,3,80,40,0,1796,1795,
        1,0,0,0,1796,1797,1,0,0,0,1797,1799,1,0,0,0,1798,1800,3,286,143,
        0,1799,1798,1,0,0,0,1799,1800,1,0,0,0,1800,1802,1,0,0,0,1801,1803,
        3,290,145,0,1802,1801,1,0,0,0,1802,1803,1,0,0,0,1803,2039,1,0,0,
        0,1804,1805,5,420,0,0,1805,1808,5,359,0,0,1806,1807,5,193,0,0,1807,
        1809,3,176,88,0,1808,1806,1,0,0,0,1808,1809,1,0,0,0,1809,1811,1,
        0,0,0,1810,1812,3,80,40,0,1811,1810,1,0,0,0,1811,1812,1,0,0,0,1812,
        2039,1,0,0,0,1813,1814,5,420,0,0,1814,1815,5,21,0,0,1815,1817,5,
        358,0,0,1816,1818,3,80,40,0,1817,1816,1,0,0,0,1817,1818,1,0,0,0,
        1818,2039,1,0,0,0,1819,1820,5,420,0,0,1820,1823,5,39,0,0,1821,1822,
        7,6,0,0,1822,1824,3,320,160,0,1823,1821,1,0,0,0,1823,1824,1,0,0,
        0,1824,1826,1,0,0,0,1825,1827,3,80,40,0,1826,1825,1,0,0,0,1826,1827,
        1,0,0,0,1827,2039,1,0,0,0,1828,1830,5,420,0,0,1829,1831,5,55,0,0,
        1830,1829,1,0,0,0,1830,1831,1,0,0,0,1831,1832,1,0,0,0,1832,1835,
        5,388,0,0,1833,1834,7,6,0,0,1834,1836,3,320,160,0,1835,1833,1,0,
        0,0,1835,1836,1,0,0,0,1836,1838,1,0,0,0,1837,1839,3,80,40,0,1838,
        1837,1,0,0,0,1838,1839,1,0,0,0,1839,2039,1,0,0,0,1840,1841,5,420,
        0,0,1841,1843,5,387,0,0,1842,1844,3,80,40,0,1843,1842,1,0,0,0,1843,
        1844,1,0,0,0,1844,1846,1,0,0,0,1845,1847,3,286,143,0,1846,1845,1,
        0,0,0,1846,1847,1,0,0,0,1847,1849,1,0,0,0,1848,1850,3,290,145,0,
        1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,2039,1,0,0,0,1851,1852,
        5,420,0,0,1852,1853,5,508,0,0,1853,1855,5,212,0,0,1854,1856,3,80,
        40,0,1855,1854,1,0,0,0,1855,1856,1,0,0,0,1856,2039,1,0,0,0,1857,
        1858,5,420,0,0,1858,1861,5,466,0,0,1859,1860,5,317,0,0,1860,1862,
        5,538,0,0,1861,1859,1,0,0,0,1861,1862,1,0,0,0,1862,2039,1,0,0,0,
        1863,1864,5,420,0,0,1864,1865,5,424,0,0,1865,1866,5,317,0,0,1866,
        1868,3,438,219,0,1867,1869,3,80,40,0,1868,1867,1,0,0,0,1868,1869,
        1,0,0,0,1869,2039,1,0,0,0,1870,1872,5,420,0,0,1871,1873,5,201,0,
        0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1875,1,0,0,0,1874,1876,
        5,59,0,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1877,1,0,0,0,1877,
        1880,5,203,0,0,1878,1879,7,6,0,0,1879,1881,3,320,160,0,1880,1878,
        1,0,0,0,1880,1881,1,0,0,0,1881,1883,1,0,0,0,1882,1884,3,80,40,0,
        1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,2039,1,0,0,0,1885,1886,
        5,420,0,0,1886,1888,5,206,0,0,1887,1889,5,201,0,0,1888,1887,1,0,
        0,0,1888,1889,1,0,0,0,1889,1890,1,0,0,0,1890,1892,5,203,0,0,1891,
        1893,3,80,40,0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,2039,1,0,
        0,0,1894,1895,5,420,0,0,1895,1898,5,473,0,0,1896,1897,7,6,0,0,1897,
        1899,3,320,160,0,1898,1896,1,0,0,0,1898,1899,1,0,0,0,1899,2039,1,
        0,0,0,1900,1901,5,420,0,0,1901,1902,7,14,0,0,1902,1903,7,6,0,0,1903,
        1906,3,320,160,0,1904,1905,7,6,0,0,1905,1907,3,320,160,0,1906,1904,
        1,0,0,0,1906,1907,1,0,0,0,1907,2039,1,0,0,0,1908,1909,5,420,0,0,
        1909,1912,5,465,0,0,1910,1911,7,6,0,0,1911,1913,3,320,160,0,1912,
        1910,1,0,0,0,1912,1913,1,0,0,0,1913,1915,1,0,0,0,1914,1916,3,80,
        40,0,1915,1914,1,0,0,0,1915,1916,1,0,0,0,1916,2039,1,0,0,0,1917,
        1918,5,420,0,0,1918,1919,5,362,0,0,1919,1920,5,357,0,0,1920,2039,
        5,538,0,0,1921,1922,5,420,0,0,1922,1923,5,62,0,0,1923,1924,5,221,
        0,0,1924,2039,5,538,0,0,1925,1926,5,420,0,0,1926,1929,5,163,0,0,
        1927,1928,7,6,0,0,1928,1930,3,320,160,0,1929,1927,1,0,0,0,1929,1930,
        1,0,0,0,1930,1932,1,0,0,0,1931,1933,3,80,40,0,1932,1931,1,0,0,0,
        1932,1933,1,0,0,0,1933,2039,1,0,0,0,1934,1935,5,420,0,0,1935,1936,
        5,445,0,0,1936,1939,5,250,0,0,1937,1938,7,6,0,0,1938,1940,3,320,
        160,0,1939,1937,1,0,0,0,1939,1940,1,0,0,0,1940,2039,1,0,0,0,1941,
        1942,5,420,0,0,1942,1943,5,447,0,0,1943,1946,5,102,0,0,1944,1945,
        7,6,0,0,1945,1947,3,320,160,0,1946,1944,1,0,0,0,1946,1947,1,0,0,
        0,1947,1949,1,0,0,0,1948,1950,3,80,40,0,1949,1948,1,0,0,0,1949,1950,
        1,0,0,0,1950,2039,1,0,0,0,1951,1952,5,420,0,0,1952,1953,5,68,0,0,
        1953,1954,5,372,0,0,1954,1956,5,44,0,0,1955,1957,3,80,40,0,1956,
        1955,1,0,0,0,1956,1957,1,0,0,0,1957,2039,1,0,0,0,1958,1959,5,420,
        0,0,1959,1960,5,362,0,0,1960,1971,5,433,0,0,1961,1962,5,193,0,0,
        1962,1972,3,438,219,0,1963,1964,5,198,0,0,1964,1969,3,320,160,0,
        1965,1967,5,21,0,0,1966,1968,5,496,0,0,1967,1966,1,0,0,0,1967,1968,
        1,0,0,0,1968,1970,1,0,0,0,1969,1965,1,0,0,0,1969,1970,1,0,0,0,1970,
        1972,1,0,0,0,1971,1961,1,0,0,0,1971,1963,1,0,0,0,1971,1972,1,0,0,
        0,1972,2039,1,0,0,0,1973,1974,5,420,0,0,1974,1975,5,58,0,0,1975,
        1978,5,230,0,0,1976,1977,7,6,0,0,1977,1979,3,320,160,0,1978,1976,
        1,0,0,0,1978,1979,1,0,0,0,1979,1981,1,0,0,0,1980,1982,3,80,40,0,
        1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,1984,1,0,0,0,1983,1985,
        3,286,143,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,1987,1,0,0,
        0,1986,1988,3,290,145,0,1987,1986,1,0,0,0,1987,1988,1,0,0,0,1988,
        2039,1,0,0,0,1989,1993,5,420,0,0,1990,1994,5,76,0,0,1991,1992,5,
        89,0,0,1992,1994,5,212,0,0,1993,1990,1,0,0,0,1993,1991,1,0,0,0,1994,
        2039,1,0,0,0,1995,1996,5,420,0,0,1996,1999,5,98,0,0,1997,1998,7,
        6,0,0,1998,2000,3,320,160,0,1999,1997,1,0,0,0,1999,2000,1,0,0,0,
        2000,2039,1,0,0,0,2001,2002,5,420,0,0,2002,2003,5,383,0,0,2003,2004,
        5,434,0,0,2004,2005,5,198,0,0,2005,2007,3,78,39,0,2006,2008,3,80,
        40,0,2007,2006,1,0,0,0,2007,2008,1,0,0,0,2008,2039,1,0,0,0,2009,
        2010,5,420,0,0,2010,2011,5,450,0,0,2011,2012,5,436,0,0,2012,2014,
        5,196,0,0,2013,2015,5,496,0,0,2014,2013,1,0,0,0,2014,2015,1,0,0,
        0,2015,2039,1,0,0,0,2016,2017,5,420,0,0,2017,2020,5,99,0,0,2018,
        2019,7,6,0,0,2019,2021,3,320,160,0,2020,2018,1,0,0,0,2020,2021,1,
        0,0,0,2021,2023,1,0,0,0,2022,2024,3,242,121,0,2023,2022,1,0,0,0,
        2023,2024,1,0,0,0,2024,2026,1,0,0,0,2025,2027,3,286,143,0,2026,2025,
        1,0,0,0,2026,2027,1,0,0,0,2027,2029,1,0,0,0,2028,2030,3,290,145,
        0,2029,2028,1,0,0,0,2029,2030,1,0,0,0,2030,2039,1,0,0,0,2031,2032,
        5,420,0,0,2032,2033,5,500,0,0,2033,2034,5,483,0,0,2034,2036,5,250,
        0,0,2035,2037,3,80,40,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,
        2039,1,0,0,0,2038,1505,1,0,0,0,2038,1516,1,0,0,0,2038,1526,1,0,0,
        0,2038,1528,1,0,0,0,2038,1531,1,0,0,0,2038,1536,1,0,0,0,2038,1546,
        1,0,0,0,2038,1556,1,0,0,0,2038,1568,1,0,0,0,2038,1580,1,0,0,0,2038,
        1585,1,0,0,0,2038,1593,1,0,0,0,2038,1598,1,0,0,0,2038,1602,1,0,0,
        0,2038,1618,1,0,0,0,2038,1627,1,0,0,0,2038,1630,1,0,0,0,2038,1633,
        1,0,0,0,2038,1638,1,0,0,0,2038,1641,1,0,0,0,2038,1655,1,0,0,0,2038,
        1660,1,0,0,0,2038,1669,1,0,0,0,2038,1675,1,0,0,0,2038,1680,1,0,0,
        0,2038,1697,1,0,0,0,2038,1715,1,0,0,0,2038,1730,1,0,0,0,2038,1752,
        1,0,0,0,2038,1757,1,0,0,0,2038,1769,1,0,0,0,2038,1785,1,0,0,0,2038,
        1788,1,0,0,0,2038,1804,1,0,0,0,2038,1813,1,0,0,0,2038,1819,1,0,0,
        0,2038,1828,1,0,0,0,2038,1840,1,0,0,0,2038,1851,1,0,0,0,2038,1857,
        1,0,0,0,2038,1863,1,0,0,0,2038,1870,1,0,0,0,2038,1885,1,0,0,0,2038,
        1894,1,0,0,0,2038,1900,1,0,0,0,2038,1908,1,0,0,0,2038,1917,1,0,0,
        0,2038,1921,1,0,0,0,2038,1925,1,0,0,0,2038,1934,1,0,0,0,2038,1941,
        1,0,0,0,2038,1951,1,0,0,0,2038,1958,1,0,0,0,2038,1973,1,0,0,0,2038,
        1989,1,0,0,0,2038,1995,1,0,0,0,2038,2001,1,0,0,0,2038,2009,1,0,0,
        0,2038,2016,1,0,0,0,2038,2031,1,0,0,0,2039,37,1,0,0,0,2040,2041,
        5,101,0,0,2041,2042,5,400,0,0,2042,2043,5,272,0,0,2043,2046,3,320,
        160,0,2044,2045,5,317,0,0,2045,2047,3,438,219,0,2046,2044,1,0,0,
        0,2046,2047,1,0,0,0,2047,2050,1,0,0,0,2048,2049,5,506,0,0,2049,2051,
        7,15,0,0,2050,2048,1,0,0,0,2050,2051,1,0,0,0,2051,2060,1,0,0,0,2052,
        2057,3,42,21,0,2053,2054,5,4,0,0,2054,2056,3,42,21,0,2055,2053,1,
        0,0,0,2056,2059,1,0,0,0,2057,2055,1,0,0,0,2057,2058,1,0,0,0,2058,
        2061,1,0,0,0,2059,2057,1,0,0,0,2060,2052,1,0,0,0,2060,2061,1,0,0,
        0,2061,2063,1,0,0,0,2062,2064,3,308,154,0,2063,2062,1,0,0,0,2063,
        2064,1,0,0,0,2064,2065,1,0,0,0,2065,2066,5,198,0,0,2066,2067,3,438,
        219,0,2067,2068,5,2,0,0,2068,2069,3,310,155,0,2069,2071,5,3,0,0,
        2070,2072,3,426,213,0,2071,2070,1,0,0,0,2071,2072,1,0,0,0,2072,39,
        1,0,0,0,2073,2074,5,272,0,0,2074,2080,3,216,108,0,2075,2076,5,358,
        0,0,2076,2077,5,2,0,0,2077,2078,3,310,155,0,2078,2079,5,3,0,0,2079,
        2081,1,0,0,0,2080,2075,1,0,0,0,2080,2081,1,0,0,0,2081,2083,1,0,0,
        0,2082,2084,3,426,213,0,2083,2082,1,0,0,0,2083,2084,1,0,0,0,2084,
        2173,1,0,0,0,2085,2086,5,101,0,0,2086,2087,5,445,0,0,2087,2088,3,
        320,160,0,2088,2089,5,2,0,0,2089,2090,3,56,28,0,2090,2091,5,3,0,
        0,2091,2092,5,198,0,0,2092,2093,5,46,0,0,2093,2094,5,2,0,0,2094,
        2095,3,310,155,0,2095,2097,5,3,0,0,2096,2098,3,308,154,0,2097,2096,
        1,0,0,0,2097,2098,1,0,0,0,2098,2173,1,0,0,0,2099,2100,5,435,0,0,
        2100,2101,5,445,0,0,2101,2102,5,250,0,0,2102,2173,3,320,160,0,2103,
        2104,5,390,0,0,2104,2105,5,445,0,0,2105,2106,5,250,0,0,2106,2173,
        3,320,160,0,2107,2108,5,337,0,0,2108,2109,5,445,0,0,2109,2110,5,
        250,0,0,2110,2173,3,320,160,0,2111,2112,5,337,0,0,2112,2113,5,400,
        0,0,2113,2114,5,272,0,0,2114,2115,5,193,0,0,2115,2173,3,320,160,
        0,2116,2117,5,337,0,0,2117,2118,5,21,0,0,2118,2119,5,400,0,0,2119,
        2173,5,272,0,0,2120,2121,5,390,0,0,2121,2122,5,400,0,0,2122,2123,
        5,272,0,0,2123,2124,5,193,0,0,2124,2173,3,320,160,0,2125,2126,5,
        390,0,0,2126,2127,5,21,0,0,2127,2128,5,400,0,0,2128,2173,5,272,0,
        0,2129,2130,5,435,0,0,2130,2131,5,400,0,0,2131,2132,5,272,0,0,2132,
        2133,5,193,0,0,2133,2173,3,320,160,0,2134,2136,5,420,0,0,2135,2137,
        5,21,0,0,2136,2135,1,0,0,0,2136,2137,1,0,0,0,2137,2138,1,0,0,0,2138,
        2139,5,400,0,0,2139,2145,5,272,0,0,2140,2141,5,193,0,0,2141,2146,
        3,320,160,0,2142,2144,3,80,40,0,2143,2142,1,0,0,0,2143,2144,1,0,
        0,0,2144,2146,1,0,0,0,2145,2140,1,0,0,0,2145,2143,1,0,0,0,2146,2173,
        1,0,0,0,2147,2148,5,420,0,0,2148,2149,5,400,0,0,2149,2150,5,272,
        0,0,2150,2153,5,452,0,0,2151,2152,7,6,0,0,2152,2154,3,438,219,0,
        2153,2151,1,0,0,0,2153,2154,1,0,0,0,2154,2156,1,0,0,0,2155,2157,
        3,80,40,0,2156,2155,1,0,0,0,2156,2157,1,0,0,0,2157,2173,1,0,0,0,
        2158,2160,5,420,0,0,2159,2161,5,21,0,0,2160,2159,1,0,0,0,2160,2161,
        1,0,0,0,2161,2162,1,0,0,0,2162,2163,5,101,0,0,2163,2164,5,400,0,
        0,2164,2165,5,272,0,0,2165,2166,5,193,0,0,2166,2173,3,320,160,0,
        2167,2168,5,420,0,0,2168,2169,5,101,0,0,2169,2170,5,272,0,0,2170,
        2171,5,193,0,0,2171,2173,3,320,160,0,2172,2073,1,0,0,0,2172,2085,
        1,0,0,0,2172,2099,1,0,0,0,2172,2103,1,0,0,0,2172,2107,1,0,0,0,2172,
        2111,1,0,0,0,2172,2116,1,0,0,0,2172,2120,1,0,0,0,2172,2125,1,0,0,
        0,2172,2129,1,0,0,0,2172,2134,1,0,0,0,2172,2147,1,0,0,0,2172,2158,
        1,0,0,0,2172,2167,1,0,0,0,2173,41,1,0,0,0,2174,2175,5,82,0,0,2175,
        2176,5,455,0,0,2176,2177,5,61,0,0,2177,2185,5,538,0,0,2178,2185,
        3,52,26,0,2179,2185,3,50,25,0,2180,2185,3,48,24,0,2181,2185,3,46,
        23,0,2182,2185,3,44,22,0,2183,2185,3,156,78,0,2184,2174,1,0,0,0,
        2184,2178,1,0,0,0,2184,2179,1,0,0,0,2184,2180,1,0,0,0,2184,2181,
        1,0,0,0,2184,2182,1,0,0,0,2184,2183,1,0,0,0,2185,43,1,0,0,0,2186,
        2187,5,322,0,0,2187,2188,5,61,0,0,2188,2189,3,438,219,0,2189,45,
        1,0,0,0,2190,2191,5,137,0,0,2191,2192,5,317,0,0,2192,2193,3,368,
        184,0,2193,47,1,0,0,0,2194,2195,5,504,0,0,2195,2196,3,368,184,0,
        2196,49,1,0,0,0,2197,2198,5,351,0,0,2198,2199,5,188,0,0,2199,2200,
        3,368,184,0,2200,51,1,0,0,0,2201,2202,5,82,0,0,2202,2203,5,2,0,0,
        2203,2208,3,54,27,0,2204,2205,5,4,0,0,2205,2207,3,54,27,0,2206,2204,
        1,0,0,0,2207,2210,1,0,0,0,2208,2206,1,0,0,0,2208,2209,1,0,0,0,2209,
        2211,1,0,0,0,2210,2208,1,0,0,0,2211,2212,5,3,0,0,2212,53,1,0,0,0,
        2213,2216,3,438,219,0,2214,2215,5,512,0,0,2215,2217,3,368,184,0,
        2216,2214,1,0,0,0,2216,2217,1,0,0,0,2217,2227,1,0,0,0,2218,2219,
        5,2,0,0,2219,2222,3,438,219,0,2220,2221,5,512,0,0,2221,2223,3,368,
        184,0,2222,2220,1,0,0,0,2222,2223,1,0,0,0,2223,2224,1,0,0,0,2224,
        2225,5,3,0,0,2225,2227,1,0,0,0,2226,2213,1,0,0,0,2226,2218,1,0,0,
        0,2227,55,1,0,0,0,2228,2233,3,58,29,0,2229,2230,5,4,0,0,2230,2232,
        3,58,29,0,2231,2229,1,0,0,0,2232,2235,1,0,0,0,2233,2231,1,0,0,0,
        2233,2234,1,0,0,0,2234,57,1,0,0,0,2235,2233,1,0,0,0,2236,2237,5,
        198,0,0,2237,2238,3,320,160,0,2238,2239,5,241,0,0,2239,2241,3,320,
        160,0,2240,2242,3,156,78,0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,
        2244,1,0,0,0,2243,2245,3,298,149,0,2244,2243,1,0,0,0,2244,2245,1,
        0,0,0,2245,59,1,0,0,0,2246,2247,5,373,0,0,2247,2248,5,68,0,0,2248,
        2250,3,438,219,0,2249,2251,3,308,154,0,2250,2249,1,0,0,0,2250,2251,
        1,0,0,0,2251,61,1,0,0,0,2252,2253,5,74,0,0,2253,2254,5,21,0,0,2254,
        2255,5,357,0,0,2255,63,1,0,0,0,2256,2257,5,373,0,0,2257,2258,5,447,
        0,0,2258,2273,3,320,160,0,2259,2260,5,373,0,0,2260,2261,5,113,0,
        0,2261,2263,3,320,160,0,2262,2264,3,308,154,0,2263,2262,1,0,0,0,
        2263,2264,1,0,0,0,2264,2273,1,0,0,0,2265,2266,5,373,0,0,2266,2270,
        5,262,0,0,2267,2271,5,21,0,0,2268,2269,5,193,0,0,2269,2271,3,176,
        88,0,2270,2267,1,0,0,0,2270,2268,1,0,0,0,2271,2273,1,0,0,0,2272,
        2256,1,0,0,0,2272,2259,1,0,0,0,2272,2265,1,0,0,0,2273,65,1,0,0,0,
        2274,2275,5,74,0,0,2275,2277,5,258,0,0,2276,2278,3,438,219,0,2277,
        2276,1,0,0,0,2277,2278,1,0,0,0,2278,2279,1,0,0,0,2279,2280,7,6,0,
        0,2280,2295,3,438,219,0,2281,2282,5,74,0,0,2282,2283,5,362,0,0,2283,
        2288,5,433,0,0,2284,2285,5,193,0,0,2285,2289,3,438,219,0,2286,2287,
        7,6,0,0,2287,2289,3,320,160,0,2288,2284,1,0,0,0,2288,2286,1,0,0,
        0,2289,2295,1,0,0,0,2290,2291,5,74,0,0,2291,2292,5,21,0,0,2292,2293,
        5,362,0,0,2293,2295,5,433,0,0,2294,2274,1,0,0,0,2294,2281,1,0,0,
        0,2294,2290,1,0,0,0,2295,67,1,0,0,0,2296,2297,5,65,0,0,2297,2300,
        5,272,0,0,2298,2299,7,6,0,0,2299,2301,3,438,219,0,2300,2298,1,0,
        0,0,2300,2301,1,0,0,0,2301,2303,1,0,0,0,2302,2304,3,80,40,0,2303,
        2302,1,0,0,0,2303,2304,1,0,0,0,2304,2322,1,0,0,0,2305,2306,5,65,
        0,0,2306,2309,5,178,0,0,2307,2308,7,6,0,0,2308,2310,3,438,219,0,
        2309,2307,1,0,0,0,2309,2310,1,0,0,0,2310,2312,1,0,0,0,2311,2313,
        3,80,40,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,2322,1,0,0,0,
        2314,2315,5,65,0,0,2315,2316,5,500,0,0,2316,2317,5,483,0,0,2317,
        2319,5,250,0,0,2318,2320,3,80,40,0,2319,2318,1,0,0,0,2319,2320,1,
        0,0,0,2320,2322,1,0,0,0,2321,2296,1,0,0,0,2321,2305,1,0,0,0,2321,
        2314,1,0,0,0,2322,69,1,0,0,0,2323,2324,5,65,0,0,2324,2325,5,22,0,
        0,2325,2330,5,447,0,0,2326,2331,5,399,0,0,2327,2328,5,289,0,0,2328,
        2331,5,498,0,0,2329,2331,5,81,0,0,2330,2326,1,0,0,0,2330,2327,1,
        0,0,0,2330,2329,1,0,0,0,2331,2332,1,0,0,0,2332,2333,5,198,0,0,2333,
        2344,3,320,160,0,2334,2335,5,2,0,0,2335,2340,5,543,0,0,2336,2337,
        5,4,0,0,2337,2339,5,543,0,0,2338,2336,1,0,0,0,2339,2342,1,0,0,0,
        2340,2338,1,0,0,0,2340,2341,1,0,0,0,2341,2343,1,0,0,0,2342,2340,
        1,0,0,0,2343,2345,5,3,0,0,2344,2334,1,0,0,0,2344,2345,1,0,0,0,2345,
        2387,1,0,0,0,2346,2347,5,65,0,0,2347,2348,5,58,0,0,2348,2349,5,230,
        0,0,2349,2350,5,317,0,0,2350,2361,3,320,160,0,2351,2352,5,2,0,0,
        2352,2357,5,543,0,0,2353,2354,5,4,0,0,2354,2356,5,543,0,0,2355,2353,
        1,0,0,0,2356,2359,1,0,0,0,2357,2355,1,0,0,0,2357,2358,1,0,0,0,2358,
        2360,1,0,0,0,2359,2357,1,0,0,0,2360,2362,5,3,0,0,2361,2351,1,0,0,
        0,2361,2362,1,0,0,0,2362,2387,1,0,0,0,2363,2364,5,65,0,0,2364,2365,
        5,134,0,0,2365,2366,5,37,0,0,2366,2371,5,538,0,0,2367,2368,5,4,0,
        0,2368,2370,5,538,0,0,2369,2367,1,0,0,0,2370,2373,1,0,0,0,2371,2369,
        1,0,0,0,2371,2372,1,0,0,0,2372,2387,1,0,0,0,2373,2371,1,0,0,0,2374,
        2375,5,65,0,0,2375,2378,5,39,0,0,2376,2377,7,6,0,0,2377,2379,3,438,
        219,0,2378,2376,1,0,0,0,2378,2379,1,0,0,0,2379,2387,1,0,0,0,2380,
        2381,5,65,0,0,2381,2384,5,388,0,0,2382,2383,7,6,0,0,2383,2385,3,
        438,219,0,2384,2382,1,0,0,0,2384,2385,1,0,0,0,2385,2387,1,0,0,0,
        2386,2323,1,0,0,0,2386,2346,1,0,0,0,2386,2363,1,0,0,0,2386,2374,
        1,0,0,0,2386,2380,1,0,0,0,2387,71,1,0,0,0,2388,2389,5,16,0,0,2389,
        2390,5,420,0,0,2390,2391,5,383,0,0,2391,2392,5,148,0,0,2392,2393,
        5,198,0,0,2393,2394,3,78,39,0,2394,73,1,0,0,0,2395,2396,5,371,0,
        0,2396,2397,5,113,0,0,2397,2399,3,438,219,0,2398,2400,5,543,0,0,
        2399,2398,1,0,0,0,2399,2400,1,0,0,0,2400,2403,1,0,0,0,2401,2402,
        5,30,0,0,2402,2404,3,438,219,0,2403,2401,1,0,0,0,2403,2404,1,0,0,
        0,2404,2429,1,0,0,0,2405,2406,5,371,0,0,2406,2407,5,447,0,0,2407,
        2409,3,320,160,0,2408,2410,5,543,0,0,2409,2408,1,0,0,0,2409,2410,
        1,0,0,0,2410,2413,1,0,0,0,2411,2412,5,30,0,0,2412,2414,3,438,219,
        0,2413,2411,1,0,0,0,2413,2414,1,0,0,0,2414,2429,1,0,0,0,2415,2416,
        5,371,0,0,2416,2417,5,329,0,0,2417,2419,3,438,219,0,2418,2420,5,
        543,0,0,2419,2418,1,0,0,0,2419,2420,1,0,0,0,2420,2423,1,0,0,0,2421,
        2422,5,30,0,0,2422,2424,3,438,219,0,2423,2421,1,0,0,0,2423,2424,
        1,0,0,0,2424,2425,1,0,0,0,2425,2426,5,198,0,0,2426,2427,3,320,160,
        0,2427,2429,1,0,0,0,2428,2395,1,0,0,0,2428,2405,1,0,0,0,2428,2415,
        1,0,0,0,2429,75,1,0,0,0,2430,2431,5,16,0,0,2431,2432,5,420,0,0,2432,
        2433,5,383,0,0,2433,2434,5,434,0,0,2434,2435,5,198,0,0,2435,2437,
        3,78,39,0,2436,2438,3,80,40,0,2437,2436,1,0,0,0,2437,2438,1,0,0,
        0,2438,2570,1,0,0,0,2439,2440,5,16,0,0,2440,2441,5,416,0,0,2441,
        2442,5,383,0,0,2442,2443,5,434,0,0,2443,2444,5,358,0,0,2444,2445,
        5,2,0,0,2445,2446,3,310,155,0,2446,2447,5,3,0,0,2447,2570,1,0,0,
        0,2448,2449,5,16,0,0,2449,2450,5,416,0,0,2450,2451,5,383,0,0,2451,
        2452,5,497,0,0,2452,2453,5,358,0,0,2453,2454,5,2,0,0,2454,2455,3,
        310,155,0,2455,2456,5,3,0,0,2456,2570,1,0,0,0,2457,2458,5,16,0,0,
        2458,2459,5,378,0,0,2459,2460,5,447,0,0,2460,2570,3,78,39,0,2461,
        2462,5,16,0,0,2462,2463,5,65,0,0,2463,2464,5,378,0,0,2464,2465,5,
        447,0,0,2465,2570,3,78,39,0,2466,2467,5,16,0,0,2467,2468,5,86,0,
        0,2468,2469,5,447,0,0,2469,2471,3,78,39,0,2470,2472,3,80,40,0,2471,
        2470,1,0,0,0,2471,2472,1,0,0,0,2472,2570,1,0,0,0,2473,2474,5,16,
        0,0,2474,2478,5,416,0,0,2475,2479,5,199,0,0,2476,2477,5,21,0,0,2477,
        2479,5,200,0,0,2478,2475,1,0,0,0,2478,2476,1,0,0,0,2479,2480,1,0,
        0,0,2480,2485,5,91,0,0,2481,2482,5,2,0,0,2482,2483,3,310,155,0,2483,
        2484,5,3,0,0,2484,2486,1,0,0,0,2485,2481,1,0,0,0,2485,2486,1,0,0,
        0,2486,2488,1,0,0,0,2487,2489,5,21,0,0,2488,2487,1,0,0,0,2488,2489,
        1,0,0,0,2489,2570,1,0,0,0,2490,2491,5,16,0,0,2491,2492,5,73,0,0,
        2492,2494,3,356,178,0,2493,2495,3,308,154,0,2494,2493,1,0,0,0,2494,
        2495,1,0,0,0,2495,2570,1,0,0,0,2496,2497,5,16,0,0,2497,2498,5,369,
        0,0,2498,2506,5,143,0,0,2499,2500,5,317,0,0,2500,2501,5,2,0,0,2501,
        2502,5,538,0,0,2502,2503,5,4,0,0,2503,2504,5,538,0,0,2504,2505,1,
        0,0,0,2505,2507,5,3,0,0,2506,2499,1,0,0,0,2506,2507,1,0,0,0,2507,
        2570,1,0,0,0,2508,2509,5,16,0,0,2509,2510,5,65,0,0,2510,2511,5,369,
        0,0,2511,2519,5,143,0,0,2512,2513,5,317,0,0,2513,2514,5,2,0,0,2514,
        2515,5,538,0,0,2515,2516,5,4,0,0,2516,2517,5,538,0,0,2517,2518,1,
        0,0,0,2518,2520,5,3,0,0,2519,2512,1,0,0,0,2519,2520,1,0,0,0,2520,
        2570,1,0,0,0,2521,2522,5,16,0,0,2522,2523,5,74,0,0,2523,2531,5,466,
        0,0,2524,2525,5,317,0,0,2525,2526,5,2,0,0,2526,2527,5,538,0,0,2527,
        2528,5,4,0,0,2528,2529,5,538,0,0,2529,2530,1,0,0,0,2530,2532,5,3,
        0,0,2531,2524,1,0,0,0,2531,2532,1,0,0,0,2532,2570,1,0,0,0,2533,2534,
        5,16,0,0,2534,2535,5,416,0,0,2535,2536,5,447,0,0,2536,2537,3,320,
        160,0,2537,2538,5,329,0,0,2538,2540,5,497,0,0,2539,2541,3,308,154,
        0,2540,2539,1,0,0,0,2540,2541,1,0,0,0,2541,2570,1,0,0,0,2542,2543,
        5,16,0,0,2543,2544,5,141,0,0,2544,2545,5,450,0,0,2545,2570,5,543,
        0,0,2546,2547,5,16,0,0,2547,2548,5,420,0,0,2548,2549,5,450,0,0,2549,
        2550,5,436,0,0,2550,2552,5,196,0,0,2551,2553,5,496,0,0,2552,2551,
        1,0,0,0,2552,2553,1,0,0,0,2553,2570,1,0,0,0,2554,2555,5,16,0,0,2555,
        2556,5,99,0,0,2556,2557,5,450,0,0,2557,2559,5,543,0,0,2558,2560,
        3,308,154,0,2559,2558,1,0,0,0,2559,2560,1,0,0,0,2560,2570,1,0,0,
        0,2561,2562,5,16,0,0,2562,2563,5,416,0,0,2563,2564,5,447,0,0,2564,
        2565,3,320,160,0,2565,2567,5,434,0,0,2566,2568,3,308,154,0,2567,
        2566,1,0,0,0,2567,2568,1,0,0,0,2568,2570,1,0,0,0,2569,2430,1,0,0,
        0,2569,2439,1,0,0,0,2569,2448,1,0,0,0,2569,2457,1,0,0,0,2569,2461,
        1,0,0,0,2569,2466,1,0,0,0,2569,2473,1,0,0,0,2569,2490,1,0,0,0,2569,
        2496,1,0,0,0,2569,2508,1,0,0,0,2569,2521,1,0,0,0,2569,2533,1,0,0,
        0,2569,2542,1,0,0,0,2569,2546,1,0,0,0,2569,2554,1,0,0,0,2569,2561,
        1,0,0,0,2570,77,1,0,0,0,2571,2573,3,320,160,0,2572,2574,3,302,151,
        0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,2576,1,0,0,0,2575,2577,
        3,432,216,0,2576,2575,1,0,0,0,2576,2577,1,0,0,0,2577,2579,1,0,0,
        0,2578,2580,3,402,201,0,2579,2578,1,0,0,0,2579,2580,1,0,0,0,2580,
        2582,1,0,0,0,2581,2583,3,356,178,0,2582,2581,1,0,0,0,2582,2583,1,
        0,0,0,2583,2584,1,0,0,0,2584,2586,3,318,159,0,2585,2587,3,428,214,
        0,2586,2585,1,0,0,0,2586,2587,1,0,0,0,2587,2589,1,0,0,0,2588,2590,
        3,260,130,0,2589,2588,1,0,0,0,2589,2590,1,0,0,0,2590,79,1,0,0,0,
        2591,2592,5,267,0,0,2592,2596,5,538,0,0,2593,2594,5,504,0,0,2594,
        2596,3,364,182,0,2595,2591,1,0,0,0,2595,2593,1,0,0,0,2596,81,1,0,
        0,0,2597,2603,5,40,0,0,2598,2599,5,506,0,0,2599,2601,5,258,0,0,2600,
        2602,3,438,219,0,2601,2600,1,0,0,0,2601,2602,1,0,0,0,2602,2604,1,
        0,0,0,2603,2598,1,0,0,0,2603,2604,1,0,0,0,2604,2640,1,0,0,0,2605,
        2607,5,84,0,0,2606,2608,5,507,0,0,2607,2606,1,0,0,0,2607,2608,1,
        0,0,0,2608,2614,1,0,0,0,2609,2611,5,25,0,0,2610,2612,5,309,0,0,2611,
        2610,1,0,0,0,2611,2612,1,0,0,0,2612,2613,1,0,0,0,2613,2615,5,70,
        0,0,2614,2609,1,0,0,0,2614,2615,1,0,0,0,2615,2620,1,0,0,0,2616,2618,
        5,309,0,0,2617,2616,1,0,0,0,2617,2618,1,0,0,0,2618,2619,1,0,0,0,
        2619,2621,5,376,0,0,2620,2617,1,0,0,0,2620,2621,1,0,0,0,2621,2640,
        1,0,0,0,2622,2624,5,398,0,0,2623,2625,5,507,0,0,2624,2623,1,0,0,
        0,2624,2625,1,0,0,0,2625,2631,1,0,0,0,2626,2628,5,25,0,0,2627,2629,
        5,309,0,0,2628,2627,1,0,0,0,2628,2629,1,0,0,0,2629,2630,1,0,0,0,
        2630,2632,5,70,0,0,2631,2626,1,0,0,0,2631,2632,1,0,0,0,2632,2637,
        1,0,0,0,2633,2635,5,309,0,0,2634,2633,1,0,0,0,2634,2635,1,0,0,0,
        2635,2636,1,0,0,0,2636,2638,5,376,0,0,2637,2634,1,0,0,0,2637,2638,
        1,0,0,0,2638,2640,1,0,0,0,2639,2597,1,0,0,0,2639,2605,1,0,0,0,2639,
        2622,1,0,0,0,2640,83,1,0,0,0,2641,2642,5,207,0,0,2642,2643,3,88,
        44,0,2643,2644,5,317,0,0,2644,2645,3,180,90,0,2645,2649,5,464,0,
        0,2646,2650,3,184,92,0,2647,2648,5,396,0,0,2648,2650,5,538,0,0,2649,
        2646,1,0,0,0,2649,2647,1,0,0,0,2650,2726,1,0,0,0,2651,2652,5,207,
        0,0,2652,2653,3,88,44,0,2653,2663,5,317,0,0,2654,2664,5,386,0,0,
        2655,2664,5,75,0,0,2656,2657,5,89,0,0,2657,2664,5,210,0,0,2658,2664,
        5,429,0,0,2659,2660,5,436,0,0,2660,2664,5,494,0,0,2661,2662,5,508,
        0,0,2662,2664,5,210,0,0,2663,2654,1,0,0,0,2663,2655,1,0,0,0,2663,
        2656,1,0,0,0,2663,2658,1,0,0,0,2663,2659,1,0,0,0,2663,2661,1,0,0,
        0,2664,2665,1,0,0,0,2665,2666,3,178,89,0,2666,2670,5,464,0,0,2667,
        2671,3,184,92,0,2668,2669,5,396,0,0,2669,2671,5,538,0,0,2670,2667,
        1,0,0,0,2670,2668,1,0,0,0,2671,2726,1,0,0,0,2672,2673,5,207,0,0,
        2673,2678,5,538,0,0,2674,2675,5,4,0,0,2675,2677,5,538,0,0,2676,2674,
        1,0,0,0,2677,2680,1,0,0,0,2678,2676,1,0,0,0,2678,2679,1,0,0,0,2679,
        2681,1,0,0,0,2680,2678,1,0,0,0,2681,2682,5,464,0,0,2682,2726,3,184,
        92,0,2683,2684,5,392,0,0,2684,2685,3,88,44,0,2685,2686,5,317,0,0,
        2686,2687,3,180,90,0,2687,2691,5,198,0,0,2688,2692,3,184,92,0,2689,
        2690,5,396,0,0,2690,2692,5,538,0,0,2691,2688,1,0,0,0,2691,2689,1,
        0,0,0,2692,2726,1,0,0,0,2693,2694,5,392,0,0,2694,2695,3,88,44,0,
        2695,2705,5,317,0,0,2696,2706,5,386,0,0,2697,2706,5,75,0,0,2698,
        2699,5,89,0,0,2699,2706,5,210,0,0,2700,2706,5,429,0,0,2701,2702,
        5,436,0,0,2702,2706,5,494,0,0,2703,2704,5,508,0,0,2704,2706,5,210,
        0,0,2705,2696,1,0,0,0,2705,2697,1,0,0,0,2705,2698,1,0,0,0,2705,2700,
        1,0,0,0,2705,2701,1,0,0,0,2705,2703,1,0,0,0,2706,2707,1,0,0,0,2707,
        2708,3,178,89,0,2708,2712,5,198,0,0,2709,2713,3,184,92,0,2710,2711,
        5,396,0,0,2711,2713,5,538,0,0,2712,2709,1,0,0,0,2712,2710,1,0,0,
        0,2713,2726,1,0,0,0,2714,2715,5,392,0,0,2715,2720,5,538,0,0,2716,
        2717,5,4,0,0,2717,2719,5,538,0,0,2718,2716,1,0,0,0,2719,2722,1,0,
        0,0,2720,2718,1,0,0,0,2720,2721,1,0,0,0,2721,2723,1,0,0,0,2722,2720,
        1,0,0,0,2723,2724,5,198,0,0,2724,2726,3,184,92,0,2725,2641,1,0,0,
        0,2725,2651,1,0,0,0,2725,2672,1,0,0,0,2725,2683,1,0,0,0,2725,2693,
        1,0,0,0,2725,2714,1,0,0,0,2726,85,1,0,0,0,2727,2729,3,438,219,0,
        2728,2730,3,298,149,0,2729,2728,1,0,0,0,2729,2730,1,0,0,0,2730,2733,
        1,0,0,0,2731,2733,5,21,0,0,2732,2727,1,0,0,0,2732,2731,1,0,0,0,2733,
        87,1,0,0,0,2734,2739,3,86,43,0,2735,2736,5,4,0,0,2736,2738,3,86,
        43,0,2737,2735,1,0,0,0,2738,2741,1,0,0,0,2739,2737,1,0,0,0,2739,
        2740,1,0,0,0,2740,89,1,0,0,0,2741,2739,1,0,0,0,2742,2743,5,22,0,
        0,2743,2744,5,447,0,0,2744,2745,3,320,160,0,2745,2750,3,98,49,0,
        2746,2747,5,4,0,0,2747,2749,3,98,49,0,2748,2746,1,0,0,0,2749,2752,
        1,0,0,0,2750,2748,1,0,0,0,2750,2751,1,0,0,0,2751,2899,1,0,0,0,2752,
        2750,1,0,0,0,2753,2754,5,22,0,0,2754,2755,5,447,0,0,2755,2756,3,
        320,160,0,2756,2757,5,14,0,0,2757,2758,5,399,0,0,2758,2763,3,96,
        48,0,2759,2760,5,4,0,0,2760,2762,3,96,48,0,2761,2759,1,0,0,0,2762,
        2765,1,0,0,0,2763,2761,1,0,0,0,2763,2764,1,0,0,0,2764,2899,1,0,0,
        0,2765,2763,1,0,0,0,2766,2767,5,22,0,0,2767,2768,5,447,0,0,2768,
        2769,3,320,160,0,2769,2770,5,153,0,0,2770,2771,5,399,0,0,2771,2776,
        3,94,47,0,2772,2773,5,4,0,0,2773,2775,3,94,47,0,2774,2772,1,0,0,
        0,2775,2778,1,0,0,0,2776,2774,1,0,0,0,2776,2777,1,0,0,0,2777,2899,
        1,0,0,0,2778,2776,1,0,0,0,2779,2780,5,22,0,0,2780,2781,5,446,0,0,
        2781,2899,3,92,46,0,2782,2783,5,22,0,0,2783,2784,5,113,0,0,2784,
        2785,3,438,219,0,2785,2786,5,416,0,0,2786,2787,7,16,0,0,2787,2788,
        5,363,0,0,2788,2790,5,543,0,0,2789,2791,3,438,219,0,2790,2789,1,
        0,0,0,2790,2791,1,0,0,0,2791,2899,1,0,0,0,2792,2793,5,22,0,0,2793,
        2794,5,113,0,0,2794,2795,3,438,219,0,2795,2796,5,377,0,0,2796,2797,
        3,438,219,0,2797,2899,1,0,0,0,2798,2799,5,22,0,0,2799,2800,5,113,
        0,0,2800,2801,3,438,219,0,2801,2802,5,416,0,0,2802,2803,5,358,0,
        0,2803,2804,5,2,0,0,2804,2805,3,310,155,0,2805,2806,5,3,0,0,2806,
        2899,1,0,0,0,2807,2808,5,22,0,0,2808,2809,5,68,0,0,2809,2810,3,438,
        219,0,2810,2811,5,377,0,0,2811,2812,3,438,219,0,2812,2899,1,0,0,
        0,2813,2814,5,22,0,0,2814,2815,5,68,0,0,2815,2816,3,438,219,0,2816,
        2817,5,416,0,0,2817,2818,5,358,0,0,2818,2819,5,2,0,0,2819,2820,3,
        310,155,0,2820,2821,5,3,0,0,2821,2899,1,0,0,0,2822,2823,5,22,0,0,
        2823,2824,5,68,0,0,2824,2825,3,438,219,0,2825,2826,5,299,0,0,2826,
        2827,5,83,0,0,2827,2828,5,538,0,0,2828,2899,1,0,0,0,2829,2830,5,
        22,0,0,2830,2831,5,386,0,0,2831,2833,3,176,88,0,2832,2834,3,308,
        154,0,2833,2832,1,0,0,0,2833,2834,1,0,0,0,2834,2899,1,0,0,0,2835,
        2836,5,22,0,0,2836,2837,5,80,0,0,2837,2838,5,210,0,0,2838,2839,3,
        320,160,0,2839,2840,5,416,0,0,2840,2841,5,2,0,0,2841,2842,3,310,
        155,0,2842,2843,5,3,0,0,2843,2899,1,0,0,0,2844,2845,5,22,0,0,2845,
        2846,5,400,0,0,2846,2847,5,272,0,0,2847,2848,5,193,0,0,2848,2850,
        3,320,160,0,2849,2851,3,308,154,0,2850,2849,1,0,0,0,2850,2851,1,
        0,0,0,2851,2858,1,0,0,0,2852,2853,5,198,0,0,2853,2854,3,438,219,
        0,2854,2855,5,2,0,0,2855,2856,3,310,155,0,2856,2857,5,3,0,0,2857,
        2859,1,0,0,0,2858,2852,1,0,0,0,2858,2859,1,0,0,0,2859,2899,1,0,0,
        0,2860,2861,5,22,0,0,2861,2862,5,428,0,0,2862,2864,3,438,219,0,2863,
        2865,3,308,154,0,2864,2863,1,0,0,0,2864,2865,1,0,0,0,2865,2899,1,
        0,0,0,2866,2867,5,22,0,0,2867,2868,5,447,0,0,2868,2869,3,320,160,
        0,2869,2870,5,416,0,0,2870,2871,5,2,0,0,2871,2872,3,310,155,0,2872,
        2873,5,3,0,0,2873,2899,1,0,0,0,2874,2875,5,22,0,0,2875,2876,5,436,
        0,0,2876,2877,5,350,0,0,2877,2878,3,176,88,0,2878,2879,3,308,154,
        0,2879,2899,1,0,0,0,2880,2881,5,22,0,0,2881,2884,5,486,0,0,2882,
        2883,5,225,0,0,2883,2885,5,175,0,0,2884,2882,1,0,0,0,2884,2885,1,
        0,0,0,2885,2886,1,0,0,0,2886,2887,3,186,93,0,2887,2890,3,124,62,
        0,2888,2889,5,83,0,0,2889,2891,5,538,0,0,2890,2888,1,0,0,0,2890,
        2891,1,0,0,0,2891,2899,1,0,0,0,2892,2893,5,22,0,0,2893,2894,5,385,
        0,0,2894,2896,3,438,219,0,2895,2897,3,308,154,0,2896,2895,1,0,0,
        0,2896,2897,1,0,0,0,2897,2899,1,0,0,0,2898,2742,1,0,0,0,2898,2753,
        1,0,0,0,2898,2766,1,0,0,0,2898,2779,1,0,0,0,2898,2782,1,0,0,0,2898,
        2792,1,0,0,0,2898,2798,1,0,0,0,2898,2807,1,0,0,0,2898,2813,1,0,0,
        0,2898,2822,1,0,0,0,2898,2829,1,0,0,0,2898,2835,1,0,0,0,2898,2844,
        1,0,0,0,2898,2860,1,0,0,0,2898,2866,1,0,0,0,2898,2874,1,0,0,0,2898,
        2880,1,0,0,0,2898,2892,1,0,0,0,2899,91,1,0,0,0,2900,2901,5,14,0,
        0,2901,2902,5,37,0,0,2902,2907,5,538,0,0,2903,2904,5,4,0,0,2904,
        2906,5,538,0,0,2905,2903,1,0,0,0,2906,2909,1,0,0,0,2907,2905,1,0,
        0,0,2907,2908,1,0,0,0,2908,2911,1,0,0,0,2909,2907,1,0,0,0,2910,2912,
        3,308,154,0,2911,2910,1,0,0,0,2911,2912,1,0,0,0,2912,2999,1,0,0,
        0,2913,2914,7,17,0,0,2914,2915,5,37,0,0,2915,2920,5,538,0,0,2916,
        2917,5,4,0,0,2917,2919,5,538,0,0,2918,2916,1,0,0,0,2919,2922,1,0,
        0,0,2920,2918,1,0,0,0,2920,2921,1,0,0,0,2921,2999,1,0,0,0,2922,2920,
        1,0,0,0,2923,2924,5,134,0,0,2924,2925,5,37,0,0,2925,2930,5,538,0,
        0,2926,2927,5,4,0,0,2927,2929,5,538,0,0,2928,2926,1,0,0,0,2929,2932,
        1,0,0,0,2930,2928,1,0,0,0,2930,2931,1,0,0,0,2931,2999,1,0,0,0,2932,
        2930,1,0,0,0,2933,2934,5,14,0,0,2934,2935,5,314,0,0,2935,2999,5,
        538,0,0,2936,2937,5,153,0,0,2937,2938,5,314,0,0,2938,2999,5,538,
        0,0,2939,2940,5,14,0,0,2940,2941,5,191,0,0,2941,2999,5,538,0,0,2942,
        2943,5,153,0,0,2943,2944,5,191,0,0,2944,2999,5,538,0,0,2945,2946,
        5,14,0,0,2946,2947,5,56,0,0,2947,2948,3,176,88,0,2948,2953,5,538,
        0,0,2949,2950,5,4,0,0,2950,2952,5,538,0,0,2951,2949,1,0,0,0,2952,
        2955,1,0,0,0,2953,2951,1,0,0,0,2953,2954,1,0,0,0,2954,2999,1,0,0,
        0,2955,2953,1,0,0,0,2956,2957,5,153,0,0,2957,2958,5,56,0,0,2958,
        2959,3,176,88,0,2959,2964,5,538,0,0,2960,2961,5,4,0,0,2961,2963,
        5,538,0,0,2962,2960,1,0,0,0,2963,2966,1,0,0,0,2964,2962,1,0,0,0,
        2964,2965,1,0,0,0,2965,2999,1,0,0,0,2966,2964,1,0,0,0,2967,2968,
        5,153,0,0,2968,2969,5,21,0,0,2969,2970,5,56,0,0,2970,2999,3,176,
        88,0,2971,2972,5,416,0,0,2972,2973,5,272,0,0,2973,2974,5,169,0,0,
        2974,2976,5,223,0,0,2975,2977,3,308,154,0,2976,2975,1,0,0,0,2976,
        2977,1,0,0,0,2977,2999,1,0,0,0,2978,2979,5,299,0,0,2979,2980,5,37,
        0,0,2980,2985,5,538,0,0,2981,2982,5,4,0,0,2982,2984,5,538,0,0,2983,
        2981,1,0,0,0,2984,2987,1,0,0,0,2985,2983,1,0,0,0,2985,2986,1,0,0,
        0,2986,2988,1,0,0,0,2987,2985,1,0,0,0,2988,2989,5,416,0,0,2989,2990,
        5,2,0,0,2990,2991,3,310,155,0,2991,2992,5,3,0,0,2992,2999,1,0,0,
        0,2993,2994,5,299,0,0,2994,2995,7,2,0,0,2995,2996,5,538,0,0,2996,
        2997,5,220,0,0,2997,2999,5,538,0,0,2998,2900,1,0,0,0,2998,2913,1,
        0,0,0,2998,2923,1,0,0,0,2998,2933,1,0,0,0,2998,2936,1,0,0,0,2998,
        2939,1,0,0,0,2998,2942,1,0,0,0,2998,2945,1,0,0,0,2998,2956,1,0,0,
        0,2998,2967,1,0,0,0,2998,2971,1,0,0,0,2998,2978,1,0,0,0,2998,2993,
        1,0,0,0,2999,93,1,0,0,0,3000,3002,3,438,219,0,3001,3003,3,308,154,
        0,3002,3001,1,0,0,0,3002,3003,1,0,0,0,3003,95,1,0,0,0,3004,3005,
        3,438,219,0,3005,3009,3,298,149,0,3006,3007,5,157,0,0,3007,3008,
        5,255,0,0,3008,3010,3,298,149,0,3009,3006,1,0,0,0,3009,3010,1,0,
        0,0,3010,3012,1,0,0,0,3011,3013,3,104,52,0,3012,3011,1,0,0,0,3012,
        3013,1,0,0,0,3013,3015,1,0,0,0,3014,3016,3,308,154,0,3015,3014,1,
        0,0,0,3015,3016,1,0,0,0,3016,97,1,0,0,0,3017,3018,5,14,0,0,3018,
        3019,5,81,0,0,3019,3021,3,328,164,0,3020,3022,3,100,50,0,3021,3020,
        1,0,0,0,3021,3022,1,0,0,0,3022,3024,1,0,0,0,3023,3025,3,102,51,0,
        3024,3023,1,0,0,0,3024,3025,1,0,0,0,3025,3027,1,0,0,0,3026,3028,
        3,308,154,0,3027,3026,1,0,0,0,3027,3028,1,0,0,0,3028,3259,1,0,0,
        0,3029,3030,5,14,0,0,3030,3031,5,81,0,0,3031,3032,5,2,0,0,3032,3037,
        3,328,164,0,3033,3034,5,4,0,0,3034,3036,3,328,164,0,3035,3033,1,
        0,0,0,3036,3039,1,0,0,0,3037,3035,1,0,0,0,3037,3038,1,0,0,0,3038,
        3040,1,0,0,0,3039,3037,1,0,0,0,3040,3042,5,3,0,0,3041,3043,3,102,
        51,0,3042,3041,1,0,0,0,3042,3043,1,0,0,0,3043,3045,1,0,0,0,3044,
        3046,3,308,154,0,3045,3044,1,0,0,0,3045,3046,1,0,0,0,3046,3259,1,
        0,0,0,3047,3048,5,153,0,0,3048,3049,5,81,0,0,3049,3051,3,438,219,
        0,3050,3052,3,104,52,0,3051,3050,1,0,0,0,3051,3052,1,0,0,0,3052,
        3054,1,0,0,0,3053,3055,3,308,154,0,3054,3053,1,0,0,0,3054,3055,1,
        0,0,0,3055,3259,1,0,0,0,3056,3057,5,299,0,0,3057,3058,5,81,0,0,3058,
        3060,3,328,164,0,3059,3061,3,100,50,0,3060,3059,1,0,0,0,3060,3061,
        1,0,0,0,3061,3063,1,0,0,0,3062,3064,3,104,52,0,3063,3062,1,0,0,0,
        3063,3064,1,0,0,0,3064,3066,1,0,0,0,3065,3067,3,308,154,0,3066,3065,
        1,0,0,0,3066,3067,1,0,0,0,3067,3259,1,0,0,0,3068,3069,5,322,0,0,
        3069,3070,5,61,0,0,3070,3072,3,298,149,0,3071,3073,3,104,52,0,3072,
        3071,1,0,0,0,3072,3073,1,0,0,0,3073,3075,1,0,0,0,3074,3076,3,308,
        154,0,3075,3074,1,0,0,0,3075,3076,1,0,0,0,3076,3259,1,0,0,0,3077,
        3079,5,14,0,0,3078,3080,5,454,0,0,3079,3078,1,0,0,0,3079,3080,1,
        0,0,0,3080,3084,1,0,0,0,3081,3085,3,338,169,0,3082,3085,3,340,170,
        0,3083,3085,3,344,172,0,3084,3081,1,0,0,0,3084,3082,1,0,0,0,3084,
        3083,1,0,0,0,3085,3090,1,0,0,0,3086,3087,5,2,0,0,3087,3088,3,310,
        155,0,3088,3089,5,3,0,0,3089,3091,1,0,0,0,3090,3086,1,0,0,0,3090,
        3091,1,0,0,0,3091,3106,1,0,0,0,3092,3093,5,147,0,0,3093,3097,5,61,
        0,0,3094,3095,5,213,0,0,3095,3098,3,298,149,0,3096,3098,5,365,0,
        0,3097,3094,1,0,0,0,3097,3096,1,0,0,0,3098,3104,1,0,0,0,3099,3102,
        5,57,0,0,3100,3103,5,543,0,0,3101,3103,5,34,0,0,3102,3100,1,0,0,
        0,3102,3101,1,0,0,0,3103,3105,1,0,0,0,3104,3099,1,0,0,0,3104,3105,
        1,0,0,0,3105,3107,1,0,0,0,3106,3092,1,0,0,0,3106,3107,1,0,0,0,3107,
        3109,1,0,0,0,3108,3110,3,308,154,0,3109,3108,1,0,0,0,3109,3110,1,
        0,0,0,3110,3259,1,0,0,0,3111,3113,5,153,0,0,3112,3114,5,454,0,0,
        3113,3112,1,0,0,0,3113,3114,1,0,0,0,3114,3115,1,0,0,0,3115,3118,
        5,329,0,0,3116,3117,5,225,0,0,3117,3119,5,175,0,0,3118,3116,1,0,
        0,0,3118,3119,1,0,0,0,3119,3120,1,0,0,0,3120,3122,3,438,219,0,3121,
        3123,5,195,0,0,3122,3121,1,0,0,0,3122,3123,1,0,0,0,3123,3127,1,0,
        0,0,3124,3125,5,198,0,0,3125,3126,5,230,0,0,3126,3128,3,438,219,
        0,3127,3124,1,0,0,0,3127,3128,1,0,0,0,3128,3259,1,0,0,0,3129,3131,
        5,299,0,0,3130,3132,5,454,0,0,3131,3130,1,0,0,0,3131,3132,1,0,0,
        0,3132,3133,1,0,0,0,3133,3136,5,329,0,0,3134,3135,5,225,0,0,3135,
        3137,5,175,0,0,3136,3134,1,0,0,0,3136,3137,1,0,0,0,3137,3143,1,0,
        0,0,3138,3144,3,438,219,0,3139,3144,3,298,149,0,3140,3141,5,2,0,
        0,3141,3142,5,521,0,0,3142,3144,5,3,0,0,3143,3138,1,0,0,0,3143,3139,
        1,0,0,0,3143,3140,1,0,0,0,3144,3145,1,0,0,0,3145,3146,5,416,0,0,
        3146,3147,5,2,0,0,3147,3148,3,310,155,0,3148,3149,5,3,0,0,3149,3259,
        1,0,0,0,3150,3152,5,380,0,0,3151,3153,3,156,78,0,3152,3151,1,0,0,
        0,3152,3153,1,0,0,0,3153,3154,1,0,0,0,3154,3156,5,506,0,0,3155,3157,
        3,156,78,0,3156,3155,1,0,0,0,3156,3157,1,0,0,0,3157,3159,1,0,0,0,
        3158,3160,5,195,0,0,3159,3158,1,0,0,0,3159,3160,1,0,0,0,3160,3162,
        1,0,0,0,3161,3163,3,308,154,0,3162,3161,1,0,0,0,3162,3163,1,0,0,
        0,3163,3259,1,0,0,0,3164,3165,5,380,0,0,3165,3166,5,506,0,0,3166,
        3167,5,447,0,0,3167,3169,3,438,219,0,3168,3170,3,308,154,0,3169,
        3168,1,0,0,0,3169,3170,1,0,0,0,3170,3172,1,0,0,0,3171,3173,5,195,
        0,0,3172,3171,1,0,0,0,3172,3173,1,0,0,0,3173,3259,1,0,0,0,3174,3175,
        5,377,0,0,3175,3259,3,438,219,0,3176,3177,5,377,0,0,3177,3178,5,
        399,0,0,3178,3179,3,438,219,0,3179,3180,3,438,219,0,3180,3259,1,
        0,0,0,3181,3182,5,377,0,0,3182,3183,5,329,0,0,3183,3184,3,438,219,
        0,3184,3185,3,438,219,0,3185,3259,1,0,0,0,3186,3187,5,377,0,0,3187,
        3188,5,81,0,0,3188,3189,3,438,219,0,3189,3190,3,438,219,0,3190,3259,
        1,0,0,0,3191,3192,5,14,0,0,3192,3259,3,332,166,0,3193,3194,5,153,
        0,0,3194,3197,5,230,0,0,3195,3196,5,225,0,0,3196,3198,5,175,0,0,
        3197,3195,1,0,0,0,3197,3198,1,0,0,0,3198,3199,1,0,0,0,3199,3259,
        3,438,219,0,3200,3201,5,161,0,0,3201,3202,5,185,0,0,3202,3205,5,
        538,0,0,3203,3204,5,506,0,0,3204,3206,3,308,154,0,3205,3203,1,0,
        0,0,3205,3206,1,0,0,0,3206,3259,1,0,0,0,3207,3208,5,299,0,0,3208,
        3223,5,148,0,0,3209,3210,5,147,0,0,3210,3214,5,61,0,0,3211,3212,
        5,213,0,0,3212,3215,3,298,149,0,3213,3215,5,365,0,0,3214,3211,1,
        0,0,0,3214,3213,1,0,0,0,3215,3221,1,0,0,0,3216,3219,5,57,0,0,3217,
        3220,5,543,0,0,3218,3220,5,34,0,0,3219,3217,1,0,0,0,3219,3218,1,
        0,0,0,3220,3222,1,0,0,0,3221,3216,1,0,0,0,3221,3222,1,0,0,0,3222,
        3224,1,0,0,0,3223,3209,1,0,0,0,3223,3224,1,0,0,0,3224,3259,1,0,0,
        0,3225,3226,5,299,0,0,3226,3227,5,83,0,0,3227,3259,5,538,0,0,3228,
        3229,5,299,0,0,3229,3230,5,81,0,0,3230,3231,3,438,219,0,3231,3232,
        5,83,0,0,3232,3233,5,538,0,0,3233,3259,1,0,0,0,3234,3235,5,299,0,
        0,3235,3236,5,166,0,0,3236,3237,5,464,0,0,3237,3239,3,438,219,0,
        3238,3240,3,308,154,0,3239,3238,1,0,0,0,3239,3240,1,0,0,0,3240,3259,
        1,0,0,0,3241,3243,5,14,0,0,3242,3244,5,454,0,0,3243,3242,1,0,0,0,
        3243,3244,1,0,0,0,3244,3245,1,0,0,0,3245,3246,5,330,0,0,3246,3247,
        5,198,0,0,3247,3248,3,346,173,0,3248,3249,5,464,0,0,3249,3250,3,
        346,173,0,3250,3251,5,240,0,0,3251,3253,5,543,0,0,3252,3254,3,438,
        219,0,3253,3252,1,0,0,0,3253,3254,1,0,0,0,3254,3256,1,0,0,0,3255,
        3257,3,308,154,0,3256,3255,1,0,0,0,3256,3257,1,0,0,0,3257,3259,1,
        0,0,0,3258,3017,1,0,0,0,3258,3029,1,0,0,0,3258,3047,1,0,0,0,3258,
        3056,1,0,0,0,3258,3068,1,0,0,0,3258,3077,1,0,0,0,3258,3111,1,0,0,
        0,3258,3129,1,0,0,0,3258,3150,1,0,0,0,3258,3164,1,0,0,0,3258,3174,
        1,0,0,0,3258,3176,1,0,0,0,3258,3181,1,0,0,0,3258,3186,1,0,0,0,3258,
        3191,1,0,0,0,3258,3193,1,0,0,0,3258,3200,1,0,0,0,3258,3207,1,0,0,
        0,3258,3225,1,0,0,0,3258,3228,1,0,0,0,3258,3234,1,0,0,0,3258,3241,
        1,0,0,0,3259,99,1,0,0,0,3260,3264,5,189,0,0,3261,3262,5,17,0,0,3262,
        3264,3,438,219,0,3263,3260,1,0,0,0,3263,3261,1,0,0,0,3264,101,1,
        0,0,0,3265,3266,7,18,0,0,3266,3267,3,438,219,0,3267,103,1,0,0,0,
        3268,3269,5,198,0,0,3269,3270,3,438,219,0,3270,105,1,0,0,0,3271,
        3272,5,153,0,0,3272,3275,7,10,0,0,3273,3274,5,225,0,0,3274,3276,
        5,175,0,0,3275,3273,1,0,0,0,3275,3276,1,0,0,0,3276,3277,1,0,0,0,
        3277,3279,3,320,160,0,3278,3280,5,195,0,0,3279,3278,1,0,0,0,3279,
        3280,1,0,0,0,3280,3375,1,0,0,0,3281,3282,5,153,0,0,3282,3285,5,68,
        0,0,3283,3284,5,225,0,0,3284,3286,5,175,0,0,3285,3283,1,0,0,0,3285,
        3286,1,0,0,0,3286,3287,1,0,0,0,3287,3375,3,438,219,0,3288,3290,5,
        153,0,0,3289,3291,7,7,0,0,3290,3289,1,0,0,0,3290,3291,1,0,0,0,3291,
        3292,1,0,0,0,3292,3295,5,202,0,0,3293,3294,5,225,0,0,3294,3296,5,
        175,0,0,3295,3293,1,0,0,0,3295,3296,1,0,0,0,3296,3297,1,0,0,0,3297,
        3298,3,388,194,0,3298,3300,5,2,0,0,3299,3301,3,126,63,0,3300,3299,
        1,0,0,0,3300,3301,1,0,0,0,3301,3302,1,0,0,0,3302,3303,5,3,0,0,3303,
        3375,1,0,0,0,3304,3305,5,153,0,0,3305,3308,5,447,0,0,3306,3307,5,
        225,0,0,3307,3309,5,175,0,0,3308,3306,1,0,0,0,3308,3309,1,0,0,0,
        3309,3310,1,0,0,0,3310,3312,3,320,160,0,3311,3313,5,195,0,0,3312,
        3311,1,0,0,0,3312,3313,1,0,0,0,3313,3375,1,0,0,0,3314,3315,5,153,
        0,0,3315,3318,5,498,0,0,3316,3317,5,225,0,0,3317,3319,5,175,0,0,
        3318,3316,1,0,0,0,3318,3319,1,0,0,0,3319,3320,1,0,0,0,3320,3375,
        3,320,160,0,3321,3322,5,153,0,0,3322,3323,5,385,0,0,3323,3375,3,
        438,219,0,3324,3325,5,153,0,0,3325,3328,5,230,0,0,3326,3327,5,225,
        0,0,3327,3329,5,175,0,0,3328,3326,1,0,0,0,3328,3329,1,0,0,0,3329,
        3330,1,0,0,0,3330,3331,3,438,219,0,3331,3332,5,317,0,0,3332,3333,
        3,320,160,0,3333,3375,1,0,0,0,3334,3335,5,153,0,0,3335,3338,5,386,
        0,0,3336,3337,5,225,0,0,3337,3339,5,175,0,0,3338,3336,1,0,0,0,3338,
        3339,1,0,0,0,3339,3340,1,0,0,0,3340,3375,3,176,88,0,3341,3342,5,
        153,0,0,3342,3343,5,401,0,0,3343,3346,5,350,0,0,3344,3345,5,225,
        0,0,3345,3347,5,175,0,0,3346,3344,1,0,0,0,3346,3347,1,0,0,0,3347,
        3348,1,0,0,0,3348,3349,3,438,219,0,3349,3350,5,317,0,0,3350,3357,
        3,320,160,0,3351,3355,5,193,0,0,3352,3356,3,184,92,0,3353,3354,5,
        396,0,0,3354,3356,3,438,219,0,3355,3352,1,0,0,0,3355,3353,1,0,0,
        0,3356,3358,1,0,0,0,3357,3351,1,0,0,0,3357,3358,1,0,0,0,3358,3375,
        1,0,0,0,3359,3360,5,153,0,0,3360,3361,5,436,0,0,3361,3364,5,350,
        0,0,3362,3363,5,225,0,0,3363,3365,5,175,0,0,3364,3362,1,0,0,0,3364,
        3365,1,0,0,0,3365,3366,1,0,0,0,3366,3375,3,438,219,0,3367,3368,5,
        153,0,0,3368,3371,5,429,0,0,3369,3370,5,225,0,0,3370,3372,5,175,
        0,0,3371,3369,1,0,0,0,3371,3372,1,0,0,0,3372,3373,1,0,0,0,3373,3375,
        3,438,219,0,3374,3271,1,0,0,0,3374,3281,1,0,0,0,3374,3288,1,0,0,
        0,3374,3304,1,0,0,0,3374,3314,1,0,0,0,3374,3321,1,0,0,0,3374,3324,
        1,0,0,0,3374,3334,1,0,0,0,3374,3341,1,0,0,0,3374,3359,1,0,0,0,3374,
        3367,1,0,0,0,3375,107,1,0,0,0,3376,3377,5,23,0,0,3377,3378,5,447,
        0,0,3378,3380,3,320,160,0,3379,3381,3,156,78,0,3380,3379,1,0,0,0,
        3380,3381,1,0,0,0,3381,3383,1,0,0,0,3382,3384,3,298,149,0,3383,3382,
        1,0,0,0,3383,3384,1,0,0,0,3384,3389,1,0,0,0,3385,3386,5,506,0,0,
        3386,3388,3,110,55,0,3387,3385,1,0,0,0,3388,3391,1,0,0,0,3389,3387,
        1,0,0,0,3389,3390,1,0,0,0,3390,3393,1,0,0,0,3391,3389,1,0,0,0,3392,
        3394,3,308,154,0,3393,3392,1,0,0,0,3393,3394,1,0,0,0,3394,3531,1,
        0,0,0,3395,3396,5,23,0,0,3396,3397,5,113,0,0,3397,3402,3,320,160,
        0,3398,3399,5,506,0,0,3399,3401,3,110,55,0,3400,3398,1,0,0,0,3401,
        3404,1,0,0,0,3402,3400,1,0,0,0,3402,3403,1,0,0,0,3403,3406,1,0,0,
        0,3404,3402,1,0,0,0,3405,3407,3,308,154,0,3406,3405,1,0,0,0,3406,
        3407,1,0,0,0,3407,3531,1,0,0,0,3408,3409,5,22,0,0,3409,3410,5,447,
        0,0,3410,3411,3,320,160,0,3411,3412,5,416,0,0,3412,3413,5,433,0,
        0,3413,3414,5,2,0,0,3414,3415,3,310,155,0,3415,3417,5,3,0,0,3416,
        3418,3,156,78,0,3417,3416,1,0,0,0,3417,3418,1,0,0,0,3418,3531,1,
        0,0,0,3419,3420,5,22,0,0,3420,3421,5,447,0,0,3421,3424,3,320,160,
        0,3422,3423,5,230,0,0,3423,3425,3,438,219,0,3424,3422,1,0,0,0,3424,
        3425,1,0,0,0,3425,3426,1,0,0,0,3426,3427,5,299,0,0,3427,3428,5,81,
        0,0,3428,3429,3,438,219,0,3429,3430,5,416,0,0,3430,3431,5,433,0,
        0,3431,3432,5,2,0,0,3432,3433,3,310,155,0,3433,3435,5,3,0,0,3434,
        3436,3,156,78,0,3435,3434,1,0,0,0,3435,3436,1,0,0,0,3436,3531,1,
        0,0,0,3437,3438,5,153,0,0,3438,3439,5,433,0,0,3439,3441,3,320,160,
        0,3440,3442,3,298,149,0,3441,3440,1,0,0,0,3441,3442,1,0,0,0,3442,
        3444,1,0,0,0,3443,3445,3,156,78,0,3444,3443,1,0,0,0,3444,3445,1,
        0,0,0,3445,3531,1,0,0,0,3446,3447,5,153,0,0,3447,3448,5,63,0,0,3448,
        3449,5,433,0,0,3449,3531,3,320,160,0,3450,3451,5,153,0,0,3451,3452,
        5,176,0,0,3452,3531,5,433,0,0,3453,3454,5,153,0,0,3454,3455,5,23,
        0,0,3455,3456,5,250,0,0,3456,3531,5,543,0,0,3457,3458,5,257,0,0,
        3458,3459,5,23,0,0,3459,3531,5,543,0,0,3460,3461,5,420,0,0,3461,
        3462,5,447,0,0,3462,3463,5,433,0,0,3463,3465,3,320,160,0,3464,3466,
        3,156,78,0,3465,3464,1,0,0,0,3465,3466,1,0,0,0,3466,3468,1,0,0,0,
        3467,3469,3,298,149,0,3468,3467,1,0,0,0,3468,3469,1,0,0,0,3469,3531,
        1,0,0,0,3470,3471,5,420,0,0,3471,3472,5,447,0,0,3472,3473,5,433,
        0,0,3473,3531,5,543,0,0,3474,3475,5,420,0,0,3475,3476,5,230,0,0,
        3476,3477,5,433,0,0,3477,3478,3,320,160,0,3478,3479,3,438,219,0,
        3479,3531,1,0,0,0,3480,3481,5,420,0,0,3481,3483,5,81,0,0,3482,3484,
        5,63,0,0,3483,3482,1,0,0,0,3483,3484,1,0,0,0,3484,3485,1,0,0,0,3485,
        3486,5,433,0,0,3486,3488,3,320,160,0,3487,3489,3,298,149,0,3488,
        3487,1,0,0,0,3488,3489,1,0,0,0,3489,3491,1,0,0,0,3490,3492,3,156,
        78,0,3491,3490,1,0,0,0,3491,3492,1,0,0,0,3492,3531,1,0,0,0,3493,
        3494,5,420,0,0,3494,3495,5,81,0,0,3495,3496,5,217,0,0,3496,3497,
        3,320,160,0,3497,3498,3,298,149,0,3498,3531,1,0,0,0,3499,3501,5,
        420,0,0,3500,3502,5,34,0,0,3501,3500,1,0,0,0,3501,3502,1,0,0,0,3502,
        3503,1,0,0,0,3503,3505,5,23,0,0,3504,3506,3,320,160,0,3505,3504,
        1,0,0,0,3505,3506,1,0,0,0,3506,3508,1,0,0,0,3507,3509,3,80,40,0,
        3508,3507,1,0,0,0,3508,3509,1,0,0,0,3509,3531,1,0,0,0,3510,3511,
        5,420,0,0,3511,3512,5,23,0,0,3512,3514,5,543,0,0,3513,3515,3,80,
        40,0,3514,3513,1,0,0,0,3514,3515,1,0,0,0,3515,3531,1,0,0,0,3516,
        3517,5,420,0,0,3517,3518,5,34,0,0,3518,3520,5,251,0,0,3519,3521,
        3,320,160,0,3520,3519,1,0,0,0,3520,3521,1,0,0,0,3521,3523,1,0,0,
        0,3522,3524,3,80,40,0,3523,3522,1,0,0,0,3523,3524,1,0,0,0,3524,3531,
        1,0,0,0,3525,3526,5,420,0,0,3526,3527,5,23,0,0,3527,3528,5,452,0,
        0,3528,3529,5,434,0,0,3529,3531,5,543,0,0,3530,3376,1,0,0,0,3530,
        3395,1,0,0,0,3530,3408,1,0,0,0,3530,3419,1,0,0,0,3530,3437,1,0,0,
        0,3530,3446,1,0,0,0,3530,3450,1,0,0,0,3530,3453,1,0,0,0,3530,3457,
        1,0,0,0,3530,3460,1,0,0,0,3530,3470,1,0,0,0,3530,3474,1,0,0,0,3530,
        3480,1,0,0,0,3530,3493,1,0,0,0,3530,3499,1,0,0,0,3530,3510,1,0,0,
        0,3530,3516,1,0,0,0,3530,3525,1,0,0,0,3531,109,1,0,0,0,3532,3551,
        5,445,0,0,3533,3551,5,229,0,0,3534,3551,5,201,0,0,3535,3551,5,427,
        0,0,3536,3551,5,217,0,0,3537,3542,5,404,0,0,3538,3539,5,402,0,0,
        3539,3543,5,543,0,0,3540,3541,5,338,0,0,3541,3543,5,543,0,0,3542,
        3538,1,0,0,0,3542,3540,1,0,0,0,3543,3551,1,0,0,0,3544,3545,5,57,
        0,0,3545,3551,5,543,0,0,3546,3547,5,339,0,0,3547,3551,5,543,0,0,
        3548,3549,5,103,0,0,3549,3551,5,538,0,0,3550,3532,1,0,0,0,3550,3533,
        1,0,0,0,3550,3534,1,0,0,0,3550,3535,1,0,0,0,3550,3536,1,0,0,0,3550,
        3537,1,0,0,0,3550,3544,1,0,0,0,3550,3546,1,0,0,0,3550,3548,1,0,0,
        0,3551,111,1,0,0,0,3552,3553,5,101,0,0,3553,3557,7,10,0,0,3554,3555,
        5,225,0,0,3555,3556,5,311,0,0,3556,3558,5,175,0,0,3557,3554,1,0,
        0,0,3557,3558,1,0,0,0,3558,3559,1,0,0,0,3559,3561,3,320,160,0,3560,
        3562,3,308,154,0,3561,3560,1,0,0,0,3561,3562,1,0,0,0,3562,3827,1,
        0,0,0,3563,3564,5,101,0,0,3564,3568,5,68,0,0,3565,3566,5,225,0,0,
        3566,3567,5,311,0,0,3567,3569,5,175,0,0,3568,3565,1,0,0,0,3568,3569,
        1,0,0,0,3569,3570,1,0,0,0,3570,3574,3,438,219,0,3571,3572,5,506,
        0,0,3572,3573,5,386,0,0,3573,3575,3,438,219,0,3574,3571,1,0,0,0,
        3574,3575,1,0,0,0,3575,3578,1,0,0,0,3576,3577,5,83,0,0,3577,3579,
        5,538,0,0,3578,3576,1,0,0,0,3578,3579,1,0,0,0,3579,3581,1,0,0,0,
        3580,3582,3,308,154,0,3581,3580,1,0,0,0,3581,3582,1,0,0,0,3582,3827,
        1,0,0,0,3583,3585,5,101,0,0,3584,3586,7,7,0,0,3585,3584,1,0,0,0,
        3585,3586,1,0,0,0,3586,3588,1,0,0,0,3587,3589,7,19,0,0,3588,3587,
        1,0,0,0,3588,3589,1,0,0,0,3589,3590,1,0,0,0,3590,3594,5,202,0,0,
        3591,3592,5,225,0,0,3592,3593,5,311,0,0,3593,3595,5,175,0,0,3594,
        3591,1,0,0,0,3594,3595,1,0,0,0,3595,3596,1,0,0,0,3596,3597,3,388,
        194,0,3597,3599,5,2,0,0,3598,3600,3,126,63,0,3599,3598,1,0,0,0,3599,
        3600,1,0,0,0,3600,3601,1,0,0,0,3601,3602,5,3,0,0,3602,3603,5,391,
        0,0,3603,3606,3,418,209,0,3604,3605,5,238,0,0,3605,3607,3,418,209,
        0,3606,3604,1,0,0,0,3606,3607,1,0,0,0,3607,3609,1,0,0,0,3608,3610,
        3,308,154,0,3609,3608,1,0,0,0,3609,3610,1,0,0,0,3610,3827,1,0,0,
        0,3611,3613,5,101,0,0,3612,3614,7,7,0,0,3613,3612,1,0,0,0,3613,3614,
        1,0,0,0,3614,3615,1,0,0,0,3615,3616,5,20,0,0,3616,3620,5,202,0,0,
        3617,3618,5,225,0,0,3618,3619,5,311,0,0,3619,3621,5,175,0,0,3620,
        3617,1,0,0,0,3620,3621,1,0,0,0,3621,3622,1,0,0,0,3622,3623,3,388,
        194,0,3623,3625,5,2,0,0,3624,3626,3,126,63,0,3625,3624,1,0,0,0,3625,
        3626,1,0,0,0,3626,3627,1,0,0,0,3627,3628,5,3,0,0,3628,3629,5,506,
        0,0,3629,3630,5,327,0,0,3630,3632,5,2,0,0,3631,3633,3,300,150,0,
        3632,3631,1,0,0,0,3632,3633,1,0,0,0,3633,3634,1,0,0,0,3634,3635,
        5,3,0,0,3635,3636,5,30,0,0,3636,3637,3,364,182,0,3637,3827,1,0,0,
        0,3638,3639,5,101,0,0,3639,3643,5,486,0,0,3640,3641,5,225,0,0,3641,
        3642,5,311,0,0,3642,3644,5,175,0,0,3643,3640,1,0,0,0,3643,3644,1,
        0,0,0,3644,3645,1,0,0,0,3645,3650,3,186,93,0,3646,3651,5,443,0,0,
        3647,3648,5,135,0,0,3648,3649,5,396,0,0,3649,3651,5,538,0,0,3650,
        3646,1,0,0,0,3650,3647,1,0,0,0,3650,3651,1,0,0,0,3651,3652,1,0,0,
        0,3652,3655,3,124,62,0,3653,3654,5,83,0,0,3654,3656,5,538,0,0,3655,
        3653,1,0,0,0,3655,3656,1,0,0,0,3656,3827,1,0,0,0,3657,3660,5,101,
        0,0,3658,3659,5,367,0,0,3659,3661,5,318,0,0,3660,3658,1,0,0,0,3660,
        3661,1,0,0,0,3661,3662,1,0,0,0,3662,3663,5,385,0,0,3663,3664,3,438,
        219,0,3664,3665,5,506,0,0,3665,3666,3,122,61,0,3666,3827,1,0,0,0,
        3667,3668,5,101,0,0,3668,3672,5,396,0,0,3669,3670,5,225,0,0,3670,
        3671,5,311,0,0,3671,3673,5,175,0,0,3672,3669,1,0,0,0,3672,3673,1,
        0,0,0,3673,3674,1,0,0,0,3674,3677,3,438,219,0,3675,3676,5,83,0,0,
        3676,3678,5,538,0,0,3677,3675,1,0,0,0,3677,3678,1,0,0,0,3678,3827,
        1,0,0,0,3679,3680,5,101,0,0,3680,3681,5,187,0,0,3681,3684,5,538,
        0,0,3682,3683,7,6,0,0,3683,3685,3,438,219,0,3684,3682,1,0,0,0,3684,
        3685,1,0,0,0,3685,3686,1,0,0,0,3686,3827,3,308,154,0,3687,3688,5,
        101,0,0,3688,3692,5,230,0,0,3689,3690,5,225,0,0,3690,3691,5,311,
        0,0,3691,3693,5,175,0,0,3692,3689,1,0,0,0,3692,3693,1,0,0,0,3693,
        3694,1,0,0,0,3694,3695,3,438,219,0,3695,3696,5,317,0,0,3696,3697,
        3,320,160,0,3697,3700,3,298,149,0,3698,3699,5,487,0,0,3699,3701,
        7,20,0,0,3700,3698,1,0,0,0,3700,3701,1,0,0,0,3701,3703,1,0,0,0,3702,
        3704,3,308,154,0,3703,3702,1,0,0,0,3703,3704,1,0,0,0,3704,3707,1,
        0,0,0,3705,3706,5,83,0,0,3706,3708,5,538,0,0,3707,3705,1,0,0,0,3707,
        3708,1,0,0,0,3708,3827,1,0,0,0,3709,3711,5,101,0,0,3710,3712,5,180,
        0,0,3711,3710,1,0,0,0,3711,3712,1,0,0,0,3712,3713,1,0,0,0,3713,3717,
        5,386,0,0,3714,3715,5,225,0,0,3715,3716,5,311,0,0,3716,3718,5,175,
        0,0,3717,3714,1,0,0,0,3717,3718,1,0,0,0,3718,3719,1,0,0,0,3719,3721,
        3,176,88,0,3720,3722,3,308,154,0,3721,3720,1,0,0,0,3721,3722,1,0,
        0,0,3722,3827,1,0,0,0,3723,3724,5,101,0,0,3724,3725,5,436,0,0,3725,
        3729,5,494,0,0,3726,3727,5,225,0,0,3727,3728,5,311,0,0,3728,3730,
        5,175,0,0,3729,3726,1,0,0,0,3729,3730,1,0,0,0,3730,3731,1,0,0,0,
        3731,3733,3,176,88,0,3732,3734,3,308,154,0,3733,3732,1,0,0,0,3733,
        3734,1,0,0,0,3734,3827,1,0,0,0,3735,3736,5,101,0,0,3736,3737,5,508,
        0,0,3737,3741,5,210,0,0,3738,3739,5,225,0,0,3739,3740,5,311,0,0,
        3740,3742,5,175,0,0,3741,3738,1,0,0,0,3741,3742,1,0,0,0,3742,3743,
        1,0,0,0,3743,3745,3,176,88,0,3744,3746,3,308,154,0,3745,3744,1,0,
        0,0,3745,3746,1,0,0,0,3746,3827,1,0,0,0,3747,3748,5,101,0,0,3748,
        3749,5,508,0,0,3749,3753,5,350,0,0,3750,3751,5,225,0,0,3751,3752,
        5,311,0,0,3752,3754,5,175,0,0,3753,3750,1,0,0,0,3753,3754,1,0,0,
        0,3754,3755,1,0,0,0,3755,3761,3,176,88,0,3756,3757,5,90,0,0,3757,
        3758,5,2,0,0,3758,3759,3,118,59,0,3759,3760,5,3,0,0,3760,3762,1,
        0,0,0,3761,3756,1,0,0,0,3761,3762,1,0,0,0,3762,3768,1,0,0,0,3763,
        3764,5,13,0,0,3764,3765,5,2,0,0,3765,3766,3,114,57,0,3766,3767,5,
        3,0,0,3767,3769,1,0,0,0,3768,3763,1,0,0,0,3768,3769,1,0,0,0,3769,
        3771,1,0,0,0,3770,3772,3,308,154,0,3771,3770,1,0,0,0,3771,3772,1,
        0,0,0,3772,3827,1,0,0,0,3773,3774,5,101,0,0,3774,3778,5,162,0,0,
        3775,3776,5,225,0,0,3776,3777,5,311,0,0,3777,3779,5,175,0,0,3778,
        3775,1,0,0,0,3778,3779,1,0,0,0,3779,3780,1,0,0,0,3780,3781,3,320,
        160,0,3781,3782,5,30,0,0,3782,3783,5,538,0,0,3783,3827,1,0,0,0,3784,
        3785,5,101,0,0,3785,3789,5,428,0,0,3786,3787,5,225,0,0,3787,3788,
        5,311,0,0,3788,3790,5,175,0,0,3789,3786,1,0,0,0,3789,3790,1,0,0,
        0,3790,3791,1,0,0,0,3791,3793,3,438,219,0,3792,3794,3,308,154,0,
        3793,3792,1,0,0,0,3793,3794,1,0,0,0,3794,3827,1,0,0,0,3795,3796,
        5,101,0,0,3796,3797,5,436,0,0,3797,3801,5,350,0,0,3798,3799,5,225,
        0,0,3799,3800,5,311,0,0,3800,3802,5,175,0,0,3801,3798,1,0,0,0,3801,
        3802,1,0,0,0,3802,3803,1,0,0,0,3803,3805,3,438,219,0,3804,3806,3,
        308,154,0,3805,3804,1,0,0,0,3805,3806,1,0,0,0,3806,3827,1,0,0,0,
        3807,3808,5,58,0,0,3808,3809,5,230,0,0,3809,3810,3,438,219,0,3810,
        3811,5,317,0,0,3811,3813,3,320,160,0,3812,3814,3,156,78,0,3813,3812,
        1,0,0,0,3813,3814,1,0,0,0,3814,3827,1,0,0,0,3815,3816,5,101,0,0,
        3816,3820,5,429,0,0,3817,3818,5,225,0,0,3818,3819,5,311,0,0,3819,
        3821,5,175,0,0,3820,3817,1,0,0,0,3820,3821,1,0,0,0,3821,3822,1,0,
        0,0,3822,3824,3,438,219,0,3823,3825,3,308,154,0,3824,3823,1,0,0,
        0,3824,3825,1,0,0,0,3825,3827,1,0,0,0,3826,3552,1,0,0,0,3826,3563,
        1,0,0,0,3826,3583,1,0,0,0,3826,3611,1,0,0,0,3826,3638,1,0,0,0,3826,
        3657,1,0,0,0,3826,3667,1,0,0,0,3826,3679,1,0,0,0,3826,3687,1,0,0,
        0,3826,3709,1,0,0,0,3826,3723,1,0,0,0,3826,3735,1,0,0,0,3826,3747,
        1,0,0,0,3826,3773,1,0,0,0,3826,3784,1,0,0,0,3826,3795,1,0,0,0,3826,
        3807,1,0,0,0,3826,3815,1,0,0,0,3827,113,1,0,0,0,3828,3833,3,116,
        58,0,3829,3830,5,4,0,0,3830,3832,3,116,58,0,3831,3829,1,0,0,0,3832,
        3835,1,0,0,0,3833,3831,1,0,0,0,3833,3834,1,0,0,0,3834,115,1,0,0,
        0,3835,3833,1,0,0,0,3836,3837,5,418,0,0,3837,3843,5,538,0,0,3838,
        3840,3,438,219,0,3839,3841,5,538,0,0,3840,3839,1,0,0,0,3840,3841,
        1,0,0,0,3841,3843,1,0,0,0,3842,3836,1,0,0,0,3842,3838,1,0,0,0,3843,
        117,1,0,0,0,3844,3849,3,120,60,0,3845,3846,5,4,0,0,3846,3848,3,120,
        60,0,3847,3845,1,0,0,0,3848,3851,1,0,0,0,3849,3847,1,0,0,0,3849,
        3850,1,0,0,0,3850,119,1,0,0,0,3851,3849,1,0,0,0,3852,3853,3,438,
        219,0,3853,3856,3,406,203,0,3854,3857,3,444,222,0,3855,3857,5,538,
        0,0,3856,3854,1,0,0,0,3856,3855,1,0,0,0,3857,121,1,0,0,0,3858,3860,
        7,21,0,0,3859,3861,3,438,219,0,3860,3859,1,0,0,0,3860,3861,1,0,0,
        0,3861,3862,1,0,0,0,3862,3863,5,317,0,0,3863,3864,5,276,0,0,3864,
        3866,5,538,0,0,3865,3867,3,308,154,0,3866,3865,1,0,0,0,3866,3867,
        1,0,0,0,3867,123,1,0,0,0,3868,3871,5,333,0,0,3869,3872,5,135,0,0,
        3870,3872,5,543,0,0,3871,3869,1,0,0,0,3871,3870,1,0,0,0,3872,3874,
        1,0,0,0,3873,3868,1,0,0,0,3873,3874,1,0,0,0,3874,3883,1,0,0,0,3875,
        3881,5,332,0,0,3876,3882,5,135,0,0,3877,3882,5,306,0,0,3878,3879,
        5,240,0,0,3879,3880,5,543,0,0,3880,3882,7,22,0,0,3881,3876,1,0,0,
        0,3881,3877,1,0,0,0,3881,3878,1,0,0,0,3882,3884,1,0,0,0,3883,3875,
        1,0,0,0,3883,3884,1,0,0,0,3884,3892,1,0,0,0,3885,3886,5,335,0,0,
        3886,3890,5,240,0,0,3887,3891,5,135,0,0,3888,3889,5,543,0,0,3889,
        3891,5,128,0,0,3890,3887,1,0,0,0,3890,3888,1,0,0,0,3891,3893,1,0,
        0,0,3892,3885,1,0,0,0,3892,3893,1,0,0,0,3893,3896,1,0,0,0,3894,3895,
        5,182,0,0,3895,3897,5,543,0,0,3896,3894,1,0,0,0,3896,3897,1,0,0,
        0,3897,3904,1,0,0,0,3898,3902,5,334,0,0,3899,3903,5,475,0,0,3900,
        3901,5,543,0,0,3901,3903,7,22,0,0,3902,3899,1,0,0,0,3902,3900,1,
        0,0,0,3903,3905,1,0,0,0,3904,3898,1,0,0,0,3904,3905,1,0,0,0,3905,
        3907,1,0,0,0,3906,3908,7,23,0,0,3907,3906,1,0,0,0,3907,3908,1,0,
        0,0,3908,125,1,0,0,0,3909,3914,3,128,64,0,3910,3911,5,4,0,0,3911,
        3913,3,128,64,0,3912,3910,1,0,0,0,3913,3916,1,0,0,0,3914,3912,1,
        0,0,0,3914,3915,1,0,0,0,3915,127,1,0,0,0,3916,3914,1,0,0,0,3917,
        3920,5,6,0,0,3918,3920,3,418,209,0,3919,3917,1,0,0,0,3919,3918,1,
        0,0,0,3920,129,1,0,0,0,3921,3924,5,416,0,0,3922,3925,3,132,66,0,
        3923,3925,3,134,67,0,3924,3922,1,0,0,0,3924,3923,1,0,0,0,3925,3933,
        1,0,0,0,3926,3929,5,4,0,0,3927,3930,3,132,66,0,3928,3930,3,134,67,
        0,3929,3927,1,0,0,0,3929,3928,1,0,0,0,3930,3932,1,0,0,0,3931,3926,
        1,0,0,0,3932,3935,1,0,0,0,3933,3931,1,0,0,0,3933,3934,1,0,0,0,3934,
        3968,1,0,0,0,3935,3933,1,0,0,0,3936,3937,5,416,0,0,3937,3938,3,438,
        219,0,3938,3939,5,30,0,0,3939,3940,5,135,0,0,3940,3941,5,436,0,0,
        3941,3942,5,494,0,0,3942,3968,1,0,0,0,3943,3944,5,416,0,0,3944,3947,
        5,359,0,0,3945,3946,5,193,0,0,3946,3948,3,176,88,0,3947,3945,1,0,
        0,0,3947,3948,1,0,0,0,3948,3949,1,0,0,0,3949,3968,3,310,155,0,3950,
        3952,5,416,0,0,3951,3953,7,7,0,0,3952,3951,1,0,0,0,3952,3953,1,0,
        0,0,3953,3954,1,0,0,0,3954,3965,5,465,0,0,3955,3966,3,138,69,0,3956,
        3966,3,140,70,0,3957,3958,3,138,69,0,3958,3959,5,4,0,0,3959,3960,
        3,140,70,0,3960,3966,1,0,0,0,3961,3962,3,140,70,0,3962,3963,5,4,
        0,0,3963,3964,3,138,69,0,3964,3966,1,0,0,0,3965,3955,1,0,0,0,3965,
        3956,1,0,0,0,3965,3957,1,0,0,0,3965,3961,1,0,0,0,3966,3968,1,0,0,
        0,3967,3921,1,0,0,0,3967,3936,1,0,0,0,3967,3943,1,0,0,0,3967,3950,
        1,0,0,0,3968,131,1,0,0,0,3969,3970,7,7,0,0,3970,3971,3,438,219,0,
        3971,3974,5,512,0,0,3972,3975,3,364,182,0,3973,3975,5,135,0,0,3974,
        3972,1,0,0,0,3974,3973,1,0,0,0,3975,133,1,0,0,0,3976,3977,5,303,
        0,0,3977,3978,5,512,0,0,3978,4022,3,364,182,0,3979,3980,5,71,0,0,
        3980,3983,5,416,0,0,3981,3983,5,72,0,0,3982,3979,1,0,0,0,3982,3981,
        1,0,0,0,3983,3986,1,0,0,0,3984,3987,3,176,88,0,3985,3987,5,135,0,
        0,3986,3984,1,0,0,0,3986,3985,1,0,0,0,3987,4022,1,0,0,0,3988,3991,
        5,303,0,0,3989,3992,3,176,88,0,3990,3992,5,135,0,0,3991,3989,1,0,
        0,0,3991,3990,1,0,0,0,3992,3996,1,0,0,0,3993,3994,5,77,0,0,3994,
        3997,3,176,88,0,3995,3997,5,135,0,0,3996,3993,1,0,0,0,3996,3995,
        1,0,0,0,3996,3997,1,0,0,0,3997,4022,1,0,0,0,3998,4001,5,331,0,0,
        3999,4000,5,193,0,0,4000,4002,3,184,92,0,4001,3999,1,0,0,0,4001,
        4002,1,0,0,0,4002,4003,1,0,0,0,4003,4009,5,512,0,0,4004,4010,5,538,
        0,0,4005,4006,5,331,0,0,4006,4007,5,2,0,0,4007,4008,5,538,0,0,4008,
        4010,5,3,0,0,4009,4004,1,0,0,0,4009,4005,1,0,0,0,4010,4022,1,0,0,
        0,4011,4012,5,263,0,0,4012,4018,5,512,0,0,4013,4019,5,538,0,0,4014,
        4015,5,331,0,0,4015,4016,5,2,0,0,4016,4017,5,538,0,0,4017,4019,5,
        3,0,0,4018,4013,1,0,0,0,4018,4014,1,0,0,0,4019,4022,1,0,0,0,4020,
        4022,3,136,68,0,4021,3976,1,0,0,0,4021,3982,1,0,0,0,4021,3988,1,
        0,0,0,4021,3998,1,0,0,0,4021,4011,1,0,0,0,4021,4020,1,0,0,0,4022,
        135,1,0,0,0,4023,4026,5,537,0,0,4024,4025,7,7,0,0,4025,4027,5,5,
        0,0,4026,4024,1,0,0,0,4026,4027,1,0,0,0,4027,4029,1,0,0,0,4028,4023,
        1,0,0,0,4028,4029,1,0,0,0,4029,4030,1,0,0,0,4030,4031,3,438,219,
        0,4031,4034,5,512,0,0,4032,4035,3,364,182,0,4033,4035,5,135,0,0,
        4034,4032,1,0,0,0,4034,4033,1,0,0,0,4035,4042,1,0,0,0,4036,4037,
        5,536,0,0,4037,4038,3,438,219,0,4038,4039,5,512,0,0,4039,4040,3,
        364,182,0,4040,4042,1,0,0,0,4041,4028,1,0,0,0,4041,4036,1,0,0,0,
        4042,137,1,0,0,0,4043,4044,5,367,0,0,4044,4045,7,24,0,0,4045,139,
        1,0,0,0,4046,4047,5,249,0,0,4047,4055,5,266,0,0,4048,4049,5,367,
        0,0,4049,4056,5,476,0,0,4050,4051,5,367,0,0,4051,4056,5,85,0,0,4052,
        4053,5,379,0,0,4053,4056,5,367,0,0,4054,4056,5,413,0,0,4055,4048,
        1,0,0,0,4055,4050,1,0,0,0,4055,4052,1,0,0,0,4055,4054,1,0,0,0,4056,
        141,1,0,0,0,4057,4059,5,481,0,0,4058,4060,7,7,0,0,4059,4058,1,0,
        0,0,4059,4060,1,0,0,0,4060,4061,1,0,0,0,4061,4064,5,491,0,0,4062,
        4065,5,21,0,0,4063,4065,3,438,219,0,4064,4062,1,0,0,0,4064,4063,
        1,0,0,0,4065,4071,1,0,0,0,4066,4067,5,481,0,0,4067,4068,5,135,0,
        0,4068,4069,5,436,0,0,4069,4071,5,494,0,0,4070,4057,1,0,0,0,4070,
        4066,1,0,0,0,4071,143,1,0,0,0,4072,4076,5,485,0,0,4073,4074,3,438,
        219,0,4074,4075,5,5,0,0,4075,4077,1,0,0,0,4076,4073,1,0,0,0,4076,
        4077,1,0,0,0,4077,4078,1,0,0,0,4078,4093,3,438,219,0,4079,4086,5,
        485,0,0,4080,4081,3,438,219,0,4081,4082,5,5,0,0,4082,4084,1,0,0,
        0,4083,4080,1,0,0,0,4083,4084,1,0,0,0,4084,4085,1,0,0,0,4085,4087,
        3,438,219,0,4086,4083,1,0,0,0,4086,4087,1,0,0,0,4087,4088,1,0,0,
        0,4088,4089,5,536,0,0,4089,4093,3,438,219,0,4090,4091,5,444,0,0,
        4091,4093,3,438,219,0,4092,4072,1,0,0,0,4092,4079,1,0,0,0,4092,4090,
        1,0,0,0,4093,145,1,0,0,0,4094,4095,5,471,0,0,4095,4096,5,447,0,0,
        4096,4098,3,320,160,0,4097,4099,3,402,201,0,4098,4097,1,0,0,0,4098,
        4099,1,0,0,0,4099,4101,1,0,0,0,4100,4102,5,195,0,0,4101,4100,1,0,
        0,0,4101,4102,1,0,0,0,4102,4127,1,0,0,0,4103,4104,5,99,0,0,4104,
        4105,5,241,0,0,4105,4107,3,320,160,0,4106,4108,3,298,149,0,4107,
        4106,1,0,0,0,4107,4108,1,0,0,0,4108,4109,1,0,0,0,4109,4121,5,198,
        0,0,4110,4122,3,148,74,0,4111,4112,5,2,0,0,4112,4113,5,410,0,0,4113,
        4114,3,240,120,0,4114,4115,5,198,0,0,4115,4117,3,148,74,0,4116,4118,
        3,242,121,0,4117,4116,1,0,0,0,4117,4118,1,0,0,0,4118,4119,1,0,0,
        0,4119,4120,5,3,0,0,4120,4122,1,0,0,0,4121,4110,1,0,0,0,4121,4111,
        1,0,0,0,4122,4124,1,0,0,0,4123,4125,3,308,154,0,4124,4123,1,0,0,
        0,4124,4125,1,0,0,0,4125,4127,1,0,0,0,4126,4094,1,0,0,0,4126,4103,
        1,0,0,0,4127,147,1,0,0,0,4128,4131,5,536,0,0,4129,4132,3,438,219,
        0,4130,4132,5,524,0,0,4131,4129,1,0,0,0,4131,4130,1,0,0,0,4132,4136,
        1,0,0,0,4133,4134,5,2,0,0,4134,4135,5,538,0,0,4135,4137,5,3,0,0,
        4136,4133,1,0,0,0,4136,4137,1,0,0,0,4137,149,1,0,0,0,4138,4140,5,
        257,0,0,4139,4141,5,92,0,0,4140,4139,1,0,0,0,4140,4141,1,0,0,0,4141,
        4142,1,0,0,0,4142,4147,5,543,0,0,4143,4144,5,257,0,0,4144,4145,5,
        362,0,0,4145,4147,7,25,0,0,4146,4138,1,0,0,0,4146,4143,1,0,0,0,4147,
        151,1,0,0,0,4148,4149,3,190,95,0,4149,4150,5,202,0,0,4150,4151,3,
        438,219,0,4151,4153,5,2,0,0,4152,4154,3,310,155,0,4153,4152,1,0,
        0,0,4153,4154,1,0,0,0,4154,4155,1,0,0,0,4155,4156,5,3,0,0,4156,4157,
        3,318,159,0,4157,4168,1,0,0,0,4158,4159,3,190,95,0,4159,4160,3,320,
        160,0,4160,4161,5,21,0,0,4161,4168,1,0,0,0,4162,4163,3,190,95,0,
        4163,4165,3,320,160,0,4164,4166,3,402,201,0,4165,4164,1,0,0,0,4165,
        4166,1,0,0,0,4166,4168,1,0,0,0,4167,4148,1,0,0,0,4167,4158,1,0,0,
        0,4167,4162,1,0,0,0,4168,153,1,0,0,0,4169,4170,5,353,0,0,4170,4171,
        5,255,0,0,4171,4182,3,298,149,0,4172,4173,5,479,0,0,4173,4182,3,
        298,149,0,4174,4175,5,194,0,0,4175,4176,5,255,0,0,4176,4177,3,298,
        149,0,4177,4178,5,374,0,0,4178,4179,3,320,160,0,4179,4180,3,298,
        149,0,4180,4182,1,0,0,0,4181,4169,1,0,0,0,4181,4172,1,0,0,0,4181,
        4174,1,0,0,0,4182,155,1,0,0,0,4183,4185,5,454,0,0,4184,4183,1,0,
        0,0,4184,4185,1,0,0,0,4185,4186,1,0,0,0,4186,4187,7,26,0,0,4187,
        4198,3,298,149,0,4188,4190,5,454,0,0,4189,4188,1,0,0,0,4189,4190,
        1,0,0,0,4190,4191,1,0,0,0,4191,4192,5,329,0,0,4192,4198,3,434,217,
        0,4193,4194,7,26,0,0,4194,4195,5,2,0,0,4195,4196,5,521,0,0,4196,
        4198,5,3,0,0,4197,4184,1,0,0,0,4197,4189,1,0,0,0,4197,4193,1,0,0,
        0,4198,157,1,0,0,0,4199,4201,5,34,0,0,4200,4199,1,0,0,0,4200,4201,
        1,0,0,0,4201,4202,1,0,0,0,4202,4203,5,329,0,0,4203,4205,5,61,0,0,
        4204,4206,7,27,0,0,4205,4204,1,0,0,0,4205,4206,1,0,0,0,4206,4207,
        1,0,0,0,4207,4208,3,160,80,0,4208,4210,5,2,0,0,4209,4211,3,334,167,
        0,4210,4209,1,0,0,0,4210,4211,1,0,0,0,4211,4212,1,0,0,0,4212,4213,
        5,3,0,0,4213,159,1,0,0,0,4214,4215,5,2,0,0,4215,4220,3,162,81,0,
        4216,4217,5,4,0,0,4217,4219,3,162,81,0,4218,4216,1,0,0,0,4219,4222,
        1,0,0,0,4220,4218,1,0,0,0,4220,4221,1,0,0,0,4221,4223,1,0,0,0,4222,
        4220,1,0,0,0,4223,4224,5,3,0,0,4224,161,1,0,0,0,4225,4228,3,438,
        219,0,4226,4228,3,386,193,0,4227,4225,1,0,0,0,4227,4226,1,0,0,0,
        4228,163,1,0,0,0,4229,4231,5,506,0,0,4230,4229,1,0,0,0,4230,4231,
        1,0,0,0,4231,4232,1,0,0,0,4232,4234,3,198,99,0,4233,4230,1,0,0,0,
        4233,4234,1,0,0,0,4234,4235,1,0,0,0,4235,4236,5,112,0,0,4236,4237,
        5,232,0,0,4237,4238,5,2,0,0,4238,4243,5,538,0,0,4239,4240,5,4,0,
        0,4240,4242,5,538,0,0,4241,4239,1,0,0,0,4242,4245,1,0,0,0,4243,4241,
        1,0,0,0,4243,4244,1,0,0,0,4244,4246,1,0,0,0,4245,4243,1,0,0,0,4246,
        4247,5,3,0,0,4247,4248,5,241,0,0,4248,4249,5,447,0,0,4249,4252,3,
        438,219,0,4250,4251,5,329,0,0,4251,4253,3,298,149,0,4252,4250,1,
        0,0,0,4252,4253,1,0,0,0,4253,4258,1,0,0,0,4254,4255,5,82,0,0,4255,
        4256,5,455,0,0,4256,4257,5,61,0,0,4257,4259,5,538,0,0,4258,4254,
        1,0,0,0,4258,4259,1,0,0,0,4259,4264,1,0,0,0,4260,4261,5,269,0,0,
        4261,4262,5,455,0,0,4262,4263,5,61,0,0,4263,4265,5,538,0,0,4264,
        4260,1,0,0,0,4264,4265,1,0,0,0,4265,4269,1,0,0,0,4266,4267,5,196,
        0,0,4267,4268,5,30,0,0,4268,4270,3,176,88,0,4269,4266,1,0,0,0,4269,
        4270,1,0,0,0,4270,4274,1,0,0,0,4271,4272,5,88,0,0,4272,4273,5,30,
        0,0,4273,4275,3,176,88,0,4274,4271,1,0,0,0,4274,4275,1,0,0,0,4275,
        4277,1,0,0,0,4276,4278,3,298,149,0,4277,4276,1,0,0,0,4277,4278,1,
        0,0,0,4278,4280,1,0,0,0,4279,4281,3,206,103,0,4280,4279,1,0,0,0,
        4280,4281,1,0,0,0,4281,4283,1,0,0,0,4282,4284,3,208,104,0,4283,4282,
        1,0,0,0,4283,4284,1,0,0,0,4284,4286,1,0,0,0,4285,4287,3,200,100,
        0,4286,4285,1,0,0,0,4286,4287,1,0,0,0,4287,4289,1,0,0,0,4288,4290,
        3,242,121,0,4289,4288,1,0,0,0,4289,4290,1,0,0,0,4290,4292,1,0,0,
        0,4291,4293,3,202,101,0,4292,4291,1,0,0,0,4292,4293,1,0,0,0,4293,
        4295,1,0,0,0,4294,4296,3,204,102,0,4295,4294,1,0,0,0,4295,4296,1,
        0,0,0,4296,4298,1,0,0,0,4297,4299,3,308,154,0,4298,4297,1,0,0,0,
        4298,4299,1,0,0,0,4299,4330,1,0,0,0,4300,4302,5,506,0,0,4301,4300,
        1,0,0,0,4301,4302,1,0,0,0,4302,4303,1,0,0,0,4303,4305,3,198,99,0,
        4304,4301,1,0,0,0,4304,4305,1,0,0,0,4305,4306,1,0,0,0,4306,4307,
        5,112,0,0,4307,4308,5,198,0,0,4308,4309,5,447,0,0,4309,4310,3,438,
        219,0,4310,4311,5,241,0,0,4311,4312,5,447,0,0,4312,4315,3,438,219,
        0,4313,4314,5,329,0,0,4314,4316,3,298,149,0,4315,4313,1,0,0,0,4315,
        4316,1,0,0,0,4316,4318,1,0,0,0,4317,4319,3,208,104,0,4318,4317,1,
        0,0,0,4318,4319,1,0,0,0,4319,4321,1,0,0,0,4320,4322,3,242,121,0,
        4321,4320,1,0,0,0,4321,4322,1,0,0,0,4322,4324,1,0,0,0,4323,4325,
        3,202,101,0,4324,4323,1,0,0,0,4324,4325,1,0,0,0,4325,4327,1,0,0,
        0,4326,4328,3,308,154,0,4327,4326,1,0,0,0,4327,4328,1,0,0,0,4328,
        4330,1,0,0,0,4329,4233,1,0,0,0,4329,4304,1,0,0,0,4330,165,1,0,0,
        0,4331,4332,5,58,0,0,4332,4333,7,28,0,0,4333,167,1,0,0,0,4334,4335,
        5,317,0,0,4335,4342,5,280,0,0,4336,4337,5,317,0,0,4337,4338,5,405,
        0,0,4338,4342,3,170,85,0,4339,4340,5,317,0,0,4340,4342,5,84,0,0,
        4341,4334,1,0,0,0,4341,4336,1,0,0,0,4341,4339,1,0,0,0,4342,169,1,
        0,0,0,4343,4344,5,171,0,0,4344,4345,5,543,0,0,4345,4348,3,438,219,
        0,4346,4347,5,432,0,0,4347,4349,5,538,0,0,4348,4346,1,0,0,0,4348,
        4349,1,0,0,0,4349,171,1,0,0,0,4350,4351,7,29,0,0,4351,173,1,0,0,
        0,4352,4355,3,438,219,0,4353,4355,3,386,193,0,4354,4352,1,0,0,0,
        4354,4353,1,0,0,0,4355,175,1,0,0,0,4356,4359,3,438,219,0,4357,4359,
        5,538,0,0,4358,4356,1,0,0,0,4358,4357,1,0,0,0,4359,177,1,0,0,0,4360,
        4364,3,438,219,0,4361,4364,5,538,0,0,4362,4364,5,521,0,0,4363,4360,
        1,0,0,0,4363,4361,1,0,0,0,4363,4362,1,0,0,0,4364,179,1,0,0,0,4365,
        4370,3,182,91,0,4366,4367,5,5,0,0,4367,4369,3,182,91,0,4368,4366,
        1,0,0,0,4369,4372,1,0,0,0,4370,4368,1,0,0,0,4370,4371,1,0,0,0,4371,
        181,1,0,0,0,4372,4370,1,0,0,0,4373,4376,3,176,88,0,4374,4376,5,521,
        0,0,4375,4373,1,0,0,0,4375,4374,1,0,0,0,4376,183,1,0,0,0,4377,4386,
        3,176,88,0,4378,4384,5,536,0,0,4379,4385,3,176,88,0,4380,4381,5,
        2,0,0,4381,4382,3,176,88,0,4382,4383,5,3,0,0,4383,4385,1,0,0,0,4384,
        4379,1,0,0,0,4384,4380,1,0,0,0,4385,4387,1,0,0,0,4386,4378,1,0,0,
        0,4386,4387,1,0,0,0,4387,185,1,0,0,0,4388,4395,3,184,92,0,4389,4390,
        5,224,0,0,4390,4392,5,61,0,0,4391,4393,5,331,0,0,4392,4391,1,0,0,
        0,4392,4393,1,0,0,0,4393,4394,1,0,0,0,4394,4396,5,538,0,0,4395,4389,
        1,0,0,0,4395,4396,1,0,0,0,4396,187,1,0,0,0,4397,4399,3,190,95,0,
        4398,4400,3,192,96,0,4399,4398,1,0,0,0,4399,4400,1,0,0,0,4400,4402,
        1,0,0,0,4401,4403,7,30,0,0,4402,4401,1,0,0,0,4402,4403,1,0,0,0,4403,
        4405,1,0,0,0,4404,4406,5,347,0,0,4405,4404,1,0,0,0,4405,4406,1,0,
        0,0,4406,189,1,0,0,0,4407,4408,7,31,0,0,4408,191,1,0,0,0,4409,4410,
        7,32,0,0,4410,193,1,0,0,0,4411,4412,5,344,0,0,4412,4413,5,382,0,
        0,4413,4414,3,196,98,0,4414,195,1,0,0,0,4415,4416,5,156,0,0,4416,
        4420,3,222,111,0,4417,4418,5,345,0,0,4418,4420,5,538,0,0,4419,4415,
        1,0,0,0,4419,4417,1,0,0,0,4420,197,1,0,0,0,4421,4422,7,15,0,0,4422,
        199,1,0,0,0,4423,4424,5,351,0,0,4424,4425,5,188,0,0,4425,4426,3,
        364,182,0,4426,201,1,0,0,0,4427,4428,5,137,0,0,4428,4429,5,317,0,
        0,4429,4430,3,364,182,0,4430,203,1,0,0,0,4431,4432,5,322,0,0,4432,
        4433,5,61,0,0,4433,4434,3,438,219,0,4434,205,1,0,0,0,4435,4436,5,
        82,0,0,4436,4437,5,198,0,0,4437,4438,5,336,0,0,4438,4439,5,30,0,
        0,4439,4440,3,298,149,0,4440,207,1,0,0,0,4441,4442,5,416,0,0,4442,
        4443,5,2,0,0,4443,4448,3,210,105,0,4444,4445,5,4,0,0,4445,4447,3,
        210,105,0,4446,4444,1,0,0,0,4447,4450,1,0,0,0,4448,4446,1,0,0,0,
        4448,4449,1,0,0,0,4449,4451,1,0,0,0,4450,4448,1,0,0,0,4451,4452,
        5,3,0,0,4452,209,1,0,0,0,4453,4454,3,438,219,0,4454,4455,5,512,0,
        0,4455,4456,3,364,182,0,4456,211,1,0,0,0,4457,4486,3,214,107,0,4458,
        4459,5,506,0,0,4459,4460,5,403,0,0,4460,4461,5,2,0,0,4461,4462,3,
        310,155,0,4462,4463,5,3,0,0,4463,4486,1,0,0,0,4464,4465,5,506,0,
        0,4465,4466,5,215,0,0,4466,4467,5,2,0,0,4467,4468,3,310,155,0,4468,
        4469,5,3,0,0,4469,4486,1,0,0,0,4470,4471,5,506,0,0,4471,4472,5,273,
        0,0,4472,4473,5,2,0,0,4473,4474,3,310,155,0,4474,4475,5,3,0,0,4475,
        4486,1,0,0,0,4476,4477,5,506,0,0,4477,4478,5,56,0,0,4478,4483,3,
        176,88,0,4479,4480,5,2,0,0,4480,4481,3,310,155,0,4481,4482,5,3,0,
        0,4482,4484,1,0,0,0,4483,4479,1,0,0,0,4483,4484,1,0,0,0,4484,4486,
        1,0,0,0,4485,4457,1,0,0,0,4485,4458,1,0,0,0,4485,4464,1,0,0,0,4485,
        4470,1,0,0,0,4485,4476,1,0,0,0,4486,213,1,0,0,0,4487,4488,5,506,
        0,0,4488,4489,5,386,0,0,4489,4494,3,176,88,0,4490,4491,5,2,0,0,4491,
        4492,3,310,155,0,4492,4493,5,3,0,0,4493,4495,1,0,0,0,4494,4490,1,
        0,0,0,4494,4495,1,0,0,0,4495,215,1,0,0,0,4496,4498,5,112,0,0,4497,
        4499,5,273,0,0,4498,4497,1,0,0,0,4498,4499,1,0,0,0,4499,4500,1,0,
        0,0,4500,4501,5,232,0,0,4501,4502,5,538,0,0,4502,4503,5,241,0,0,
        4503,4504,5,447,0,0,4504,4507,3,320,160,0,4505,4506,5,329,0,0,4506,
        4508,3,298,149,0,4507,4505,1,0,0,0,4507,4508,1,0,0,0,4508,4513,1,
        0,0,0,4509,4510,5,82,0,0,4510,4511,5,455,0,0,4511,4512,5,61,0,0,
        4512,4514,5,538,0,0,4513,4509,1,0,0,0,4513,4514,1,0,0,0,4514,4519,
        1,0,0,0,4515,4516,5,269,0,0,4516,4517,5,455,0,0,4517,4518,5,61,0,
        0,4518,4520,5,538,0,0,4519,4515,1,0,0,0,4519,4520,1,0,0,0,4520,4522,
        1,0,0,0,4521,4523,3,218,109,0,4522,4521,1,0,0,0,4522,4523,1,0,0,
        0,4523,4525,1,0,0,0,4524,4526,3,298,149,0,4525,4524,1,0,0,0,4525,
        4526,1,0,0,0,4526,4528,1,0,0,0,4527,4529,3,208,104,0,4528,4527,1,
        0,0,0,4528,4529,1,0,0,0,4529,4531,1,0,0,0,4530,4532,3,308,154,0,
        4531,4530,1,0,0,0,4531,4532,1,0,0,0,4532,217,1,0,0,0,4533,4534,5,
        226,0,0,4534,4535,5,543,0,0,4535,4540,5,269,0,0,4536,4537,5,226,
        0,0,4537,4538,5,543,0,0,4538,4540,5,402,0,0,4539,4533,1,0,0,0,4539,
        4536,1,0,0,0,4540,219,1,0,0,0,4541,4542,5,241,0,0,4542,4543,5,324,
        0,0,4543,4547,3,404,202,0,4544,4545,5,196,0,0,4545,4546,5,30,0,0,
        4546,4548,3,438,219,0,4547,4544,1,0,0,0,4547,4548,1,0,0,0,4548,4550,
        1,0,0,0,4549,4551,3,308,154,0,4550,4549,1,0,0,0,4550,4551,1,0,0,
        0,4551,221,1,0,0,0,4552,4554,3,232,116,0,4553,4552,1,0,0,0,4553,
        4554,1,0,0,0,4554,4555,1,0,0,0,4555,4556,3,224,112,0,4556,4557,3,
        284,142,0,4557,223,1,0,0,0,4558,4559,6,112,-1,0,4559,4560,3,228,
        114,0,4560,4575,1,0,0,0,4561,4562,10,2,0,0,4562,4564,5,239,0,0,4563,
        4565,3,226,113,0,4564,4563,1,0,0,0,4564,4565,1,0,0,0,4565,4566,1,
        0,0,0,4566,4574,3,224,112,3,4567,4568,10,1,0,0,4568,4570,7,33,0,
        0,4569,4571,3,226,113,0,4570,4569,1,0,0,0,4570,4571,1,0,0,0,4571,
        4572,1,0,0,0,4572,4574,3,224,112,2,4573,4561,1,0,0,0,4573,4567,1,
        0,0,0,4574,4577,1,0,0,0,4575,4573,1,0,0,0,4575,4576,1,0,0,0,4576,
        225,1,0,0,0,4577,4575,1,0,0,0,4578,4579,7,34,0,0,4579,227,1,0,0,
        0,4580,4587,3,230,115,0,4581,4582,5,2,0,0,4582,4583,3,222,111,0,
        4583,4584,5,3,0,0,4584,4587,1,0,0,0,4585,4587,3,358,179,0,4586,4580,
        1,0,0,0,4586,4581,1,0,0,0,4586,4585,1,0,0,0,4587,229,1,0,0,0,4588,
        4590,3,238,119,0,4589,4591,3,246,123,0,4590,4589,1,0,0,0,4590,4591,
        1,0,0,0,4591,4593,1,0,0,0,4592,4594,3,244,122,0,4593,4592,1,0,0,
        0,4593,4594,1,0,0,0,4594,4596,1,0,0,0,4595,4597,3,242,121,0,4596,
        4595,1,0,0,0,4596,4597,1,0,0,0,4597,4599,1,0,0,0,4598,4600,3,262,
        131,0,4599,4598,1,0,0,0,4599,4600,1,0,0,0,4600,4602,1,0,0,0,4601,
        4603,3,268,134,0,4602,4601,1,0,0,0,4602,4603,1,0,0,0,4603,4605,1,
        0,0,0,4604,4606,3,270,135,0,4605,4604,1,0,0,0,4605,4606,1,0,0,0,
        4606,4607,1,0,0,0,4607,4608,4,115,2,0,4608,4609,3,284,142,0,4609,
        231,1,0,0,0,4610,4611,5,506,0,0,4611,4616,3,234,117,0,4612,4613,
        5,4,0,0,4613,4615,3,234,117,0,4614,4612,1,0,0,0,4615,4618,1,0,0,
        0,4616,4614,1,0,0,0,4616,4617,1,0,0,0,4617,233,1,0,0,0,4618,4616,
        1,0,0,0,4619,4621,3,438,219,0,4620,4622,3,236,118,0,4621,4620,1,
        0,0,0,4621,4622,1,0,0,0,4622,4623,1,0,0,0,4623,4624,5,30,0,0,4624,
        4625,5,2,0,0,4625,4626,3,222,111,0,4626,4627,5,3,0,0,4627,235,1,
        0,0,0,4628,4629,5,2,0,0,4629,4634,3,438,219,0,4630,4631,5,4,0,0,
        4631,4633,3,438,219,0,4632,4630,1,0,0,0,4633,4636,1,0,0,0,4634,4632,
        1,0,0,0,4634,4635,1,0,0,0,4635,4637,1,0,0,0,4636,4634,1,0,0,0,4637,
        4638,5,3,0,0,4638,237,1,0,0,0,4639,4641,5,410,0,0,4640,4642,7,34,
        0,0,4641,4640,1,0,0,0,4641,4642,1,0,0,0,4642,4643,1,0,0,0,4643,4644,
        3,240,120,0,4644,239,1,0,0,0,4645,4646,3,362,181,0,4646,241,1,0,
        0,0,4647,4648,5,504,0,0,4648,4649,3,368,184,0,4649,243,1,0,0,0,4650,
        4651,5,198,0,0,4651,4652,3,252,126,0,4652,245,1,0,0,0,4653,4655,
        3,248,124,0,4654,4653,1,0,0,0,4654,4655,1,0,0,0,4655,4656,1,0,0,
        0,4656,4659,5,241,0,0,4657,4660,3,250,125,0,4658,4660,3,438,219,
        0,4659,4657,1,0,0,0,4659,4658,1,0,0,0,4660,4668,1,0,0,0,4661,4664,
        5,4,0,0,4662,4665,3,250,125,0,4663,4665,3,438,219,0,4664,4662,1,
        0,0,0,4664,4663,1,0,0,0,4665,4667,1,0,0,0,4666,4661,1,0,0,0,4667,
        4670,1,0,0,0,4668,4666,1,0,0,0,4668,4669,1,0,0,0,4669,247,1,0,0,
        0,4670,4668,1,0,0,0,4671,4672,5,60,0,0,4672,4673,5,79,0,0,4673,249,
        1,0,0,0,4674,4675,3,438,219,0,4675,4676,5,2,0,0,4676,4677,5,543,
        0,0,4677,4678,5,3,0,0,4678,251,1,0,0,0,4679,4684,3,254,127,0,4680,
        4681,5,4,0,0,4681,4683,3,254,127,0,4682,4680,1,0,0,0,4683,4686,1,
        0,0,0,4684,4682,1,0,0,0,4684,4685,1,0,0,0,4685,253,1,0,0,0,4686,
        4684,1,0,0,0,4687,4691,3,304,152,0,4688,4690,3,256,128,0,4689,4688,
        1,0,0,0,4690,4693,1,0,0,0,4691,4689,1,0,0,0,4691,4692,1,0,0,0,4692,
        255,1,0,0,0,4693,4691,1,0,0,0,4694,4695,3,294,147,0,4695,4697,5,
        252,0,0,4696,4698,3,258,129,0,4697,4696,1,0,0,0,4697,4698,1,0,0,
        0,4698,4699,1,0,0,0,4699,4701,3,304,152,0,4700,4702,3,296,148,0,
        4701,4700,1,0,0,0,4701,4702,1,0,0,0,4702,257,1,0,0,0,4703,4704,5,
        7,0,0,4704,4705,3,438,219,0,4705,4706,5,8,0,0,4706,4712,1,0,0,0,
        4707,4708,5,533,0,0,4708,4709,3,438,219,0,4709,4710,5,534,0,0,4710,
        4712,1,0,0,0,4711,4703,1,0,0,0,4711,4707,1,0,0,0,4712,259,1,0,0,
        0,4713,4714,5,7,0,0,4714,4719,3,438,219,0,4715,4716,5,4,0,0,4716,
        4718,3,438,219,0,4717,4715,1,0,0,0,4718,4721,1,0,0,0,4719,4717,1,
        0,0,0,4719,4720,1,0,0,0,4720,4722,1,0,0,0,4721,4719,1,0,0,0,4722,
        4723,5,8,0,0,4723,4736,1,0,0,0,4724,4725,5,533,0,0,4725,4730,3,438,
        219,0,4726,4727,5,4,0,0,4727,4729,3,438,219,0,4728,4726,1,0,0,0,
        4729,4732,1,0,0,0,4730,4728,1,0,0,0,4730,4731,1,0,0,0,4731,4733,
        1,0,0,0,4732,4730,1,0,0,0,4733,4734,5,534,0,0,4734,4736,1,0,0,0,
        4735,4713,1,0,0,0,4735,4724,1,0,0,0,4736,261,1,0,0,0,4737,4738,5,
        210,0,0,4738,4739,5,61,0,0,4739,4740,3,264,132,0,4740,263,1,0,0,
        0,4741,4742,5,399,0,0,4742,4751,5,2,0,0,4743,4748,3,364,182,0,4744,
        4745,5,4,0,0,4745,4747,3,364,182,0,4746,4744,1,0,0,0,4747,4750,1,
        0,0,0,4748,4746,1,0,0,0,4748,4749,1,0,0,0,4749,4752,1,0,0,0,4750,
        4748,1,0,0,0,4751,4743,1,0,0,0,4751,4752,1,0,0,0,4752,4753,1,0,0,
        0,4753,4789,5,3,0,0,4754,4755,5,105,0,0,4755,4764,5,2,0,0,4756,4761,
        3,364,182,0,4757,4758,5,4,0,0,4758,4760,3,364,182,0,4759,4757,1,
        0,0,0,4760,4763,1,0,0,0,4761,4759,1,0,0,0,4761,4762,1,0,0,0,4762,
        4765,1,0,0,0,4763,4761,1,0,0,0,4764,4756,1,0,0,0,4764,4765,1,0,0,
        0,4765,4766,1,0,0,0,4766,4789,5,3,0,0,4767,4768,5,211,0,0,4768,4769,
        5,417,0,0,4769,4770,5,2,0,0,4770,4775,3,266,133,0,4771,4772,5,4,
        0,0,4772,4774,3,266,133,0,4773,4771,1,0,0,0,4774,4777,1,0,0,0,4775,
        4773,1,0,0,0,4775,4776,1,0,0,0,4776,4778,1,0,0,0,4777,4775,1,0,0,
        0,4778,4779,5,3,0,0,4779,4789,1,0,0,0,4780,4785,3,364,182,0,4781,
        4782,5,4,0,0,4782,4784,3,364,182,0,4783,4781,1,0,0,0,4784,4787,1,
        0,0,0,4785,4783,1,0,0,0,4785,4786,1,0,0,0,4786,4789,1,0,0,0,4787,
        4785,1,0,0,0,4788,4741,1,0,0,0,4788,4754,1,0,0,0,4788,4767,1,0,0,
        0,4788,4780,1,0,0,0,4789,265,1,0,0,0,4790,4799,5,2,0,0,4791,4796,
        3,364,182,0,4792,4793,5,4,0,0,4793,4795,3,364,182,0,4794,4792,1,
        0,0,0,4795,4798,1,0,0,0,4796,4794,1,0,0,0,4796,4797,1,0,0,0,4797,
        4800,1,0,0,0,4798,4796,1,0,0,0,4799,4791,1,0,0,0,4799,4800,1,0,0,
        0,4800,4801,1,0,0,0,4801,4802,5,3,0,0,4802,267,1,0,0,0,4803,4804,
        5,214,0,0,4804,4805,3,368,184,0,4805,269,1,0,0,0,4806,4807,5,364,
        0,0,4807,4808,3,368,184,0,4808,271,1,0,0,0,4809,4816,3,274,137,0,
        4810,4812,5,4,0,0,4811,4810,1,0,0,0,4811,4812,1,0,0,0,4812,4813,
        1,0,0,0,4813,4815,3,274,137,0,4814,4811,1,0,0,0,4815,4818,1,0,0,
        0,4816,4814,1,0,0,0,4816,4817,1,0,0,0,4817,4819,1,0,0,0,4818,4816,
        1,0,0,0,4819,4820,5,534,0,0,4820,273,1,0,0,0,4821,4835,3,438,219,
        0,4822,4823,5,2,0,0,4823,4830,3,276,138,0,4824,4826,5,4,0,0,4825,
        4824,1,0,0,0,4825,4826,1,0,0,0,4826,4827,1,0,0,0,4827,4829,3,276,
        138,0,4828,4825,1,0,0,0,4829,4832,1,0,0,0,4830,4828,1,0,0,0,4830,
        4831,1,0,0,0,4831,4833,1,0,0,0,4832,4830,1,0,0,0,4833,4834,5,3,0,
        0,4834,4836,1,0,0,0,4835,4822,1,0,0,0,4835,4836,1,0,0,0,4836,275,
        1,0,0,0,4837,4843,3,176,88,0,4838,4841,5,512,0,0,4839,4842,3,404,
        202,0,4840,4842,3,438,219,0,4841,4839,1,0,0,0,4841,4840,1,0,0,0,
        4842,4844,1,0,0,0,4843,4838,1,0,0,0,4843,4844,1,0,0,0,4844,4847,
        1,0,0,0,4845,4847,3,404,202,0,4846,4837,1,0,0,0,4846,4845,1,0,0,
        0,4847,277,1,0,0,0,4848,4849,3,320,160,0,4849,4852,5,512,0,0,4850,
        4853,3,364,182,0,4851,4853,5,135,0,0,4852,4850,1,0,0,0,4852,4851,
        1,0,0,0,4853,279,1,0,0,0,4854,4859,3,278,139,0,4855,4856,5,4,0,0,
        4856,4858,3,278,139,0,4857,4855,1,0,0,0,4858,4861,1,0,0,0,4859,4857,
        1,0,0,0,4859,4860,1,0,0,0,4860,281,1,0,0,0,4861,4859,1,0,0,0,4862,
        4863,5,261,0,0,4863,4864,5,498,0,0,4864,4865,3,438,219,0,4865,4874,
        5,2,0,0,4866,4871,3,364,182,0,4867,4868,5,4,0,0,4868,4870,3,364,
        182,0,4869,4867,1,0,0,0,4870,4873,1,0,0,0,4871,4869,1,0,0,0,4871,
        4872,1,0,0,0,4872,4875,1,0,0,0,4873,4871,1,0,0,0,4874,4866,1,0,0,
        0,4874,4875,1,0,0,0,4875,4876,1,0,0,0,4876,4877,5,3,0,0,4877,4878,
        3,438,219,0,4878,4879,5,30,0,0,4879,4884,3,438,219,0,4880,4881,5,
        4,0,0,4881,4883,3,438,219,0,4882,4880,1,0,0,0,4883,4886,1,0,0,0,
        4884,4882,1,0,0,0,4884,4885,1,0,0,0,4885,283,1,0,0,0,4886,4884,1,
        0,0,0,4887,4889,3,286,143,0,4888,4887,1,0,0,0,4888,4889,1,0,0,0,
        4889,4891,1,0,0,0,4890,4892,3,290,145,0,4891,4890,1,0,0,0,4891,4892,
        1,0,0,0,4892,285,1,0,0,0,4893,4894,5,322,0,0,4894,4895,5,61,0,0,
        4895,4900,3,288,144,0,4896,4897,5,4,0,0,4897,4899,3,288,144,0,4898,
        4896,1,0,0,0,4899,4902,1,0,0,0,4900,4898,1,0,0,0,4900,4901,1,0,0,
        0,4901,287,1,0,0,0,4902,4900,1,0,0,0,4903,4905,3,364,182,0,4904,
        4906,7,35,0,0,4905,4904,1,0,0,0,4905,4906,1,0,0,0,4906,4909,1,0,
        0,0,4907,4908,5,313,0,0,4908,4910,7,36,0,0,4909,4907,1,0,0,0,4909,
        4910,1,0,0,0,4910,289,1,0,0,0,4911,4912,5,268,0,0,4912,4922,5,543,
        0,0,4913,4914,5,268,0,0,4914,4915,5,543,0,0,4915,4916,5,316,0,0,
        4916,4922,5,543,0,0,4917,4918,5,268,0,0,4918,4919,5,543,0,0,4919,
        4920,5,4,0,0,4920,4922,5,543,0,0,4921,4911,1,0,0,0,4921,4913,1,0,
        0,0,4921,4917,1,0,0,0,4922,291,1,0,0,0,4923,4924,5,329,0,0,4924,
        4925,5,61,0,0,4925,4930,3,364,182,0,4926,4927,5,4,0,0,4927,4929,
        3,364,182,0,4928,4926,1,0,0,0,4929,4932,1,0,0,0,4930,4928,1,0,0,
        0,4930,4931,1,0,0,0,4931,293,1,0,0,0,4932,4930,1,0,0,0,4933,4935,
        5,233,0,0,4934,4933,1,0,0,0,4934,4935,1,0,0,0,4935,4958,1,0,0,0,
        4936,4958,5,104,0,0,4937,4939,5,264,0,0,4938,4940,5,323,0,0,4939,
        4938,1,0,0,0,4939,4940,1,0,0,0,4940,4958,1,0,0,0,4941,4943,5,394,
        0,0,4942,4944,5,323,0,0,4943,4942,1,0,0,0,4943,4944,1,0,0,0,4944,
        4958,1,0,0,0,4945,4947,5,201,0,0,4946,4948,5,323,0,0,4947,4946,1,
        0,0,0,4947,4948,1,0,0,0,4948,4958,1,0,0,0,4949,4950,5,264,0,0,4950,
        4958,5,411,0,0,4951,4952,5,394,0,0,4952,4958,5,411,0,0,4953,4954,
        5,264,0,0,4954,4958,5,26,0,0,4955,4956,5,394,0,0,4956,4958,5,26,
        0,0,4957,4934,1,0,0,0,4957,4936,1,0,0,0,4957,4937,1,0,0,0,4957,4941,
        1,0,0,0,4957,4945,1,0,0,0,4957,4949,1,0,0,0,4957,4951,1,0,0,0,4957,
        4953,1,0,0,0,4957,4955,1,0,0,0,4958,295,1,0,0,0,4959,4960,5,317,
        0,0,4960,4964,3,368,184,0,4961,4962,5,487,0,0,4962,4964,3,298,149,
        0,4963,4959,1,0,0,0,4963,4961,1,0,0,0,4964,297,1,0,0,0,4965,4966,
        5,2,0,0,4966,4967,3,300,150,0,4967,4968,5,3,0,0,4968,299,1,0,0,0,
        4969,4974,3,434,217,0,4970,4971,5,4,0,0,4971,4973,3,434,217,0,4972,
        4970,1,0,0,0,4973,4976,1,0,0,0,4974,4972,1,0,0,0,4974,4975,1,0,0,
        0,4975,301,1,0,0,0,4976,4974,1,0,0,0,4977,4978,5,536,0,0,4978,4979,
        3,438,219,0,4979,4981,5,2,0,0,4980,4982,3,310,155,0,4981,4980,1,
        0,0,0,4981,4982,1,0,0,0,4982,4983,1,0,0,0,4983,4984,5,3,0,0,4984,
        303,1,0,0,0,4985,4987,3,320,160,0,4986,4988,3,302,151,0,4987,4986,
        1,0,0,0,4987,4988,1,0,0,0,4988,4990,1,0,0,0,4989,4991,3,306,153,
        0,4990,4989,1,0,0,0,4990,4991,1,0,0,0,4991,4993,1,0,0,0,4992,4994,
        3,432,216,0,4993,4992,1,0,0,0,4993,4994,1,0,0,0,4994,4996,1,0,0,
        0,4995,4997,3,402,201,0,4996,4995,1,0,0,0,4996,4997,1,0,0,0,4997,
        4999,1,0,0,0,4998,5000,3,356,178,0,4999,4998,1,0,0,0,4999,5000,1,
        0,0,0,5000,5001,1,0,0,0,5001,5003,3,318,159,0,5002,5004,3,428,214,
        0,5003,5002,1,0,0,0,5003,5004,1,0,0,0,5004,5006,1,0,0,0,5005,5007,
        3,260,130,0,5006,5005,1,0,0,0,5006,5007,1,0,0,0,5007,5011,1,0,0,
        0,5008,5010,3,282,141,0,5009,5008,1,0,0,0,5010,5013,1,0,0,0,5011,
        5009,1,0,0,0,5011,5012,1,0,0,0,5012,5037,1,0,0,0,5013,5011,1,0,0,
        0,5014,5015,5,2,0,0,5015,5016,3,222,111,0,5016,5017,5,3,0,0,5017,
        5021,3,318,159,0,5018,5020,3,282,141,0,5019,5018,1,0,0,0,5020,5023,
        1,0,0,0,5021,5019,1,0,0,0,5021,5022,1,0,0,0,5022,5037,1,0,0,0,5023,
        5021,1,0,0,0,5024,5025,3,438,219,0,5025,5027,5,2,0,0,5026,5028,3,
        310,155,0,5027,5026,1,0,0,0,5027,5028,1,0,0,0,5028,5029,1,0,0,0,
        5029,5030,5,3,0,0,5030,5031,3,318,159,0,5031,5037,1,0,0,0,5032,5033,
        5,2,0,0,5033,5034,3,252,126,0,5034,5035,5,3,0,0,5035,5037,1,0,0,
        0,5036,4985,1,0,0,0,5036,5014,1,0,0,0,5036,5024,1,0,0,0,5036,5032,
        1,0,0,0,5037,305,1,0,0,0,5038,5039,5,230,0,0,5039,5040,3,438,219,
        0,5040,307,1,0,0,0,5041,5042,5,358,0,0,5042,5043,5,2,0,0,5043,5044,
        3,310,155,0,5044,5045,5,3,0,0,5045,309,1,0,0,0,5046,5051,3,312,156,
        0,5047,5048,5,4,0,0,5048,5050,3,312,156,0,5049,5047,1,0,0,0,5050,
        5053,1,0,0,0,5051,5049,1,0,0,0,5051,5052,1,0,0,0,5052,311,1,0,0,
        0,5053,5051,1,0,0,0,5054,5055,3,314,157,0,5055,5056,5,512,0,0,5056,
        5057,3,316,158,0,5057,313,1,0,0,0,5058,5061,3,438,219,0,5059,5061,
        3,404,202,0,5060,5058,1,0,0,0,5060,5059,1,0,0,0,5061,315,1,0,0,0,
        5062,5065,3,438,219,0,5063,5065,3,404,202,0,5064,5062,1,0,0,0,5064,
        5063,1,0,0,0,5065,317,1,0,0,0,5066,5068,5,30,0,0,5067,5066,1,0,0,
        0,5067,5068,1,0,0,0,5068,5069,1,0,0,0,5069,5071,3,440,220,0,5070,
        5072,3,298,149,0,5071,5070,1,0,0,0,5071,5072,1,0,0,0,5072,5074,1,
        0,0,0,5073,5067,1,0,0,0,5073,5074,1,0,0,0,5074,319,1,0,0,0,5075,
        5080,3,434,217,0,5076,5077,5,5,0,0,5077,5079,3,434,217,0,5078,5076,
        1,0,0,0,5079,5082,1,0,0,0,5080,5078,1,0,0,0,5080,5081,1,0,0,0,5081,
        321,1,0,0,0,5082,5080,1,0,0,0,5083,5088,3,324,162,0,5084,5085,5,
        4,0,0,5085,5087,3,324,162,0,5086,5084,1,0,0,0,5087,5090,1,0,0,0,
        5088,5086,1,0,0,0,5088,5089,1,0,0,0,5089,323,1,0,0,0,5090,5088,1,
        0,0,0,5091,5094,3,438,219,0,5092,5093,5,83,0,0,5093,5095,5,538,0,
        0,5094,5092,1,0,0,0,5094,5095,1,0,0,0,5095,325,1,0,0,0,5096,5101,
        3,328,164,0,5097,5098,5,4,0,0,5098,5100,3,328,164,0,5099,5097,1,
        0,0,0,5100,5103,1,0,0,0,5101,5099,1,0,0,0,5101,5102,1,0,0,0,5102,
        327,1,0,0,0,5103,5101,1,0,0,0,5104,5105,3,438,219,0,5105,5107,3,
        418,209,0,5106,5108,5,255,0,0,5107,5106,1,0,0,0,5107,5108,1,0,0,
        0,5108,5110,1,0,0,0,5109,5111,3,354,177,0,5110,5109,1,0,0,0,5110,
        5111,1,0,0,0,5111,5121,1,0,0,0,5112,5113,5,204,0,0,5113,5115,5,36,
        0,0,5114,5112,1,0,0,0,5114,5115,1,0,0,0,5115,5116,1,0,0,0,5116,5117,
        5,30,0,0,5117,5118,5,2,0,0,5118,5119,3,364,182,0,5119,5120,5,3,0,
        0,5120,5122,1,0,0,0,5121,5114,1,0,0,0,5121,5122,1,0,0,0,5122,5127,
        1,0,0,0,5123,5125,5,311,0,0,5124,5123,1,0,0,0,5124,5125,1,0,0,0,
        5125,5126,1,0,0,0,5126,5128,5,312,0,0,5127,5124,1,0,0,0,5127,5128,
        1,0,0,0,5128,5136,1,0,0,0,5129,5134,5,35,0,0,5130,5131,5,2,0,0,5131,
        5132,3,444,222,0,5132,5133,5,3,0,0,5133,5135,1,0,0,0,5134,5130,1,
        0,0,0,5134,5135,1,0,0,0,5135,5137,1,0,0,0,5136,5129,1,0,0,0,5136,
        5137,1,0,0,0,5137,5156,1,0,0,0,5138,5154,5,135,0,0,5139,5155,5,312,
        0,0,5140,5155,5,543,0,0,5141,5155,5,545,0,0,5142,5155,5,342,0,0,
        5143,5155,5,159,0,0,5144,5155,5,49,0,0,5145,5155,5,538,0,0,5146,
        5155,5,108,0,0,5147,5152,5,110,0,0,5148,5149,5,2,0,0,5149,5150,3,
        444,222,0,5150,5151,5,3,0,0,5151,5153,1,0,0,0,5152,5148,1,0,0,0,
        5152,5153,1,0,0,0,5153,5155,1,0,0,0,5154,5139,1,0,0,0,5154,5140,
        1,0,0,0,5154,5141,1,0,0,0,5154,5142,1,0,0,0,5154,5143,1,0,0,0,5154,
        5144,1,0,0,0,5154,5145,1,0,0,0,5154,5146,1,0,0,0,5154,5147,1,0,0,
        0,5155,5157,1,0,0,0,5156,5138,1,0,0,0,5156,5157,1,0,0,0,5157,5167,
        1,0,0,0,5158,5159,5,317,0,0,5159,5160,5,484,0,0,5160,5165,5,110,
        0,0,5161,5162,5,2,0,0,5162,5163,3,444,222,0,5163,5164,5,3,0,0,5164,
        5166,1,0,0,0,5165,5161,1,0,0,0,5165,5166,1,0,0,0,5166,5168,1,0,0,
        0,5167,5158,1,0,0,0,5167,5168,1,0,0,0,5168,5171,1,0,0,0,5169,5170,
        5,83,0,0,5170,5172,5,538,0,0,5171,5169,1,0,0,0,5171,5172,1,0,0,0,
        5172,329,1,0,0,0,5173,5178,3,332,166,0,5174,5175,5,4,0,0,5175,5177,
        3,332,166,0,5176,5174,1,0,0,0,5177,5180,1,0,0,0,5178,5176,1,0,0,
        0,5178,5179,1,0,0,0,5179,331,1,0,0,0,5180,5178,1,0,0,0,5181,5185,
        5,230,0,0,5182,5183,5,225,0,0,5183,5184,5,311,0,0,5184,5186,5,175,
        0,0,5185,5182,1,0,0,0,5185,5186,1,0,0,0,5186,5187,1,0,0,0,5187,5188,
        3,438,219,0,5188,5191,3,298,149,0,5189,5190,5,487,0,0,5190,5192,
        7,20,0,0,5191,5189,1,0,0,0,5191,5192,1,0,0,0,5192,5198,1,0,0,0,5193,
        5194,5,358,0,0,5194,5195,5,2,0,0,5195,5196,3,310,155,0,5196,5197,
        5,3,0,0,5197,5199,1,0,0,0,5198,5193,1,0,0,0,5198,5199,1,0,0,0,5199,
        5202,1,0,0,0,5200,5201,5,83,0,0,5201,5203,5,538,0,0,5202,5200,1,
        0,0,0,5202,5203,1,0,0,0,5203,333,1,0,0,0,5204,5209,3,336,168,0,5205,
        5206,5,4,0,0,5206,5208,3,336,168,0,5207,5205,1,0,0,0,5208,5211,1,
        0,0,0,5209,5207,1,0,0,0,5209,5210,1,0,0,0,5210,335,1,0,0,0,5211,
        5209,1,0,0,0,5212,5217,3,338,169,0,5213,5217,3,340,170,0,5214,5217,
        3,342,171,0,5215,5217,3,344,172,0,5216,5212,1,0,0,0,5216,5213,1,
        0,0,0,5216,5214,1,0,0,0,5216,5215,1,0,0,0,5217,5222,1,0,0,0,5218,
        5219,5,2,0,0,5219,5220,3,310,155,0,5220,5221,5,3,0,0,5221,5223,1,
        0,0,0,5222,5218,1,0,0,0,5222,5223,1,0,0,0,5223,337,1,0,0,0,5224,
        5228,5,329,0,0,5225,5226,5,225,0,0,5226,5227,5,311,0,0,5227,5229,
        5,175,0,0,5228,5225,1,0,0,0,5228,5229,1,0,0,0,5229,5230,1,0,0,0,
        5230,5231,3,438,219,0,5231,5232,5,489,0,0,5232,5233,5,265,0,0,5233,
        5236,5,457,0,0,5234,5237,5,291,0,0,5235,5237,3,346,173,0,5236,5234,
        1,0,0,0,5236,5235,1,0,0,0,5237,339,1,0,0,0,5238,5242,5,329,0,0,5239,
        5240,5,225,0,0,5240,5241,5,311,0,0,5241,5243,5,175,0,0,5242,5239,
        1,0,0,0,5242,5243,1,0,0,0,5243,5244,1,0,0,0,5244,5245,3,438,219,
        0,5245,5246,5,489,0,0,5246,5247,5,7,0,0,5247,5248,3,346,173,0,5248,
        5249,5,4,0,0,5249,5250,3,346,173,0,5250,5251,5,3,0,0,5251,341,1,
        0,0,0,5252,5253,5,198,0,0,5253,5254,3,346,173,0,5254,5255,5,464,
        0,0,5255,5256,3,346,173,0,5256,5257,5,240,0,0,5257,5259,5,543,0,
        0,5258,5260,3,378,189,0,5259,5258,1,0,0,0,5259,5260,1,0,0,0,5260,
        343,1,0,0,0,5261,5265,5,329,0,0,5262,5263,5,225,0,0,5263,5264,5,
        311,0,0,5264,5266,5,175,0,0,5265,5262,1,0,0,0,5265,5266,1,0,0,0,
        5266,5267,1,0,0,0,5267,5284,3,438,219,0,5268,5269,5,489,0,0,5269,
        5282,5,228,0,0,5270,5271,5,2,0,0,5271,5276,3,346,173,0,5272,5273,
        5,4,0,0,5273,5275,3,346,173,0,5274,5272,1,0,0,0,5275,5278,1,0,0,
        0,5276,5274,1,0,0,0,5276,5277,1,0,0,0,5277,5279,1,0,0,0,5278,5276,
        1,0,0,0,5279,5280,5,3,0,0,5280,5283,1,0,0,0,5281,5283,3,346,173,
        0,5282,5270,1,0,0,0,5282,5281,1,0,0,0,5283,5285,1,0,0,0,5284,5268,
        1,0,0,0,5284,5285,1,0,0,0,5285,345,1,0,0,0,5286,5287,5,2,0,0,5287,
        5292,3,348,174,0,5288,5289,5,4,0,0,5289,5291,3,348,174,0,5290,5288,
        1,0,0,0,5291,5294,1,0,0,0,5292,5290,1,0,0,0,5292,5293,1,0,0,0,5293,
        5295,1,0,0,0,5294,5292,1,0,0,0,5295,5296,5,3,0,0,5296,347,1,0,0,
        0,5297,5298,7,37,0,0,5298,349,1,0,0,0,5299,5304,3,352,176,0,5300,
        5301,5,4,0,0,5301,5303,3,352,176,0,5302,5300,1,0,0,0,5303,5306,1,
        0,0,0,5304,5302,1,0,0,0,5304,5305,1,0,0,0,5305,351,1,0,0,0,5306,
        5304,1,0,0,0,5307,5308,3,438,219,0,5308,5312,3,298,149,0,5309,5310,
        5,157,0,0,5310,5311,5,255,0,0,5311,5313,3,298,149,0,5312,5309,1,
        0,0,0,5312,5313,1,0,0,0,5313,5315,1,0,0,0,5314,5316,3,308,154,0,
        5315,5314,1,0,0,0,5315,5316,1,0,0,0,5316,353,1,0,0,0,5317,5318,7,
        38,0,0,5318,355,1,0,0,0,5319,5320,5,450,0,0,5320,5321,5,2,0,0,5321,
        5326,5,543,0,0,5322,5323,5,4,0,0,5323,5325,5,543,0,0,5324,5322,1,
        0,0,0,5325,5328,1,0,0,0,5326,5324,1,0,0,0,5326,5327,1,0,0,0,5327,
        5329,1,0,0,0,5328,5326,1,0,0,0,5329,5330,5,3,0,0,5330,357,1,0,0,
        0,5331,5332,5,489,0,0,5332,5337,3,370,185,0,5333,5334,5,4,0,0,5334,
        5336,3,370,185,0,5335,5333,1,0,0,0,5336,5339,1,0,0,0,5337,5335,1,
        0,0,0,5337,5338,1,0,0,0,5338,359,1,0,0,0,5339,5337,1,0,0,0,5340,
        5345,3,364,182,0,5341,5343,5,30,0,0,5342,5341,1,0,0,0,5342,5343,
        1,0,0,0,5343,5344,1,0,0,0,5344,5346,3,176,88,0,5345,5342,1,0,0,0,
        5345,5346,1,0,0,0,5346,361,1,0,0,0,5347,5352,3,360,180,0,5348,5349,
        5,4,0,0,5349,5351,3,360,180,0,5350,5348,1,0,0,0,5351,5354,1,0,0,
        0,5352,5350,1,0,0,0,5352,5353,1,0,0,0,5353,363,1,0,0,0,5354,5352,
        1,0,0,0,5355,5358,3,368,184,0,5356,5358,3,366,183,0,5357,5355,1,
        0,0,0,5357,5356,1,0,0,0,5358,365,1,0,0,0,5359,5360,3,434,217,0,5360,
        5361,5,532,0,0,5361,5362,3,368,184,0,5362,5376,1,0,0,0,5363,5364,
        5,2,0,0,5364,5367,3,434,217,0,5365,5366,5,4,0,0,5366,5368,3,434,
        217,0,5367,5365,1,0,0,0,5368,5369,1,0,0,0,5369,5367,1,0,0,0,5369,
        5370,1,0,0,0,5370,5371,1,0,0,0,5371,5372,5,3,0,0,5372,5373,5,532,
        0,0,5373,5374,3,368,184,0,5374,5376,1,0,0,0,5375,5359,1,0,0,0,5375,
        5363,1,0,0,0,5376,367,1,0,0,0,5377,5378,6,184,-1,0,5378,5379,5,527,
        0,0,5379,5402,3,368,184,10,5380,5381,5,175,0,0,5381,5382,5,2,0,0,
        5382,5383,3,222,111,0,5383,5384,5,3,0,0,5384,5402,1,0,0,0,5385,5386,
        7,39,0,0,5386,5387,5,2,0,0,5387,5388,3,376,188,0,5388,5389,5,3,0,
        0,5389,5402,1,0,0,0,5390,5391,5,246,0,0,5391,5392,5,2,0,0,5392,5393,
        3,376,188,0,5393,5394,5,3,0,0,5394,5402,1,0,0,0,5395,5397,3,376,
        188,0,5396,5398,3,374,187,0,5397,5396,1,0,0,0,5397,5398,1,0,0,0,
        5398,5402,1,0,0,0,5399,5400,5,311,0,0,5400,5402,3,368,184,5,5401,
        5377,1,0,0,0,5401,5380,1,0,0,0,5401,5385,1,0,0,0,5401,5390,1,0,0,
        0,5401,5395,1,0,0,0,5401,5399,1,0,0,0,5402,5417,1,0,0,0,5403,5404,
        10,4,0,0,5404,5405,7,40,0,0,5405,5416,3,368,184,5,5406,5407,10,3,
        0,0,5407,5408,5,510,0,0,5408,5416,3,368,184,4,5409,5410,10,2,0,0,
        5410,5411,5,321,0,0,5411,5416,3,368,184,3,5412,5413,10,1,0,0,5413,
        5414,5,529,0,0,5414,5416,3,368,184,2,5415,5403,1,0,0,0,5415,5406,
        1,0,0,0,5415,5409,1,0,0,0,5415,5412,1,0,0,0,5416,5419,1,0,0,0,5417,
        5415,1,0,0,0,5417,5418,1,0,0,0,5418,369,1,0,0,0,5419,5417,1,0,0,
        0,5420,5429,5,2,0,0,5421,5426,3,372,186,0,5422,5423,5,4,0,0,5423,
        5425,3,372,186,0,5424,5422,1,0,0,0,5425,5428,1,0,0,0,5426,5424,1,
        0,0,0,5426,5427,1,0,0,0,5427,5430,1,0,0,0,5428,5426,1,0,0,0,5429,
        5421,1,0,0,0,5429,5430,1,0,0,0,5430,5431,1,0,0,0,5431,5432,5,3,0,
        0,5432,371,1,0,0,0,5433,5436,3,360,180,0,5434,5436,5,135,0,0,5435,
        5433,1,0,0,0,5435,5434,1,0,0,0,5436,373,1,0,0,0,5437,5439,5,311,
        0,0,5438,5437,1,0,0,0,5438,5439,1,0,0,0,5439,5440,1,0,0,0,5440,5441,
        5,42,0,0,5441,5442,3,376,188,0,5442,5443,5,25,0,0,5443,5444,3,376,
        188,0,5444,5489,1,0,0,0,5445,5447,5,311,0,0,5446,5445,1,0,0,0,5446,
        5447,1,0,0,0,5447,5448,1,0,0,0,5448,5449,7,41,0,0,5449,5489,3,376,
        188,0,5450,5452,5,311,0,0,5451,5450,1,0,0,0,5451,5452,1,0,0,0,5452,
        5453,1,0,0,0,5453,5454,7,42,0,0,5454,5489,3,376,188,0,5455,5457,
        5,311,0,0,5456,5455,1,0,0,0,5456,5457,1,0,0,0,5457,5458,1,0,0,0,
        5458,5459,5,228,0,0,5459,5460,5,2,0,0,5460,5461,3,222,111,0,5461,
        5462,5,3,0,0,5462,5489,1,0,0,0,5463,5465,5,311,0,0,5464,5463,1,0,
        0,0,5464,5465,1,0,0,0,5465,5466,1,0,0,0,5466,5467,5,228,0,0,5467,
        5468,5,2,0,0,5468,5473,3,364,182,0,5469,5470,5,4,0,0,5470,5472,3,
        364,182,0,5471,5469,1,0,0,0,5472,5475,1,0,0,0,5473,5471,1,0,0,0,
        5473,5474,1,0,0,0,5474,5476,1,0,0,0,5475,5473,1,0,0,0,5476,5477,
        5,3,0,0,5477,5489,1,0,0,0,5478,5480,5,245,0,0,5479,5481,5,311,0,
        0,5480,5479,1,0,0,0,5480,5481,1,0,0,0,5481,5482,1,0,0,0,5482,5489,
        5,312,0,0,5483,5485,5,245,0,0,5484,5486,5,311,0,0,5485,5484,1,0,
        0,0,5485,5486,1,0,0,0,5486,5487,1,0,0,0,5487,5489,7,43,0,0,5488,
        5438,1,0,0,0,5488,5446,1,0,0,0,5488,5451,1,0,0,0,5488,5456,1,0,0,
        0,5488,5464,1,0,0,0,5488,5478,1,0,0,0,5488,5483,1,0,0,0,5489,375,
        1,0,0,0,5490,5491,6,188,-1,0,5491,5495,3,380,190,0,5492,5493,7,44,
        0,0,5493,5495,3,376,188,7,5494,5490,1,0,0,0,5494,5492,1,0,0,0,5495,
        5517,1,0,0,0,5496,5497,10,6,0,0,5497,5498,5,530,0,0,5498,5516,3,
        376,188,7,5499,5500,10,5,0,0,5500,5501,7,45,0,0,5501,5516,3,376,
        188,6,5502,5503,10,4,0,0,5503,5504,7,46,0,0,5504,5516,3,376,188,
        5,5505,5506,10,3,0,0,5506,5507,5,525,0,0,5507,5516,3,376,188,4,5508,
        5509,10,2,0,0,5509,5510,5,528,0,0,5510,5516,3,376,188,3,5511,5512,
        10,1,0,0,5512,5513,3,406,203,0,5513,5514,3,376,188,2,5514,5516,1,
        0,0,0,5515,5496,1,0,0,0,5515,5499,1,0,0,0,5515,5502,1,0,0,0,5515,
        5505,1,0,0,0,5515,5508,1,0,0,0,5515,5511,1,0,0,0,5516,5519,1,0,0,
        0,5517,5515,1,0,0,0,5517,5518,1,0,0,0,5518,377,1,0,0,0,5519,5517,
        1,0,0,0,5520,5521,7,47,0,0,5521,379,1,0,0,0,5522,5523,6,190,-1,0,
        5523,5524,7,48,0,0,5524,5525,5,2,0,0,5525,5526,3,376,188,0,5526,
        5527,5,4,0,0,5527,5528,3,376,188,0,5528,5529,5,3,0,0,5529,5741,1,
        0,0,0,5530,5531,7,49,0,0,5531,5532,5,2,0,0,5532,5533,3,378,189,0,
        5533,5534,5,4,0,0,5534,5535,3,376,188,0,5535,5536,5,4,0,0,5536,5537,
        3,376,188,0,5537,5538,5,3,0,0,5538,5741,1,0,0,0,5539,5540,7,50,0,
        0,5540,5541,5,2,0,0,5541,5542,3,378,189,0,5542,5543,5,4,0,0,5543,
        5544,3,376,188,0,5544,5545,5,4,0,0,5545,5546,3,376,188,0,5546,5547,
        5,3,0,0,5547,5741,1,0,0,0,5548,5549,7,51,0,0,5549,5550,5,2,0,0,5550,
        5551,3,376,188,0,5551,5557,5,4,0,0,5552,5553,5,240,0,0,5553,5554,
        3,376,188,0,5554,5555,3,378,189,0,5555,5558,1,0,0,0,5556,5558,3,
        376,188,0,5557,5552,1,0,0,0,5557,5556,1,0,0,0,5558,5559,1,0,0,0,
        5559,5560,5,3,0,0,5560,5741,1,0,0,0,5561,5562,7,52,0,0,5562,5563,
        5,2,0,0,5563,5564,3,376,188,0,5564,5570,5,4,0,0,5565,5566,5,240,
        0,0,5566,5567,3,376,188,0,5567,5568,3,378,189,0,5568,5571,1,0,0,
        0,5569,5571,3,376,188,0,5570,5565,1,0,0,0,5570,5569,1,0,0,0,5571,
        5572,1,0,0,0,5572,5573,5,3,0,0,5573,5741,1,0,0,0,5574,5575,5,119,
        0,0,5575,5576,5,2,0,0,5576,5577,3,376,188,0,5577,5583,5,4,0,0,5578,
        5579,5,240,0,0,5579,5580,3,376,188,0,5580,5581,3,378,189,0,5581,
        5584,1,0,0,0,5582,5584,3,376,188,0,5583,5578,1,0,0,0,5583,5582,1,
        0,0,0,5584,5585,1,0,0,0,5585,5586,5,3,0,0,5586,5741,1,0,0,0,5587,
        5588,5,117,0,0,5588,5589,5,2,0,0,5589,5590,3,376,188,0,5590,5596,
        5,4,0,0,5591,5592,5,240,0,0,5592,5593,3,376,188,0,5593,5594,3,378,
        189,0,5594,5597,1,0,0,0,5595,5597,3,376,188,0,5596,5591,1,0,0,0,
        5596,5595,1,0,0,0,5597,5598,1,0,0,0,5598,5599,5,3,0,0,5599,5741,
        1,0,0,0,5600,5601,7,53,0,0,5601,5602,5,2,0,0,5602,5603,3,376,188,
        0,5603,5604,5,4,0,0,5604,5605,3,376,188,0,5605,5611,5,4,0,0,5606,
        5607,5,240,0,0,5607,5608,3,376,188,0,5608,5609,3,378,189,0,5609,
        5612,1,0,0,0,5610,5612,3,376,188,0,5611,5606,1,0,0,0,5611,5610,1,
        0,0,0,5612,5613,1,0,0,0,5613,5614,5,3,0,0,5614,5741,1,0,0,0,5615,
        5741,5,108,0,0,5616,5741,5,109,0,0,5617,5741,5,110,0,0,5618,5741,
        5,274,0,0,5619,5741,5,275,0,0,5620,5741,5,111,0,0,5621,5741,5,415,
        0,0,5622,5624,5,66,0,0,5623,5625,3,410,205,0,5624,5623,1,0,0,0,5625,
        5626,1,0,0,0,5626,5624,1,0,0,0,5626,5627,1,0,0,0,5627,5630,1,0,0,
        0,5628,5629,5,160,0,0,5629,5631,3,364,182,0,5630,5628,1,0,0,0,5630,
        5631,1,0,0,0,5631,5632,1,0,0,0,5632,5633,5,164,0,0,5633,5741,1,0,
        0,0,5634,5635,5,66,0,0,5635,5637,3,364,182,0,5636,5638,3,410,205,
        0,5637,5636,1,0,0,0,5638,5639,1,0,0,0,5639,5637,1,0,0,0,5639,5640,
        1,0,0,0,5640,5643,1,0,0,0,5641,5642,5,160,0,0,5642,5644,3,364,182,
        0,5643,5641,1,0,0,0,5643,5644,1,0,0,0,5644,5645,1,0,0,0,5645,5646,
        5,164,0,0,5646,5741,1,0,0,0,5647,5648,5,67,0,0,5648,5649,5,2,0,0,
        5649,5650,3,364,182,0,5650,5651,5,30,0,0,5651,5652,3,384,192,0,5652,
        5653,5,3,0,0,5653,5741,1,0,0,0,5654,5741,3,404,202,0,5655,5741,3,
        412,206,0,5656,5660,5,521,0,0,5657,5659,3,382,191,0,5658,5657,1,
        0,0,0,5659,5662,1,0,0,0,5660,5658,1,0,0,0,5660,5661,1,0,0,0,5661,
        5741,1,0,0,0,5662,5660,1,0,0,0,5663,5664,3,400,200,0,5664,5665,5,
        5,0,0,5665,5669,5,521,0,0,5666,5668,3,382,191,0,5667,5666,1,0,0,
        0,5668,5671,1,0,0,0,5669,5667,1,0,0,0,5669,5670,1,0,0,0,5670,5741,
        1,0,0,0,5671,5669,1,0,0,0,5672,5673,5,71,0,0,5673,5674,5,2,0,0,5674,
        5679,3,364,182,0,5675,5676,5,4,0,0,5676,5678,3,364,182,0,5677,5675,
        1,0,0,0,5678,5681,1,0,0,0,5679,5677,1,0,0,0,5679,5680,1,0,0,0,5680,
        5684,1,0,0,0,5681,5679,1,0,0,0,5682,5683,5,487,0,0,5683,5685,3,176,
        88,0,5684,5682,1,0,0,0,5684,5685,1,0,0,0,5685,5686,1,0,0,0,5686,
        5687,5,3,0,0,5687,5741,1,0,0,0,5688,5689,5,97,0,0,5689,5690,5,2,
        0,0,5690,5691,3,364,182,0,5691,5692,5,487,0,0,5692,5693,3,176,88,
        0,5693,5694,5,3,0,0,5694,5741,1,0,0,0,5695,5696,5,97,0,0,5696,5697,
        5,2,0,0,5697,5698,3,364,182,0,5698,5699,5,4,0,0,5699,5700,3,384,
        192,0,5700,5701,5,3,0,0,5701,5741,1,0,0,0,5702,5741,3,386,193,0,
        5703,5704,5,2,0,0,5704,5705,3,222,111,0,5705,5706,5,3,0,0,5706,5741,
        1,0,0,0,5707,5708,5,536,0,0,5708,5741,3,176,88,0,5709,5712,5,537,
        0,0,5710,5711,7,54,0,0,5711,5713,5,5,0,0,5712,5710,1,0,0,0,5712,
        5713,1,0,0,0,5713,5714,1,0,0,0,5714,5741,3,438,219,0,5715,5717,5,
        45,0,0,5716,5715,1,0,0,0,5716,5717,1,0,0,0,5717,5718,1,0,0,0,5718,
        5741,3,438,219,0,5719,5720,5,2,0,0,5720,5721,3,364,182,0,5721,5722,
        5,3,0,0,5722,5741,1,0,0,0,5723,5727,5,255,0,0,5724,5725,3,438,219,
        0,5725,5726,5,5,0,0,5726,5728,1,0,0,0,5727,5724,1,0,0,0,5727,5728,
        1,0,0,0,5728,5729,1,0,0,0,5729,5741,3,438,219,0,5730,5731,5,181,
        0,0,5731,5732,5,2,0,0,5732,5733,3,438,219,0,5733,5735,5,198,0,0,
        5734,5736,7,55,0,0,5735,5734,1,0,0,0,5735,5736,1,0,0,0,5736,5737,
        1,0,0,0,5737,5738,3,376,188,0,5738,5739,5,3,0,0,5739,5741,1,0,0,
        0,5740,5522,1,0,0,0,5740,5530,1,0,0,0,5740,5539,1,0,0,0,5740,5548,
        1,0,0,0,5740,5561,1,0,0,0,5740,5574,1,0,0,0,5740,5587,1,0,0,0,5740,
        5600,1,0,0,0,5740,5615,1,0,0,0,5740,5616,1,0,0,0,5740,5617,1,0,0,
        0,5740,5618,1,0,0,0,5740,5619,1,0,0,0,5740,5620,1,0,0,0,5740,5621,
        1,0,0,0,5740,5622,1,0,0,0,5740,5634,1,0,0,0,5740,5647,1,0,0,0,5740,
        5654,1,0,0,0,5740,5655,1,0,0,0,5740,5656,1,0,0,0,5740,5663,1,0,0,
        0,5740,5672,1,0,0,0,5740,5688,1,0,0,0,5740,5695,1,0,0,0,5740,5702,
        1,0,0,0,5740,5703,1,0,0,0,5740,5707,1,0,0,0,5740,5709,1,0,0,0,5740,
        5716,1,0,0,0,5740,5719,1,0,0,0,5740,5723,1,0,0,0,5740,5730,1,0,0,
        0,5741,5768,1,0,0,0,5742,5743,10,11,0,0,5743,5744,5,7,0,0,5744,5745,
        3,376,188,0,5745,5746,5,8,0,0,5746,5767,1,0,0,0,5747,5748,10,10,
        0,0,5748,5749,5,7,0,0,5749,5750,3,376,188,0,5750,5752,5,531,0,0,
        5751,5753,3,376,188,0,5752,5751,1,0,0,0,5752,5753,1,0,0,0,5753,5754,
        1,0,0,0,5754,5755,5,8,0,0,5755,5767,1,0,0,0,5756,5757,10,5,0,0,5757,
        5758,5,5,0,0,5758,5767,3,438,219,0,5759,5760,10,1,0,0,5760,5764,
        5,77,0,0,5761,5765,3,438,219,0,5762,5765,5,538,0,0,5763,5765,5,135,
        0,0,5764,5761,1,0,0,0,5764,5762,1,0,0,0,5764,5763,1,0,0,0,5765,5767,
        1,0,0,0,5766,5742,1,0,0,0,5766,5747,1,0,0,0,5766,5756,1,0,0,0,5766,
        5759,1,0,0,0,5767,5770,1,0,0,0,5768,5766,1,0,0,0,5768,5769,1,0,0,
        0,5769,381,1,0,0,0,5770,5768,1,0,0,0,5771,5772,5,172,0,0,5772,5773,
        5,2,0,0,5773,5774,3,362,181,0,5774,5775,5,3,0,0,5775,5782,1,0,0,
        0,5776,5777,5,380,0,0,5777,5778,5,2,0,0,5778,5779,3,362,181,0,5779,
        5780,5,3,0,0,5780,5782,1,0,0,0,5781,5771,1,0,0,0,5781,5776,1,0,0,
        0,5782,383,1,0,0,0,5783,5789,3,418,209,0,5784,5786,7,56,0,0,5785,
        5787,7,57,0,0,5786,5785,1,0,0,0,5786,5787,1,0,0,0,5787,5789,1,0,
        0,0,5788,5783,1,0,0,0,5788,5784,1,0,0,0,5789,385,1,0,0,0,5790,5791,
        3,388,194,0,5791,5815,5,2,0,0,5792,5794,7,34,0,0,5793,5792,1,0,0,
        0,5793,5794,1,0,0,0,5794,5795,1,0,0,0,5795,5800,3,364,182,0,5796,
        5797,5,4,0,0,5797,5799,3,364,182,0,5798,5796,1,0,0,0,5799,5802,1,
        0,0,0,5800,5798,1,0,0,0,5800,5801,1,0,0,0,5801,5813,1,0,0,0,5802,
        5800,1,0,0,0,5803,5804,5,322,0,0,5804,5805,5,61,0,0,5805,5810,3,
        288,144,0,5806,5807,5,4,0,0,5807,5809,3,288,144,0,5808,5806,1,0,
        0,0,5809,5812,1,0,0,0,5810,5808,1,0,0,0,5810,5811,1,0,0,0,5811,5814,
        1,0,0,0,5812,5810,1,0,0,0,5813,5803,1,0,0,0,5813,5814,1,0,0,0,5814,
        5816,1,0,0,0,5815,5793,1,0,0,0,5815,5816,1,0,0,0,5816,5817,1,0,0,
        0,5817,5820,5,3,0,0,5818,5819,5,325,0,0,5819,5821,3,392,196,0,5820,
        5818,1,0,0,0,5820,5821,1,0,0,0,5821,387,1,0,0,0,5822,5823,3,438,
        219,0,5823,5824,5,5,0,0,5824,5826,1,0,0,0,5825,5822,1,0,0,0,5825,
        5826,1,0,0,0,5826,5827,1,0,0,0,5827,5828,3,390,195,0,5828,389,1,
        0,0,0,5829,5846,3,438,219,0,5830,5846,5,14,0,0,5831,5846,5,93,0,
        0,5832,5846,5,107,0,0,5833,5846,5,111,0,0,5834,5846,5,113,0,0,5835,
        5846,5,225,0,0,5836,5846,5,264,0,0,5837,5846,5,267,0,0,5838,5846,
        5,331,0,0,5839,5846,5,375,0,0,5840,5846,5,394,0,0,5841,5846,5,407,
        0,0,5842,5846,5,415,0,0,5843,5846,5,469,0,0,5844,5846,5,486,0,0,
        5845,5829,1,0,0,0,5845,5830,1,0,0,0,5845,5831,1,0,0,0,5845,5832,
        1,0,0,0,5845,5833,1,0,0,0,5845,5834,1,0,0,0,5845,5835,1,0,0,0,5845,
        5836,1,0,0,0,5845,5837,1,0,0,0,5845,5838,1,0,0,0,5845,5839,1,0,0,
        0,5845,5840,1,0,0,0,5845,5841,1,0,0,0,5845,5842,1,0,0,0,5845,5843,
        1,0,0,0,5845,5844,1,0,0,0,5846,391,1,0,0,0,5847,5849,5,2,0,0,5848,
        5850,3,292,146,0,5849,5848,1,0,0,0,5849,5850,1,0,0,0,5850,5852,1,
        0,0,0,5851,5853,3,286,143,0,5852,5851,1,0,0,0,5852,5853,1,0,0,0,
        5853,5855,1,0,0,0,5854,5856,3,394,197,0,5855,5854,1,0,0,0,5855,5856,
        1,0,0,0,5856,5857,1,0,0,0,5857,5858,5,3,0,0,5858,393,1,0,0,0,5859,
        5860,3,396,198,0,5860,5861,3,398,199,0,5861,5869,1,0,0,0,5862,5863,
        3,396,198,0,5863,5864,5,42,0,0,5864,5865,3,398,199,0,5865,5866,5,
        25,0,0,5866,5867,3,398,199,0,5867,5869,1,0,0,0,5868,5859,1,0,0,0,
        5868,5862,1,0,0,0,5869,395,1,0,0,0,5870,5871,7,58,0,0,5871,397,1,
        0,0,0,5872,5873,5,475,0,0,5873,5880,7,59,0,0,5874,5875,5,106,0,0,
        5875,5880,5,401,0,0,5876,5877,3,364,182,0,5877,5878,7,59,0,0,5878,
        5880,1,0,0,0,5879,5872,1,0,0,0,5879,5874,1,0,0,0,5879,5876,1,0,0,
        0,5880,399,1,0,0,0,5881,5886,3,438,219,0,5882,5883,5,5,0,0,5883,
        5885,3,438,219,0,5884,5882,1,0,0,0,5885,5888,1,0,0,0,5886,5884,1,
        0,0,0,5886,5887,1,0,0,0,5887,401,1,0,0,0,5888,5886,1,0,0,0,5889,
        5891,5,454,0,0,5890,5889,1,0,0,0,5890,5891,1,0,0,0,5891,5892,1,0,
        0,0,5892,5895,5,329,0,0,5893,5896,3,438,219,0,5894,5896,3,298,149,
        0,5895,5893,1,0,0,0,5895,5894,1,0,0,0,5896,5903,1,0,0,0,5897,5899,
        5,454,0,0,5898,5897,1,0,0,0,5898,5899,1,0,0,0,5899,5900,1,0,0,0,
        5900,5901,5,330,0,0,5901,5903,3,298,149,0,5902,5890,1,0,0,0,5902,
        5898,1,0,0,0,5903,403,1,0,0,0,5904,5956,5,312,0,0,5905,5906,7,60,
        0,0,5906,5956,5,538,0,0,5907,5956,3,444,222,0,5908,5956,3,408,204,
        0,5909,5911,5,45,0,0,5910,5909,1,0,0,0,5910,5911,1,0,0,0,5911,5912,
        1,0,0,0,5912,5956,5,538,0,0,5913,5915,5,7,0,0,5914,5916,3,404,202,
        0,5915,5914,1,0,0,0,5915,5916,1,0,0,0,5916,5921,1,0,0,0,5917,5918,
        5,4,0,0,5918,5920,3,404,202,0,5919,5917,1,0,0,0,5920,5923,1,0,0,
        0,5921,5919,1,0,0,0,5921,5922,1,0,0,0,5922,5924,1,0,0,0,5923,5921,
        1,0,0,0,5924,5956,5,8,0,0,5925,5930,5,9,0,0,5926,5927,3,404,202,
        0,5927,5928,5,531,0,0,5928,5929,3,404,202,0,5929,5931,1,0,0,0,5930,
        5926,1,0,0,0,5930,5931,1,0,0,0,5931,5939,1,0,0,0,5932,5933,5,4,0,
        0,5933,5934,3,404,202,0,5934,5935,5,531,0,0,5935,5936,3,404,202,
        0,5936,5938,1,0,0,0,5937,5932,1,0,0,0,5938,5941,1,0,0,0,5939,5937,
        1,0,0,0,5939,5940,1,0,0,0,5940,5942,1,0,0,0,5941,5939,1,0,0,0,5942,
        5956,5,10,0,0,5943,5944,5,9,0,0,5944,5949,3,404,202,0,5945,5946,
        5,4,0,0,5946,5948,3,404,202,0,5947,5945,1,0,0,0,5948,5951,1,0,0,
        0,5949,5947,1,0,0,0,5949,5950,1,0,0,0,5950,5952,1,0,0,0,5951,5949,
        1,0,0,0,5952,5953,5,10,0,0,5953,5956,1,0,0,0,5954,5956,5,343,0,0,
        5955,5904,1,0,0,0,5955,5905,1,0,0,0,5955,5907,1,0,0,0,5955,5908,
        1,0,0,0,5955,5910,1,0,0,0,5955,5913,1,0,0,0,5955,5925,1,0,0,0,5955,
        5943,1,0,0,0,5955,5954,1,0,0,0,5956,405,1,0,0,0,5957,5958,7,61,0,
        0,5958,407,1,0,0,0,5959,5960,7,43,0,0,5960,409,1,0,0,0,5961,5962,
        5,503,0,0,5962,5963,3,364,182,0,5963,5964,5,458,0,0,5964,5965,3,
        364,182,0,5965,411,1,0,0,0,5966,5967,5,240,0,0,5967,5968,3,364,182,
        0,5968,5969,3,414,207,0,5969,413,1,0,0,0,5970,5971,7,47,0,0,5971,
        415,1,0,0,0,5972,5977,3,418,209,0,5973,5975,5,311,0,0,5974,5973,
        1,0,0,0,5974,5975,1,0,0,0,5975,5976,1,0,0,0,5976,5978,5,312,0,0,
        5977,5974,1,0,0,0,5977,5978,1,0,0,0,5978,417,1,0,0,0,5979,5980,5,
        28,0,0,5980,5981,5,515,0,0,5981,5982,3,418,209,0,5982,5983,5,517,
        0,0,5983,6025,1,0,0,0,5984,5985,5,281,0,0,5985,5986,5,515,0,0,5986,
        5987,3,418,209,0,5987,5988,5,4,0,0,5988,5989,3,418,209,0,5989,5990,
        5,517,0,0,5990,6025,1,0,0,0,5991,5992,5,440,0,0,5992,5993,5,515,
        0,0,5993,5994,3,422,211,0,5994,5995,5,517,0,0,5995,6025,1,0,0,0,
        5996,5997,5,18,0,0,5997,5998,5,515,0,0,5998,5999,3,390,195,0,5999,
        6000,5,2,0,0,6000,6005,3,416,208,0,6001,6002,5,4,0,0,6002,6004,3,
        416,208,0,6003,6001,1,0,0,0,6004,6007,1,0,0,0,6005,6003,1,0,0,0,
        6005,6006,1,0,0,0,6006,6008,1,0,0,0,6007,6005,1,0,0,0,6008,6009,
        5,3,0,0,6009,6010,5,517,0,0,6010,6025,1,0,0,0,6011,6022,3,420,210,
        0,6012,6013,5,2,0,0,6013,6018,7,62,0,0,6014,6015,5,4,0,0,6015,6017,
        5,543,0,0,6016,6014,1,0,0,0,6017,6020,1,0,0,0,6018,6016,1,0,0,0,
        6018,6019,1,0,0,0,6019,6021,1,0,0,0,6020,6018,1,0,0,0,6021,6023,
        5,3,0,0,6022,6012,1,0,0,0,6022,6023,1,0,0,0,6023,6025,1,0,0,0,6024,
        5979,1,0,0,0,6024,5984,1,0,0,0,6024,5991,1,0,0,0,6024,5996,1,0,0,
        0,6024,6011,1,0,0,0,6025,419,1,0,0,0,6026,6059,5,463,0,0,6027,6059,
        5,423,0,0,6028,6059,7,57,0,0,6029,6059,5,43,0,0,6030,6059,5,259,
        0,0,6031,6059,5,54,0,0,6032,6059,5,190,0,0,6033,6059,5,152,0,0,6034,
        6059,5,115,0,0,6035,6059,5,123,0,0,6036,6059,5,459,0,0,6037,6059,
        5,125,0,0,6038,6059,5,124,0,0,6039,6059,5,127,0,0,6040,6059,5,126,
        0,0,6041,6059,5,48,0,0,6042,6059,5,360,0,0,6043,6059,5,218,0,0,6044,
        6059,5,18,0,0,6045,6059,5,439,0,0,6046,6059,5,253,0,0,6047,6059,
        5,254,0,0,6048,6059,5,456,0,0,6049,6059,5,490,0,0,6050,6059,5,71,
        0,0,6051,6059,5,131,0,0,6052,6059,5,132,0,0,6053,6059,5,133,0,0,
        6054,6059,5,243,0,0,6055,6059,5,244,0,0,6056,6059,5,493,0,0,6057,
        6059,5,21,0,0,6058,6026,1,0,0,0,6058,6027,1,0,0,0,6058,6028,1,0,
        0,0,6058,6029,1,0,0,0,6058,6030,1,0,0,0,6058,6031,1,0,0,0,6058,6032,
        1,0,0,0,6058,6033,1,0,0,0,6058,6034,1,0,0,0,6058,6035,1,0,0,0,6058,
        6036,1,0,0,0,6058,6037,1,0,0,0,6058,6038,1,0,0,0,6058,6039,1,0,0,
        0,6058,6040,1,0,0,0,6058,6041,1,0,0,0,6058,6042,1,0,0,0,6058,6043,
        1,0,0,0,6058,6044,1,0,0,0,6058,6045,1,0,0,0,6058,6046,1,0,0,0,6058,
        6047,1,0,0,0,6058,6048,1,0,0,0,6058,6049,1,0,0,0,6058,6050,1,0,0,
        0,6058,6051,1,0,0,0,6058,6052,1,0,0,0,6058,6053,1,0,0,0,6058,6054,
        1,0,0,0,6058,6055,1,0,0,0,6058,6056,1,0,0,0,6058,6057,1,0,0,0,6059,
        421,1,0,0,0,6060,6065,3,424,212,0,6061,6062,5,4,0,0,6062,6064,3,
        424,212,0,6063,6061,1,0,0,0,6064,6067,1,0,0,0,6065,6063,1,0,0,0,
        6065,6066,1,0,0,0,6066,423,1,0,0,0,6067,6065,1,0,0,0,6068,6069,3,
        438,219,0,6069,6070,5,531,0,0,6070,6072,3,418,209,0,6071,6073,3,
        426,213,0,6072,6071,1,0,0,0,6072,6073,1,0,0,0,6073,425,1,0,0,0,6074,
        6075,5,83,0,0,6075,6076,5,538,0,0,6076,427,1,0,0,0,6077,6078,5,449,
        0,0,6078,6080,5,2,0,0,6079,6081,3,430,215,0,6080,6079,1,0,0,0,6080,
        6081,1,0,0,0,6081,6082,1,0,0,0,6082,6085,5,3,0,0,6083,6084,5,379,
        0,0,6084,6086,5,543,0,0,6085,6083,1,0,0,0,6085,6086,1,0,0,0,6086,
        429,1,0,0,0,6087,6088,5,543,0,0,6088,6092,5,338,0,0,6089,6090,5,
        543,0,0,6090,6092,5,402,0,0,6091,6087,1,0,0,0,6091,6089,1,0,0,0,
        6092,431,1,0,0,0,6093,6094,5,193,0,0,6094,6095,5,497,0,0,6095,6096,
        5,30,0,0,6096,6097,5,315,0,0,6097,6104,5,543,0,0,6098,6099,5,193,
        0,0,6099,6100,5,459,0,0,6100,6101,5,30,0,0,6101,6102,5,315,0,0,6102,
        6104,5,538,0,0,6103,6093,1,0,0,0,6103,6098,1,0,0,0,6104,433,1,0,
        0,0,6105,6106,3,438,219,0,6106,6107,3,436,218,0,6107,435,1,0,0,0,
        6108,6109,5,520,0,0,6109,6111,3,438,219,0,6110,6108,1,0,0,0,6111,
        6112,1,0,0,0,6112,6110,1,0,0,0,6112,6113,1,0,0,0,6113,6116,1,0,0,
        0,6114,6116,1,0,0,0,6115,6110,1,0,0,0,6115,6114,1,0,0,0,6116,437,
        1,0,0,0,6117,6118,3,440,220,0,6118,439,1,0,0,0,6119,6123,5,547,0,
        0,6120,6123,3,442,221,0,6121,6123,3,446,223,0,6122,6119,1,0,0,0,
        6122,6120,1,0,0,0,6122,6121,1,0,0,0,6123,441,1,0,0,0,6124,6125,5,
        548,0,0,6125,443,1,0,0,0,6126,6128,5,520,0,0,6127,6126,1,0,0,0,6127,
        6128,1,0,0,0,6128,6129,1,0,0,0,6129,6135,5,543,0,0,6130,6132,5,520,
        0,0,6131,6130,1,0,0,0,6131,6132,1,0,0,0,6132,6133,1,0,0,0,6133,6135,
        7,63,0,0,6134,6127,1,0,0,0,6134,6131,1,0,0,0,6135,445,1,0,0,0,6136,
        6137,7,64,0,0,6137,447,1,0,0,0,872,451,459,463,468,473,479,487,491,
        496,510,513,521,524,532,539,546,555,562,569,573,575,578,582,601,
        620,628,635,638,642,645,647,650,654,658,666,673,677,679,682,694,
        708,716,723,730,735,761,774,776,780,785,787,790,798,804,807,812,
        817,819,840,843,846,852,859,862,867,870,876,880,883,891,894,897,
        900,906,911,914,925,930,933,936,943,946,951,954,957,961,967,971,
        977,980,984,989,997,999,1003,1006,1013,1018,1020,1022,1029,1032,
        1036,1040,1045,1051,1058,1062,1069,1075,1083,1085,1093,1104,1111,
        1120,1141,1148,1150,1164,1171,1178,1185,1193,1201,1209,1212,1216,
        1220,1232,1238,1241,1250,1254,1271,1279,1298,1302,1313,1336,1341,
        1344,1353,1368,1371,1375,1384,1396,1399,1408,1415,1423,1426,1429,
        1443,1448,1451,1465,1470,1473,1480,1482,1488,1493,1497,1500,1503,
        1512,1514,1522,1524,1541,1544,1551,1554,1558,1563,1566,1570,1575,
        1578,1582,1587,1591,1605,1611,1616,1622,1625,1636,1643,1650,1653,
        1658,1664,1667,1678,1685,1688,1691,1695,1699,1704,1707,1710,1713,
        1719,1722,1725,1728,1737,1741,1744,1747,1750,1761,1764,1767,1771,
        1777,1780,1783,1793,1796,1799,1802,1808,1811,1817,1823,1826,1830,
        1835,1838,1843,1846,1849,1855,1861,1868,1872,1875,1880,1883,1888,
        1892,1898,1906,1912,1915,1929,1932,1939,1946,1949,1956,1967,1969,
        1971,1978,1981,1984,1987,1993,1999,2007,2014,2020,2023,2026,2029,
        2036,2038,2046,2050,2057,2060,2063,2071,2080,2083,2097,2136,2143,
        2145,2153,2156,2160,2172,2184,2208,2216,2222,2226,2233,2241,2244,
        2250,2263,2270,2272,2277,2288,2294,2300,2303,2309,2312,2319,2321,
        2330,2340,2344,2357,2361,2371,2378,2384,2386,2399,2403,2409,2413,
        2419,2423,2428,2437,2471,2478,2485,2488,2494,2506,2519,2531,2540,
        2552,2559,2567,2569,2573,2576,2579,2582,2586,2589,2595,2601,2603,
        2607,2611,2614,2617,2620,2624,2628,2631,2634,2637,2639,2649,2663,
        2670,2678,2691,2705,2712,2720,2725,2729,2732,2739,2750,2763,2776,
        2790,2833,2850,2858,2864,2884,2890,2896,2898,2907,2911,2920,2930,
        2953,2964,2976,2985,2998,3002,3009,3012,3015,3021,3024,3027,3037,
        3042,3045,3051,3054,3060,3063,3066,3072,3075,3079,3084,3090,3097,
        3102,3104,3106,3109,3113,3118,3122,3127,3131,3136,3143,3152,3156,
        3159,3162,3169,3172,3197,3205,3214,3219,3221,3223,3239,3243,3253,
        3256,3258,3263,3275,3279,3285,3290,3295,3300,3308,3312,3318,3328,
        3338,3346,3355,3357,3364,3371,3374,3380,3383,3389,3393,3402,3406,
        3417,3424,3435,3441,3444,3465,3468,3483,3488,3491,3501,3505,3508,
        3514,3520,3523,3530,3542,3550,3557,3561,3568,3574,3578,3581,3585,
        3588,3594,3599,3606,3609,3613,3620,3625,3632,3643,3650,3655,3660,
        3672,3677,3684,3692,3700,3703,3707,3711,3717,3721,3729,3733,3741,
        3745,3753,3761,3768,3771,3778,3789,3793,3801,3805,3813,3820,3824,
        3826,3833,3840,3842,3849,3856,3860,3866,3871,3873,3881,3883,3890,
        3892,3896,3902,3904,3907,3914,3919,3924,3929,3933,3947,3952,3965,
        3967,3974,3982,3986,3991,3996,4001,4009,4018,4021,4026,4028,4034,
        4041,4055,4059,4064,4070,4076,4083,4086,4092,4098,4101,4107,4117,
        4121,4124,4126,4131,4136,4140,4146,4153,4165,4167,4181,4184,4189,
        4197,4200,4205,4210,4220,4227,4230,4233,4243,4252,4258,4264,4269,
        4274,4277,4280,4283,4286,4289,4292,4295,4298,4301,4304,4315,4318,
        4321,4324,4327,4329,4341,4348,4354,4358,4363,4370,4375,4384,4386,
        4392,4395,4399,4402,4405,4419,4448,4483,4485,4494,4498,4507,4513,
        4519,4522,4525,4528,4531,4539,4547,4550,4553,4564,4570,4573,4575,
        4586,4590,4593,4596,4599,4602,4605,4616,4621,4634,4641,4654,4659,
        4664,4668,4684,4691,4697,4701,4711,4719,4730,4735,4748,4751,4761,
        4764,4775,4785,4788,4796,4799,4811,4816,4825,4830,4835,4841,4843,
        4846,4852,4859,4871,4874,4884,4888,4891,4900,4905,4909,4921,4930,
        4934,4939,4943,4947,4957,4963,4974,4981,4987,4990,4993,4996,4999,
        5003,5006,5011,5021,5027,5036,5051,5060,5064,5067,5071,5073,5080,
        5088,5094,5101,5107,5110,5114,5121,5124,5127,5134,5136,5152,5154,
        5156,5165,5167,5171,5178,5185,5191,5198,5202,5209,5216,5222,5228,
        5236,5242,5259,5265,5276,5282,5284,5292,5304,5312,5315,5326,5337,
        5342,5345,5352,5357,5369,5375,5397,5401,5415,5417,5426,5429,5435,
        5438,5446,5451,5456,5464,5473,5480,5485,5488,5494,5515,5517,5557,
        5570,5583,5596,5611,5626,5630,5639,5643,5660,5669,5679,5684,5712,
        5716,5727,5735,5740,5752,5764,5766,5768,5781,5786,5788,5793,5800,
        5810,5813,5815,5820,5825,5845,5849,5852,5855,5868,5879,5886,5890,
        5895,5898,5902,5910,5915,5921,5930,5939,5949,5955,5974,5977,6005,
        6018,6022,6024,6058,6065,6072,6080,6085,6091,6103,6112,6115,6122,
        6127,6131,6134
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!DorisParser.__ATN) {
            DorisParser.__ATN = new antlr.ATNDeserializer().deserialize(DorisParser._serializedATN);
        }

        return DorisParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(DorisParser.literalNames, DorisParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return DorisParser.vocabulary;
    }

    private static readonly decisionsToDFA = DorisParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(DorisParser.EOF, 0)!;
    }
    public statement(): StatementContext[];
    public statement(i: number): StatementContext | null;
    public statement(i?: number): StatementContext[] | StatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }

        return this.getRuleContext(i, StatementContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_program;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultiStatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(DorisParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.SEMICOLON);
    	} else {
    		return this.getToken(DorisParser.SEMICOLON, i);
    	}
    }
    public statement(): StatementContext[];
    public statement(i: number): StatementContext | null;
    public statement(i?: number): StatementContext[] | StatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }

        return this.getRuleContext(i, StatementContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_multiStatements;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMultiStatements) {
             listener.enterMultiStatements(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMultiStatements) {
             listener.exitMultiStatements(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMultiStatements) {
            return visitor.visitMultiStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(DorisParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.SEMICOLON);
    	} else {
    		return this.getToken(DorisParser.SEMICOLON, i);
    	}
    }
    public statement(): StatementContext | null {
        return this.getRuleContext(0, StatementContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_singleStatement;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSingleStatement) {
             listener.enterSingleStatement(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSingleStatement) {
             listener.exitSingleStatement(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSingleStatement) {
            return visitor.visitSingleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_statement;
    }
    public override copyFrom(ctx: StatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowCreateProcedureContext extends StatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public PROCEDURE(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROCEDURE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateProcedure) {
             listener.enterShowCreateProcedure(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateProcedure) {
             listener.exitShowCreateProcedure(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateProcedure) {
            return visitor.visitShowCreateProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementBaseAliasContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public statementBase(): StatementBaseContext {
        return this.getRuleContext(0, StatementBaseContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterStatementBaseAlias) {
             listener.enterStatementBaseAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitStatementBaseAlias) {
             listener.exitStatementBaseAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitStatementBaseAlias) {
            return visitor.visitStatementBaseAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowProcedureStatusContext extends StatementContext {
    public _pattern?: ValueExpressionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public STATUS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATUS, 0)!;
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROCEDURE, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FUNCTION, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LIKE, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowProcedureStatus) {
             listener.enterShowProcedureStatus(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowProcedureStatus) {
             listener.exitShowProcedureStatus(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowProcedureStatus) {
            return visitor.visitShowProcedureStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateProcedureContext extends StatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROCEDURE, 0);
    }
    public PROC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROC, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALTER, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CREATE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPLACE, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OR, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateProcedure) {
             listener.enterCreateProcedure(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateProcedure) {
             listener.exitCreateProcedure(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateProcedure) {
            return visitor.visitCreateProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowConfigContext extends StatementContext {
    public _type_?: Token | null;
    public _pattern?: ValueExpressionContext;
    public _backendId?: Token | null;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CONFIG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CONFIG, 0)!;
    }
    public FRONTEND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FRONTEND, 0);
    }
    public BACKEND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BACKEND, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ADMIN, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LIKE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowConfig) {
             listener.enterShowConfig(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowConfig) {
             listener.exitShowConfig(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowConfig) {
            return visitor.visitShowConfig(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CallProcedureContext extends StatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CALL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CALL, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCallProcedure) {
             listener.enterCallProcedure(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCallProcedure) {
             listener.exitCallProcedure(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCallProcedure) {
            return visitor.visitCallProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropProcedureContext extends StatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROCEDURE, 0);
    }
    public PROC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROC, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropProcedure) {
             listener.enterDropProcedure(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropProcedure) {
             listener.exitDropProcedure(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropProcedure) {
            return visitor.visitDropProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementBaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_statementBase;
    }
    public override copyFrom(ctx: StatementBaseContext): void {
        super.copyFrom(ctx);
    }
}
export class SupportedSetStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedSetStatement(): SupportedSetStatementContext {
        return this.getRuleContext(0, SupportedSetStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedSetStatementAlias) {
             listener.enterSupportedSetStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedSetStatementAlias) {
             listener.exitSupportedSetStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedSetStatementAlias) {
            return visitor.visitSupportedSetStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedDmlStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedDmlStatement(): SupportedDmlStatementContext {
        return this.getRuleContext(0, SupportedDmlStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedDmlStatementAlias) {
             listener.enterSupportedDmlStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedDmlStatementAlias) {
             listener.exitSupportedDmlStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedDmlStatementAlias) {
            return visitor.visitSupportedDmlStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedLoadStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedLoadStatement(): SupportedLoadStatementContext {
        return this.getRuleContext(0, SupportedLoadStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedLoadStatementAlias) {
             listener.enterSupportedLoadStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedLoadStatementAlias) {
             listener.exitSupportedLoadStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedLoadStatementAlias) {
            return visitor.visitSupportedLoadStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConstraintStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public constraintStatement(): ConstraintStatementContext {
        return this.getRuleContext(0, ConstraintStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterConstraintStatementAlias) {
             listener.enterConstraintStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitConstraintStatementAlias) {
             listener.exitConstraintStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintStatementAlias) {
            return visitor.visitConstraintStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedAlterStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedAlterStatement(): SupportedAlterStatementContext {
        return this.getRuleContext(0, SupportedAlterStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedAlterStatementAlias) {
             listener.enterSupportedAlterStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedAlterStatementAlias) {
             listener.exitSupportedAlterStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedAlterStatementAlias) {
            return visitor.visitSupportedAlterStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedCleanStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedCleanStatement(): SupportedCleanStatementContext {
        return this.getRuleContext(0, SupportedCleanStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedCleanStatementAlias) {
             listener.enterSupportedCleanStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedCleanStatementAlias) {
             listener.exitSupportedCleanStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedCleanStatementAlias) {
            return visitor.visitSupportedCleanStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedRecoverStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedRecoverStatement(): SupportedRecoverStatementContext {
        return this.getRuleContext(0, SupportedRecoverStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedRecoverStatementAlias) {
             listener.enterSupportedRecoverStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedRecoverStatementAlias) {
             listener.exitSupportedRecoverStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedRecoverStatementAlias) {
            return visitor.visitSupportedRecoverStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedUnsetStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedUnsetStatement(): SupportedUnsetStatementContext {
        return this.getRuleContext(0, SupportedUnsetStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedUnsetStatementAlias) {
             listener.enterSupportedUnsetStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedUnsetStatementAlias) {
             listener.exitSupportedUnsetStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedUnsetStatementAlias) {
            return visitor.visitSupportedUnsetStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedJobStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedJobStatement(): SupportedJobStatementContext {
        return this.getRuleContext(0, SupportedJobStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedJobStatementAlias) {
             listener.enterSupportedJobStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedJobStatementAlias) {
             listener.exitSupportedJobStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedJobStatementAlias) {
            return visitor.visitSupportedJobStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnsupportedContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public unsupportedStatement(): UnsupportedStatementContext {
        return this.getRuleContext(0, UnsupportedStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUnsupported) {
             listener.enterUnsupported(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUnsupported) {
             listener.exitUnsupported(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUnsupported) {
            return visitor.visitUnsupported(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MaterializedViewStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public materializedViewStatement(): MaterializedViewStatementContext {
        return this.getRuleContext(0, MaterializedViewStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMaterializedViewStatementAlias) {
             listener.enterMaterializedViewStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMaterializedViewStatementAlias) {
             listener.exitMaterializedViewStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMaterializedViewStatementAlias) {
            return visitor.visitMaterializedViewStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementDefaultContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public explain(): ExplainContext | null {
        return this.getRuleContext(0, ExplainContext);
    }
    public outFileClause(): OutFileClauseContext | null {
        return this.getRuleContext(0, OutFileClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterStatementDefault) {
             listener.enterStatementDefault(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitStatementDefault) {
             listener.exitStatementDefault(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitStatementDefault) {
            return visitor.visitStatementDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedAdminStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedAdminStatement(): SupportedAdminStatementContext {
        return this.getRuleContext(0, SupportedAdminStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedAdminStatementAlias) {
             listener.enterSupportedAdminStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedAdminStatementAlias) {
             listener.exitSupportedAdminStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedAdminStatementAlias) {
            return visitor.visitSupportedAdminStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedDropStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedDropStatement(): SupportedDropStatementContext {
        return this.getRuleContext(0, SupportedDropStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedDropStatementAlias) {
             listener.enterSupportedDropStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedDropStatementAlias) {
             listener.exitSupportedDropStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedDropStatementAlias) {
            return visitor.visitSupportedDropStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedCancelStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedCancelStatement(): SupportedCancelStatementContext {
        return this.getRuleContext(0, SupportedCancelStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedCancelStatementAlias) {
             listener.enterSupportedCancelStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedCancelStatementAlias) {
             listener.exitSupportedCancelStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedCancelStatementAlias) {
            return visitor.visitSupportedCancelStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedCreateStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedCreateStatement(): SupportedCreateStatementContext {
        return this.getRuleContext(0, SupportedCreateStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedCreateStatementAlias) {
             listener.enterSupportedCreateStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedCreateStatementAlias) {
             listener.exitSupportedCreateStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedCreateStatementAlias) {
            return visitor.visitSupportedCreateStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedShowStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedShowStatement(): SupportedShowStatementContext {
        return this.getRuleContext(0, SupportedShowStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedShowStatementAlias) {
             listener.enterSupportedShowStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedShowStatementAlias) {
             listener.exitSupportedShowStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedShowStatementAlias) {
            return visitor.visitSupportedShowStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SupportedRefreshStatementAliasContext extends StatementBaseContext {
    public constructor(ctx: StatementBaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public supportedRefreshStatement(): SupportedRefreshStatementContext {
        return this.getRuleContext(0, SupportedRefreshStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedRefreshStatementAlias) {
             listener.enterSupportedRefreshStatementAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedRefreshStatementAlias) {
             listener.exitSupportedRefreshStatementAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedRefreshStatementAlias) {
            return visitor.visitSupportedRefreshStatementAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsupportedUseStatement(): UnsupportedUseStatementContext | null {
        return this.getRuleContext(0, UnsupportedUseStatementContext);
    }
    public unsupportedDmlStatement(): UnsupportedDmlStatementContext | null {
        return this.getRuleContext(0, UnsupportedDmlStatementContext);
    }
    public unsupportedKillStatement(): UnsupportedKillStatementContext | null {
        return this.getRuleContext(0, UnsupportedKillStatementContext);
    }
    public unsupportedDescribeStatement(): UnsupportedDescribeStatementContext | null {
        return this.getRuleContext(0, UnsupportedDescribeStatementContext);
    }
    public unsupportedCreateStatement(): UnsupportedCreateStatementContext | null {
        return this.getRuleContext(0, UnsupportedCreateStatementContext);
    }
    public unsupportedDropStatement(): UnsupportedDropStatementContext | null {
        return this.getRuleContext(0, UnsupportedDropStatementContext);
    }
    public unsupportedStatsStatement(): UnsupportedStatsStatementContext | null {
        return this.getRuleContext(0, UnsupportedStatsStatementContext);
    }
    public unsupportedAlterStatement(): UnsupportedAlterStatementContext | null {
        return this.getRuleContext(0, UnsupportedAlterStatementContext);
    }
    public unsupportedGrantRevokeStatement(): UnsupportedGrantRevokeStatementContext | null {
        return this.getRuleContext(0, UnsupportedGrantRevokeStatementContext);
    }
    public unsupportedAdminStatement(): UnsupportedAdminStatementContext | null {
        return this.getRuleContext(0, UnsupportedAdminStatementContext);
    }
    public unsupportedTransactionStatement(): UnsupportedTransactionStatementContext | null {
        return this.getRuleContext(0, UnsupportedTransactionStatementContext);
    }
    public unsupportedCancelStatement(): UnsupportedCancelStatementContext | null {
        return this.getRuleContext(0, UnsupportedCancelStatementContext);
    }
    public unsupportedCleanStatement(): UnsupportedCleanStatementContext | null {
        return this.getRuleContext(0, UnsupportedCleanStatementContext);
    }
    public unsupportedRefreshStatement(): UnsupportedRefreshStatementContext | null {
        return this.getRuleContext(0, UnsupportedRefreshStatementContext);
    }
    public unsupportedLoadStatement(): UnsupportedLoadStatementContext | null {
        return this.getRuleContext(0, UnsupportedLoadStatementContext);
    }
    public unsupportedShowStatement(): UnsupportedShowStatementContext | null {
        return this.getRuleContext(0, UnsupportedShowStatementContext);
    }
    public unsupportedOtherStatement(): UnsupportedOtherStatementContext | null {
        return this.getRuleContext(0, UnsupportedOtherStatementContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedStatement;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUnsupportedStatement) {
             listener.enterUnsupportedStatement(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUnsupportedStatement) {
             listener.exitUnsupportedStatement(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUnsupportedStatement) {
            return visitor.visitUnsupportedStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaterializedViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_materializedViewStatement;
    }
    public override copyFrom(ctx: MaterializedViewStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class RefreshMTMVContext extends MaterializedViewStatementContext {
    public _mvName?: MultipartIdentifierContext;
    public constructor(ctx: MaterializedViewStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REFRESH(): antlr.TerminalNode {
        return this.getToken(DorisParser.REFRESH, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(DorisParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public COMPLETE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMPLETE, 0);
    }
    public AUTO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTO, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRefreshMTMV) {
             listener.enterRefreshMTMV(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRefreshMTMV) {
             listener.exitRefreshMTMV(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshMTMV) {
            return visitor.visitRefreshMTMV(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterMTMVContext extends MaterializedViewStatementContext {
    public _mvName?: MultipartIdentifierContext;
    public _newName?: IdentifierContext;
    public _fileProperties?: PropertyItemListContext;
    public constructor(ctx: MaterializedViewStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode[];
    public MATERIALIZED(i: number): antlr.TerminalNode | null;
    public MATERIALIZED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.MATERIALIZED);
    	} else {
    		return this.getToken(DorisParser.MATERIALIZED, i);
    	}
    }
    public VIEW(): antlr.TerminalNode[];
    public VIEW(i: number): antlr.TerminalNode | null;
    public VIEW(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.VIEW);
    	} else {
    		return this.getToken(DorisParser.VIEW, i);
    	}
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPLACE, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WITH, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RENAME, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REFRESH, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SET, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public refreshMethod(): RefreshMethodContext | null {
        return this.getRuleContext(0, RefreshMethodContext);
    }
    public refreshTrigger(): RefreshTriggerContext | null {
        return this.getRuleContext(0, RefreshTriggerContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterMTMV) {
             listener.enterAlterMTMV(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterMTMV) {
             listener.exitAlterMTMV(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterMTMV) {
            return visitor.visitAlterMTMV(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateMTMVContext extends MaterializedViewStatementContext {
    public _mvName?: MultipartIdentifierContext;
    public _cols?: SimpleColumnDefsContext;
    public _keys?: IdentifierListContext;
    public _hashKeys?: IdentifierListContext;
    public constructor(ctx: MaterializedViewStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(DorisParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.LEFT_PAREN);
    	} else {
    		return this.getToken(DorisParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(DorisParser.RIGHT_PAREN, i);
    	}
    }
    public buildMode(): BuildModeContext | null {
        return this.getRuleContext(0, BuildModeContext);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REFRESH, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.KEY, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.BY);
    	} else {
    		return this.getToken(DorisParser.BY, i);
    	}
    }
    public mvPartition(): MvPartitionContext | null {
        return this.getRuleContext(0, MvPartitionContext);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DISTRIBUTED, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public simpleColumnDefs(): SimpleColumnDefsContext | null {
        return this.getRuleContext(0, SimpleColumnDefsContext);
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HASH, 0);
    }
    public RANDOM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RANDOM, 0);
    }
    public refreshMethod(): RefreshMethodContext | null {
        return this.getRuleContext(0, RefreshMethodContext);
    }
    public refreshTrigger(): RefreshTriggerContext | null {
        return this.getRuleContext(0, RefreshTriggerContext);
    }
    public DUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DUPLICATE, 0);
    }
    public BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BUCKETS, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public AUTO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTO, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateMTMV) {
             listener.enterCreateMTMV(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateMTMV) {
             listener.exitCreateMTMV(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMTMV) {
            return visitor.visitCreateMTMV(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResumeMTMVContext extends MaterializedViewStatementContext {
    public _mvName?: MultipartIdentifierContext;
    public constructor(ctx: MaterializedViewStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESUME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESUME, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(DorisParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterResumeMTMV) {
             listener.enterResumeMTMV(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitResumeMTMV) {
             listener.exitResumeMTMV(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitResumeMTMV) {
            return visitor.visitResumeMTMV(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateMTMVContext extends MaterializedViewStatementContext {
    public _mvName?: MultipartIdentifierContext;
    public constructor(ctx: MaterializedViewStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(DorisParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateMTMV) {
             listener.enterShowCreateMTMV(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateMTMV) {
             listener.exitShowCreateMTMV(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateMTMV) {
            return visitor.visitShowCreateMTMV(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CancelMTMVTaskContext extends MaterializedViewStatementContext {
    public _taskId?: Token | null;
    public _mvName?: MultipartIdentifierContext;
    public constructor(ctx: MaterializedViewStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(DorisParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public TASK(): antlr.TerminalNode {
        return this.getToken(DorisParser.TASK, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCancelMTMVTask) {
             listener.enterCancelMTMVTask(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCancelMTMVTask) {
             listener.exitCancelMTMVTask(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCancelMTMVTask) {
            return visitor.visitCancelMTMVTask(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PauseMTMVContext extends MaterializedViewStatementContext {
    public _mvName?: MultipartIdentifierContext;
    public constructor(ctx: MaterializedViewStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PAUSE(): antlr.TerminalNode {
        return this.getToken(DorisParser.PAUSE, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(DorisParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPauseMTMV) {
             listener.enterPauseMTMV(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPauseMTMV) {
             listener.exitPauseMTMV(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPauseMTMV) {
            return visitor.visitPauseMTMV(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropMTMVContext extends MaterializedViewStatementContext {
    public _mvName?: MultipartIdentifierContext;
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: MaterializedViewStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(DorisParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropMTMV) {
             listener.enterDropMTMV(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropMTMV) {
             listener.exitDropMTMV(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropMTMV) {
            return visitor.visitDropMTMV(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedJobStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedJobStatement;
    }
    public override copyFrom(ctx: SupportedJobStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CancelJobTaskContext extends SupportedJobStatementContext {
    public constructor(ctx: SupportedJobStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public TASK(): antlr.TerminalNode {
        return this.getToken(DorisParser.TASK, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCancelJobTask) {
             listener.enterCancelJobTask(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCancelJobTask) {
             listener.exitCancelJobTask(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCancelJobTask) {
            return visitor.visitCancelJobTask(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResumeJobContext extends SupportedJobStatementContext {
    public constructor(ctx: SupportedJobStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESUME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESUME, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterResumeJob) {
             listener.enterResumeJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitResumeJob) {
             listener.exitResumeJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitResumeJob) {
            return visitor.visitResumeJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropJobContext extends SupportedJobStatementContext {
    public constructor(ctx: SupportedJobStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropJob) {
             listener.enterDropJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropJob) {
             listener.exitDropJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropJob) {
            return visitor.visitDropJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateScheduledJobContext extends SupportedJobStatementContext {
    public _label?: MultipartIdentifierContext;
    public _timeInterval?: Token | null;
    public _timeUnit?: IdentifierContext;
    public _startTime?: Token | null;
    public _endsTime?: Token | null;
    public _atTime?: Token | null;
    public constructor(ctx: SupportedJobStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public SCHEDULE(): antlr.TerminalNode {
        return this.getToken(DorisParser.SCHEDULE, 0)!;
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(DorisParser.DO, 0)!;
    }
    public supportedDmlStatement(): SupportedDmlStatementContext {
        return this.getRuleContext(0, SupportedDmlStatementContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public EVERY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EVERY, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AT, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CURRENT_TIMESTAMP, 0);
    }
    public STARTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STARTS, 0);
    }
    public ENDS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ENDS, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateScheduledJob) {
             listener.enterCreateScheduledJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateScheduledJob) {
             listener.exitCreateScheduledJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateScheduledJob) {
            return visitor.visitCreateScheduledJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PauseJobContext extends SupportedJobStatementContext {
    public constructor(ctx: SupportedJobStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PAUSE(): antlr.TerminalNode {
        return this.getToken(DorisParser.PAUSE, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPauseJob) {
             listener.enterPauseJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPauseJob) {
             listener.exitPauseJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPauseJob) {
            return visitor.visitPauseJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_constraintStatement;
    }
    public override copyFrom(ctx: ConstraintStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowConstraintContext extends ConstraintStatementContext {
    public _table?: MultipartIdentifierContext;
    public constructor(ctx: ConstraintStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CONSTRAINTS(): antlr.TerminalNode {
        return this.getToken(DorisParser.CONSTRAINTS, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowConstraint) {
             listener.enterShowConstraint(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowConstraint) {
             listener.exitShowConstraint(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowConstraint) {
            return visitor.visitShowConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropConstraintContext extends ConstraintStatementContext {
    public _table?: MultipartIdentifierContext;
    public _constraintName?: ErrorCapturingIdentifierContext;
    public constructor(ctx: ConstraintStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(DorisParser.CONSTRAINT, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropConstraint) {
             listener.enterDropConstraint(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropConstraint) {
             listener.exitDropConstraint(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropConstraint) {
            return visitor.visitDropConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddConstraintContext extends ConstraintStatementContext {
    public _table?: MultipartIdentifierContext;
    public _constraintName?: ErrorCapturingIdentifierContext;
    public constructor(ctx: ConstraintStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(DorisParser.CONSTRAINT, 0)!;
    }
    public constraint(): ConstraintContext {
        return this.getRuleContext(0, ConstraintContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAddConstraint) {
             listener.enterAddConstraint(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAddConstraint) {
             listener.exitAddConstraint(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAddConstraint) {
            return visitor.visitAddConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedDmlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedDmlStatement;
    }
    public override copyFrom(ctx: SupportedDmlStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class InsertTableContext extends SupportedDmlStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _tableId?: Token | null;
    public _labelName?: IdentifierContext;
    public _cols?: IdentifierListContext;
    public _hints?: IdentifierSeqContext;
    public constructor(ctx: SupportedDmlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(DorisParser.INSERT, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTO, 0);
    }
    public OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OVERWRITE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TABLE, 0);
    }
    public DORIS_INTERNAL_TABLE_ID(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DORIS_INTERNAL_TABLE_ID, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public explain(): ExplainContext | null {
        return this.getRuleContext(0, ExplainContext);
    }
    public cte(): CteContext | null {
        return this.getRuleContext(0, CteContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WITH, 0);
    }
    public LABEL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LABEL, 0);
    }
    public LEFT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_BRACKET, 0);
    }
    public RIGHT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_BRACKET, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public identifierSeq(): IdentifierSeqContext | null {
        return this.getRuleContext(0, IdentifierSeqContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterInsertTable) {
             listener.enterInsertTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitInsertTable) {
             listener.exitInsertTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitInsertTable) {
            return visitor.visitInsertTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LoadContext extends SupportedDmlStatementContext {
    public _lableName?: MultipartIdentifierContext;
    public _dataDesc?: DataDescContext;
    public _dataDescs: DataDescContext[] = [];
    public constructor(ctx: SupportedDmlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public LABEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.LABEL, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public dataDesc(): DataDescContext[];
    public dataDesc(i: number): DataDescContext | null;
    public dataDesc(i?: number): DataDescContext[] | DataDescContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataDescContext);
        }

        return this.getRuleContext(i, DataDescContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public withRemoteStorageSystem(): WithRemoteStorageSystemContext | null {
        return this.getRuleContext(0, WithRemoteStorageSystemContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLoad) {
             listener.enterLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLoad) {
             listener.exitLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLoad) {
            return visitor.visitLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UpdateContext extends SupportedDmlStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: SupportedDmlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.UPDATE, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public updateAssignmentSeq(): UpdateAssignmentSeqContext {
        return this.getRuleContext(0, UpdateAssignmentSeqContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public explain(): ExplainContext | null {
        return this.getRuleContext(0, ExplainContext);
    }
    public cte(): CteContext | null {
        return this.getRuleContext(0, CteContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUpdate) {
             listener.enterUpdate(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUpdate) {
             listener.exitUpdate(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUpdate) {
            return visitor.visitUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReplayContext extends SupportedDmlStatementContext {
    public constructor(ctx: SupportedDmlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public replayCommand(): ReplayCommandContext {
        return this.getRuleContext(0, ReplayCommandContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterReplay) {
             listener.enterReplay(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitReplay) {
             listener.exitReplay(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitReplay) {
            return visitor.visitReplay(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeleteContext extends SupportedDmlStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: SupportedDmlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public explain(): ExplainContext | null {
        return this.getRuleContext(0, ExplainContext);
    }
    public cte(): CteContext | null {
        return this.getRuleContext(0, CteContext);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.USING, 0);
    }
    public relations(): RelationsContext | null {
        return this.getRuleContext(0, RelationsContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDelete) {
             listener.enterDelete(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDelete) {
             listener.exitDelete(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDelete) {
            return visitor.visitDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExportContext extends SupportedDmlStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _partition?: IdentifierListContext;
    public _filePath?: Token | null;
    public constructor(ctx: SupportedDmlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPORT(): antlr.TerminalNode {
        return this.getToken(DorisParser.EXPORT, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(DorisParser.TO, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITION, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public withRemoteStorageSystem(): WithRemoteStorageSystemContext | null {
        return this.getRuleContext(0, WithRemoteStorageSystemContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterExport) {
             listener.enterExport(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitExport) {
             listener.exitExport(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitExport) {
            return visitor.visitExport(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedCreateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedCreateStatement;
    }
    public override copyFrom(ctx: SupportedCreateStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateTableContext extends SupportedCreateStatementContext {
    public _name?: MultipartIdentifierContext;
    public _ctasCols?: IdentifierListContext;
    public _engine?: IdentifierContext;
    public _keys?: IdentifierListContext;
    public _clusterKeys?: IdentifierListContext;
    public _partition?: PartitionTableContext;
    public _hashKeys?: IdentifierListContext;
    public _autoBucket?: Token | null;
    public _properties?: PropertyClauseContext;
    public _extProperties?: PropertyClauseContext;
    public constructor(ctx: SupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXTERNAL, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ENGINE, 0);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EQ, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.KEY, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DISTRIBUTED, 0);
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.BY);
    	} else {
    		return this.getToken(DorisParser.BY, i);
    	}
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLLUP, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.LEFT_PAREN);
    	} else {
    		return this.getToken(DorisParser.LEFT_PAREN, i);
    	}
    }
    public rollupDefs(): RollupDefsContext | null {
        return this.getRuleContext(0, RollupDefsContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(DorisParser.RIGHT_PAREN, i);
    	}
    }
    public BROKER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BROKER, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AS, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public columnDefs(): ColumnDefsContext | null {
        return this.getRuleContext(0, ColumnDefsContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AGGREGATE, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UNIQUE, 0);
    }
    public DUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DUPLICATE, 0);
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public partitionTable(): PartitionTableContext | null {
        return this.getRuleContext(0, PartitionTableContext);
    }
    public propertyClause(): PropertyClauseContext[];
    public propertyClause(i: number): PropertyClauseContext | null;
    public propertyClause(i?: number): PropertyClauseContext[] | PropertyClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyClauseContext);
        }

        return this.getRuleContext(i, PropertyClauseContext);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HASH, 0);
    }
    public RANDOM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RANDOM, 0);
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CLUSTER, 0);
    }
    public BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BUCKETS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public indexDefs(): IndexDefsContext | null {
        return this.getRuleContext(0, IndexDefsContext);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public AUTO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTO, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableLikeContext extends SupportedCreateStatementContext {
    public _name?: MultipartIdentifierContext;
    public _existedTable?: MultipartIdentifierContext;
    public _rollupNames?: IdentifierListContext;
    public constructor(ctx: SupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public LIKE(): antlr.TerminalNode {
        return this.getToken(DorisParser.LIKE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXTERNAL, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WITH, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLLUP, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateTableLike) {
             listener.enterCreateTableLike(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateTableLike) {
             listener.exitCreateTableLike(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableLike) {
            return visitor.visitCreateTableLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateViewContext extends SupportedCreateStatementContext {
    public _name?: MultipartIdentifierContext;
    public _cols?: SimpleColumnDefsContext;
    public constructor(ctx: SupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public simpleColumnDefs(): SimpleColumnDefsContext | null {
        return this.getRuleContext(0, SimpleColumnDefsContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateRowPolicyContext extends SupportedCreateStatementContext {
    public _name?: IdentifierContext;
    public _table?: MultipartIdentifierContext;
    public _type_?: Token | null;
    public _user?: UserIdentifyContext;
    public _roleName?: IdentifierContext;
    public constructor(ctx: SupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public ROW(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROW, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(DorisParser.POLICY, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(DorisParser.TO, 0)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(DorisParser.USING, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RESTRICTIVE, 0);
    }
    public PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PERMISSIVE, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public userIdentify(): UserIdentifyContext | null {
        return this.getRuleContext(0, UserIdentifyContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateRowPolicy) {
             listener.enterCreateRowPolicy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateRowPolicy) {
             listener.exitCreateRowPolicy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRowPolicy) {
            return visitor.visitCreateRowPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedAlterStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedAlterStatement;
    }
    public override copyFrom(ctx: SupportedAlterStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterViewContext extends SupportedAlterStatementContext {
    public _name?: MultipartIdentifierContext;
    public _cols?: SimpleColumnDefsContext;
    public constructor(ctx: SupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public simpleColumnDefs(): SimpleColumnDefsContext | null {
        return this.getRuleContext(0, SimpleColumnDefsContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterView) {
             listener.enterAlterView(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterView) {
             listener.exitAlterView(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterView) {
            return visitor.visitAlterView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterStorageVaultContext extends SupportedAlterStatementContext {
    public _name?: MultipartIdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: SupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STORAGE, 0)!;
    }
    public VAULT(): antlr.TerminalNode {
        return this.getToken(DorisParser.VAULT, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public propertyClause(): PropertyClauseContext {
        return this.getRuleContext(0, PropertyClauseContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterStorageVault) {
             listener.enterAlterStorageVault(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterStorageVault) {
             listener.exitAlterStorageVault(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStorageVault) {
            return visitor.visitAlterStorageVault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterWorkloadGroupContext extends SupportedAlterStatementContext {
    public _name?: IdentifierOrTextContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: SupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public WORKLOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.WORKLOAD, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.GROUP, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterWorkloadGroup) {
             listener.enterAlterWorkloadGroup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterWorkloadGroup) {
             listener.exitAlterWorkloadGroup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterWorkloadGroup) {
            return visitor.visitAlterWorkloadGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterRoleContext extends SupportedAlterStatementContext {
    public _role?: IdentifierContext;
    public constructor(ctx: SupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROLE, 0)!;
    }
    public commentSpec(): CommentSpecContext {
        return this.getRuleContext(0, CommentSpecContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterRole) {
             listener.enterAlterRole(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterRole) {
             listener.exitAlterRole(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterRole) {
            return visitor.visitAlterRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterWorkloadPolicyContext extends SupportedAlterStatementContext {
    public _name?: IdentifierOrTextContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: SupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public WORKLOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.WORKLOAD, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(DorisParser.POLICY, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterWorkloadPolicy) {
             listener.enterAlterWorkloadPolicy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterWorkloadPolicy) {
             listener.exitAlterWorkloadPolicy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterWorkloadPolicy) {
            return visitor.visitAlterWorkloadPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedDropStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedDropStatement;
    }
    public override copyFrom(ctx: SupportedDropStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class DropEncryptkeyContext extends SupportedDropStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: SupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public ENCRYPTKEY(): antlr.TerminalNode {
        return this.getToken(DorisParser.ENCRYPTKEY, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropEncryptkey) {
             listener.enterDropEncryptkey(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropEncryptkey) {
             listener.exitDropEncryptkey(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropEncryptkey) {
            return visitor.visitDropEncryptkey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropRoleContext extends SupportedDropStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: SupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROLE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropRole) {
             listener.enterDropRole(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropRole) {
             listener.exitDropRole(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropRole) {
            return visitor.visitDropRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropUserContext extends SupportedDropStatementContext {
    public constructor(ctx: SupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(DorisParser.USER, 0)!;
    }
    public userIdentify(): UserIdentifyContext {
        return this.getRuleContext(0, UserIdentifyContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropUser) {
             listener.enterDropUser(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropUser) {
             listener.exitDropUser(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropUser) {
            return visitor.visitDropUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropWorkloadPolicyContext extends SupportedDropStatementContext {
    public _name?: IdentifierOrTextContext;
    public constructor(ctx: SupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public WORKLOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.WORKLOAD, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(DorisParser.POLICY, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropWorkloadPolicy) {
             listener.enterDropWorkloadPolicy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropWorkloadPolicy) {
             listener.exitDropWorkloadPolicy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropWorkloadPolicy) {
            return visitor.visitDropWorkloadPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropFileContext extends SupportedDropStatementContext {
    public _name?: Token | null;
    public _database?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: SupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public FILE(): antlr.TerminalNode {
        return this.getToken(DorisParser.FILE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public propertyClause(): PropertyClauseContext {
        return this.getRuleContext(0, PropertyClauseContext)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropFile) {
             listener.enterDropFile(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropFile) {
             listener.exitDropFile(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropFile) {
            return visitor.visitDropFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropWorkloadGroupContext extends SupportedDropStatementContext {
    public _name?: IdentifierOrTextContext;
    public constructor(ctx: SupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public WORKLOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.WORKLOAD, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.GROUP, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropWorkloadGroup) {
             listener.enterDropWorkloadGroup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropWorkloadGroup) {
             listener.exitDropWorkloadGroup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropWorkloadGroup) {
            return visitor.visitDropWorkloadGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropCatalogRecycleBinContext extends SupportedDropStatementContext {
    public _idType?: Token | null;
    public _id?: Token | null;
    public constructor(ctx: SupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOG, 0)!;
    }
    public RECYCLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RECYCLE, 0)!;
    }
    public BIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.BIN, 0)!;
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(DorisParser.WHERE, 0)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(DorisParser.EQ, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropCatalogRecycleBin) {
             listener.enterDropCatalogRecycleBin(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropCatalogRecycleBin) {
             listener.exitDropCatalogRecycleBin(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropCatalogRecycleBin) {
            return visitor.visitDropCatalogRecycleBin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropSqlBlockRuleContext extends SupportedDropStatementContext {
    public constructor(ctx: SupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public SQL_BLOCK_RULE(): antlr.TerminalNode {
        return this.getToken(DorisParser.SQL_BLOCK_RULE, 0)!;
    }
    public identifierSeq(): IdentifierSeqContext {
        return this.getRuleContext(0, IdentifierSeqContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropSqlBlockRule) {
             listener.enterDropSqlBlockRule(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropSqlBlockRule) {
             listener.exitDropSqlBlockRule(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropSqlBlockRule) {
            return visitor.visitDropSqlBlockRule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedShowStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedShowStatement;
    }
    public override copyFrom(ctx: SupportedShowStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowRepositoriesContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public REPOSITORIES(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPOSITORIES, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowRepositories) {
             listener.enterShowRepositories(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowRepositories) {
             listener.exitShowRepositories(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowRepositories) {
            return visitor.visitShowRepositories(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDynamicPartitionContext extends SupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public DYNAMIC(): antlr.TerminalNode {
        return this.getToken(DorisParser.DYNAMIC, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLES, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowDynamicPartition) {
             listener.enterShowDynamicPartition(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowDynamicPartition) {
             listener.exitShowDynamicPartition(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowDynamicPartition) {
            return visitor.visitShowDynamicPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowGrantsForUserContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public GRANTS(): antlr.TerminalNode {
        return this.getToken(DorisParser.GRANTS, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOR, 0)!;
    }
    public userIdentify(): UserIdentifyContext {
        return this.getRuleContext(0, UserIdentifyContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowGrantsForUser) {
             listener.enterShowGrantsForUser(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowGrantsForUser) {
             listener.exitShowGrantsForUser(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowGrantsForUser) {
            return visitor.visitShowGrantsForUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowViewContext extends SupportedShowStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _database?: IdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public FROM(): antlr.TerminalNode[];
    public FROM(i: number): antlr.TerminalNode | null;
    public FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.FROM);
    	} else {
    		return this.getToken(DorisParser.FROM, i);
    	}
    }
    public IN(): antlr.TerminalNode[];
    public IN(i: number): antlr.TerminalNode | null;
    public IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.IN);
    	} else {
    		return this.getToken(DorisParser.IN, i);
    	}
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowView) {
             listener.enterShowView(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowView) {
             listener.exitShowView(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowView) {
            return visitor.visitShowView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowFrontendsContext extends SupportedShowStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public FRONTENDS(): antlr.TerminalNode {
        return this.getToken(DorisParser.FRONTENDS, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowFrontends) {
             listener.enterShowFrontends(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowFrontends) {
             listener.exitShowFrontends(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowFrontends) {
            return visitor.visitShowFrontends(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowLoadProfileContext extends SupportedShowStatementContext {
    public _loadIdPath?: Token | null;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public PROFILE(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROFILE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowLoadProfile) {
             listener.enterShowLoadProfile(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowLoadProfile) {
             listener.exitShowLoadProfile(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowLoadProfile) {
            return visitor.visitShowLoadProfile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowPartitionIdContext extends SupportedShowStatementContext {
    public _partitionId?: Token | null;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowPartitionId) {
             listener.enterShowPartitionId(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowPartitionId) {
             listener.exitShowPartitionId(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowPartitionId) {
            return visitor.visitShowPartitionId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowAuthorsContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public AUTHORS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AUTHORS, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowAuthors) {
             listener.enterShowAuthors(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowAuthors) {
             listener.exitShowAuthors(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowAuthors) {
            return visitor.visitShowAuthors(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStorageEnginesContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ENGINES(): antlr.TerminalNode {
        return this.getToken(DorisParser.ENGINES, 0)!;
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STORAGE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowStorageEngines) {
             listener.enterShowStorageEngines(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowStorageEngines) {
             listener.exitShowStorageEngines(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowStorageEngines) {
            return visitor.visitShowStorageEngines(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRolesContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ROLES(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROLES, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowRoles) {
             listener.enterShowRoles(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowRoles) {
             listener.exitShowRoles(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoles) {
            return visitor.visitShowRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowBackendsContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public BACKENDS(): antlr.TerminalNode {
        return this.getToken(DorisParser.BACKENDS, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowBackends) {
             listener.enterShowBackends(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowBackends) {
             listener.exitShowBackends(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowBackends) {
            return visitor.visitShowBackends(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTabletsBelongContext extends SupportedShowStatementContext {
    public _INTEGER_VALUE?: Token | null;
    public _tabletIds: antlr.Token[] = [];
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLETS(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLETS, 0)!;
    }
    public BELONG(): antlr.TerminalNode {
        return this.getToken(DorisParser.BELONG, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(DorisParser.INTEGER_VALUE, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTabletsBelong) {
             listener.enterShowTabletsBelong(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTabletsBelong) {
             listener.exitShowTabletsBelong(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTabletsBelong) {
            return visitor.visitShowTabletsBelong(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTriggersContext extends SupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TRIGGERS(): antlr.TerminalNode {
        return this.getToken(DorisParser.TRIGGERS, 0)!;
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FULL, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTriggers) {
             listener.enterShowTriggers(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTriggers) {
             listener.exitShowTriggers(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTriggers) {
            return visitor.visitShowTriggers(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowPrivilegesContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public PRIVILEGES(): antlr.TerminalNode {
        return this.getToken(DorisParser.PRIVILEGES, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowPrivileges) {
             listener.enterShowPrivileges(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowPrivileges) {
             listener.exitShowPrivileges(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowPrivileges) {
            return visitor.visitShowPrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateTableContext extends SupportedShowStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public BRIEF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BRIEF, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateTable) {
             listener.enterShowCreateTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateTable) {
             listener.exitShowCreateTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTable) {
            return visitor.visitShowCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTableIdContext extends SupportedShowStatementContext {
    public _tableId?: Token | null;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTableId) {
             listener.enterShowTableId(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTableId) {
             listener.exitShowTableId(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTableId) {
            return visitor.visitShowTableId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowVariablesContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public VARIABLES(): antlr.TerminalNode {
        return this.getToken(DorisParser.VARIABLES, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowVariables) {
             listener.enterShowVariables(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowVariables) {
             listener.exitShowVariables(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowVariables) {
            return visitor.visitShowVariables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSmallFilesContext extends SupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public FILE(): antlr.TerminalNode {
        return this.getToken(DorisParser.FILE, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowSmallFiles) {
             listener.enterShowSmallFiles(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowSmallFiles) {
             listener.exitShowSmallFiles(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowSmallFiles) {
            return visitor.visitShowSmallFiles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowEventsContext extends SupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public EVENTS(): antlr.TerminalNode {
        return this.getToken(DorisParser.EVENTS, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowEvents) {
             listener.enterShowEvents(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowEvents) {
             listener.exitShowEvents(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowEvents) {
            return visitor.visitShowEvents(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowPluginsContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public PLUGINS(): antlr.TerminalNode {
        return this.getToken(DorisParser.PLUGINS, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowPlugins) {
             listener.enterShowPlugins(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowPlugins) {
             listener.exitShowPlugins(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowPlugins) {
            return visitor.visitShowPlugins(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSqlBlockRuleContext extends SupportedShowStatementContext {
    public _ruleName?: IdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public SQL_BLOCK_RULE(): antlr.TerminalNode {
        return this.getToken(DorisParser.SQL_BLOCK_RULE, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowSqlBlockRule) {
             listener.enterShowSqlBlockRule(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowSqlBlockRule) {
             listener.exitShowSqlBlockRule(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowSqlBlockRule) {
            return visitor.visitShowSqlBlockRule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowLastInsertContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public LAST(): antlr.TerminalNode {
        return this.getToken(DorisParser.LAST, 0)!;
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(DorisParser.INSERT, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowLastInsert) {
             listener.enterShowLastInsert(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowLastInsert) {
             listener.exitShowLastInsert(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowLastInsert) {
            return visitor.visitShowLastInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateCatalogContext extends SupportedShowStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOG, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateCatalog) {
             listener.enterShowCreateCatalog(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateCatalog) {
             listener.exitShowCreateCatalog(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateCatalog) {
            return visitor.visitShowCreateCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateMaterializedViewContext extends SupportedShowStatementContext {
    public _mvName?: IdentifierContext;
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(DorisParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateMaterializedView) {
             listener.enterShowCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateMaterializedView) {
             listener.exitShowCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateMaterializedView) {
            return visitor.visitShowCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDeleteContext extends SupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowDelete) {
             listener.enterShowDelete(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowDelete) {
             listener.exitShowDelete(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowDelete) {
            return visitor.visitShowDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDiagnoseTabletContext extends SupportedShowStatementContext {
    public _tabletId?: Token | null;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLET(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLET, 0)!;
    }
    public DIAGNOSIS(): antlr.TerminalNode {
        return this.getToken(DorisParser.DIAGNOSIS, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowDiagnoseTablet) {
             listener.enterShowDiagnoseTablet(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowDiagnoseTablet) {
             listener.exitShowDiagnoseTablet(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowDiagnoseTablet) {
            return visitor.visitShowDiagnoseTablet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowWhitelistContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public WHITELIST(): antlr.TerminalNode {
        return this.getToken(DorisParser.WHITELIST, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowWhitelist) {
             listener.enterShowWhitelist(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowWhitelist) {
             listener.exitShowWhitelist(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowWhitelist) {
            return visitor.visitShowWhitelist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowBrokerContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public BROKER(): antlr.TerminalNode {
        return this.getToken(DorisParser.BROKER, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowBroker) {
             listener.enterShowBroker(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowBroker) {
             listener.exitShowBroker(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowBroker) {
            return visitor.visitShowBroker(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowGrantsContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public GRANTS(): antlr.TerminalNode {
        return this.getToken(DorisParser.GRANTS, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowGrants) {
             listener.enterShowGrants(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowGrants) {
             listener.exitShowGrants(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowGrants) {
            return visitor.visitShowGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowReplicaDistributionContext extends SupportedShowStatementContext {
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public REPLICA(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPLICA, 0)!;
    }
    public DISTRIBUTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.DISTRIBUTION, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public baseTableRef(): BaseTableRefContext {
        return this.getRuleContext(0, BaseTableRefContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowReplicaDistribution) {
             listener.enterShowReplicaDistribution(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowReplicaDistribution) {
             listener.exitShowReplicaDistribution(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowReplicaDistribution) {
            return visitor.visitShowReplicaDistribution(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowProcContext extends SupportedShowStatementContext {
    public _path?: Token | null;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public PROC(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROC, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowProc) {
             listener.enterShowProc(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowProc) {
             listener.exitShowProc(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowProc) {
            return visitor.visitShowProc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateViewContext extends SupportedShowStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: SupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateView) {
             listener.enterShowCreateView(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateView) {
             listener.exitShowCreateView(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateView) {
            return visitor.visitShowCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedLoadStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedLoadStatement;
    }
    public override copyFrom(ctx: SupportedLoadStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateRoutineLoadAliasContext extends SupportedLoadStatementContext {
    public constructor(ctx: SupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public createRoutineLoad(): CreateRoutineLoadContext {
        return this.getRuleContext(0, CreateRoutineLoadContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateRoutineLoadAlias) {
             listener.enterCreateRoutineLoadAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateRoutineLoadAlias) {
             listener.exitCreateRoutineLoadAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRoutineLoadAlias) {
            return visitor.visitCreateRoutineLoadAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SyncContext extends SupportedLoadStatementContext {
    public constructor(ctx: SupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SYNC(): antlr.TerminalNode {
        return this.getToken(DorisParser.SYNC, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSync) {
             listener.enterSync(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSync) {
             listener.exitSync(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSync) {
            return visitor.visitSync(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedOtherStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedOtherStatement;
    }
    public override copyFrom(ctx: UnsupportedOtherStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class HelpContext extends UnsupportedOtherStatementContext {
    public _mark?: IdentifierOrTextContext;
    public constructor(ctx: UnsupportedOtherStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public HELP(): antlr.TerminalNode {
        return this.getToken(DorisParser.HELP, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterHelp) {
             listener.enterHelp(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitHelp) {
             listener.exitHelp(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitHelp) {
            return visitor.visitHelp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UninstallPluginContext extends UnsupportedOtherStatementContext {
    public _name?: IdentifierOrTextContext;
    public constructor(ctx: UnsupportedOtherStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNINSTALL(): antlr.TerminalNode {
        return this.getToken(DorisParser.UNINSTALL, 0)!;
    }
    public PLUGIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.PLUGIN, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUninstallPlugin) {
             listener.enterUninstallPlugin(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUninstallPlugin) {
             listener.exitUninstallPlugin(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUninstallPlugin) {
            return visitor.visitUninstallPlugin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnlockTablesContext extends UnsupportedOtherStatementContext {
    public constructor(ctx: UnsupportedOtherStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNLOCK(): antlr.TerminalNode {
        return this.getToken(DorisParser.UNLOCK, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLES, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUnlockTables) {
             listener.enterUnlockTables(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUnlockTables) {
             listener.exitUnlockTables(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUnlockTables) {
            return visitor.visitUnlockTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BackupContext extends UnsupportedOtherStatementContext {
    public _label?: MultipartIdentifierContext;
    public _repo?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedOtherStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BACKUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.BACKUP, 0)!;
    }
    public SNAPSHOT(): antlr.TerminalNode {
        return this.getToken(DorisParser.SNAPSHOT, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(DorisParser.TO, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public baseTableRef(): BaseTableRefContext[];
    public baseTableRef(i: number): BaseTableRefContext | null;
    public baseTableRef(i?: number): BaseTableRefContext[] | BaseTableRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BaseTableRefContext);
        }

        return this.getRuleContext(i, BaseTableRefContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXCLUDE, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterBackup) {
             listener.enterBackup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitBackup) {
             listener.exitBackup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitBackup) {
            return visitor.visitBackup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LockTablesContext extends UnsupportedOtherStatementContext {
    public constructor(ctx: UnsupportedOtherStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOCK(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOCK, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLES, 0)!;
    }
    public lockTable(): LockTableContext[];
    public lockTable(i: number): LockTableContext | null;
    public lockTable(i?: number): LockTableContext[] | LockTableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LockTableContext);
        }

        return this.getRuleContext(i, LockTableContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLockTables) {
             listener.enterLockTables(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLockTables) {
             listener.exitLockTables(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLockTables) {
            return visitor.visitLockTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RestoreContext extends UnsupportedOtherStatementContext {
    public _label?: MultipartIdentifierContext;
    public _repo?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedOtherStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESTORE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESTORE, 0)!;
    }
    public SNAPSHOT(): antlr.TerminalNode {
        return this.getToken(DorisParser.SNAPSHOT, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public baseTableRef(): BaseTableRefContext[];
    public baseTableRef(i: number): BaseTableRefContext | null;
    public baseTableRef(i?: number): BaseTableRefContext[] | BaseTableRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BaseTableRefContext);
        }

        return this.getRuleContext(i, BaseTableRefContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXCLUDE, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRestore) {
             listener.enterRestore(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRestore) {
             listener.exitRestore(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRestore) {
            return visitor.visitRestore(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InstallPluginContext extends UnsupportedOtherStatementContext {
    public _source?: IdentifierOrTextContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedOtherStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INSTALL(): antlr.TerminalNode {
        return this.getToken(DorisParser.INSTALL, 0)!;
    }
    public PLUGIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.PLUGIN, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterInstallPlugin) {
             listener.enterInstallPlugin(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitInstallPlugin) {
             listener.exitInstallPlugin(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitInstallPlugin) {
            return visitor.visitInstallPlugin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class WarmUpClusterContext extends UnsupportedOtherStatementContext {
    public _destination?: IdentifierContext;
    public _source?: IdentifierContext;
    public constructor(ctx: UnsupportedOtherStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WARM(): antlr.TerminalNode {
        return this.getToken(DorisParser.WARM, 0)!;
    }
    public UP(): antlr.TerminalNode {
        return this.getToken(DorisParser.UP, 0)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(DorisParser.WITH, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public CLUSTER(): antlr.TerminalNode[];
    public CLUSTER(i: number): antlr.TerminalNode | null;
    public CLUSTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.CLUSTER);
    	} else {
    		return this.getToken(DorisParser.CLUSTER, i);
    	}
    }
    public COMPUTE(): antlr.TerminalNode[];
    public COMPUTE(i: number): antlr.TerminalNode | null;
    public COMPUTE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMPUTE);
    	} else {
    		return this.getToken(DorisParser.COMPUTE, i);
    	}
    }
    public GROUP(): antlr.TerminalNode[];
    public GROUP(i: number): antlr.TerminalNode | null;
    public GROUP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.GROUP);
    	} else {
    		return this.getToken(DorisParser.GROUP, i);
    	}
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FORCE, 0);
    }
    public warmUpItem(): WarmUpItemContext[];
    public warmUpItem(i: number): WarmUpItemContext | null;
    public warmUpItem(i?: number): WarmUpItemContext[] | WarmUpItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WarmUpItemContext);
        }

        return this.getRuleContext(i, WarmUpItemContext);
    }
    public AND(): antlr.TerminalNode[];
    public AND(i: number): antlr.TerminalNode | null;
    public AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.AND);
    	} else {
    		return this.getToken(DorisParser.AND, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWarmUpCluster) {
             listener.enterWarmUpCluster(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWarmUpCluster) {
             listener.exitWarmUpCluster(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWarmUpCluster) {
            return visitor.visitWarmUpCluster(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnsupportedStartTransactionContext extends UnsupportedOtherStatementContext {
    public constructor(ctx: UnsupportedOtherStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public START(): antlr.TerminalNode {
        return this.getToken(DorisParser.START, 0)!;
    }
    public TRANSACTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.TRANSACTION, 0)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WITH, 0);
    }
    public CONSISTENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONSISTENT, 0);
    }
    public SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SNAPSHOT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUnsupportedStartTransaction) {
             listener.enterUnsupportedStartTransaction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUnsupportedStartTransaction) {
             listener.exitUnsupportedStartTransaction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUnsupportedStartTransaction) {
            return visitor.visitUnsupportedStartTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WarmUpItemContext extends antlr.ParserRuleContext {
    public _tableName?: MultipartIdentifierContext;
    public _partitionName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITION, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_warmUpItem;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWarmUpItem) {
             listener.enterWarmUpItem(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWarmUpItem) {
             listener.exitWarmUpItem(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWarmUpItem) {
            return visitor.visitWarmUpItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockTableContext extends antlr.ParserRuleContext {
    public _name?: MultipartIdentifierContext;
    public _alias?: IdentifierOrTextContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.READ, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WRITE, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AS, 0);
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public LOW_PRIORITY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOW_PRIORITY, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_lockTable;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLockTable) {
             listener.enterLockTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLockTable) {
             listener.exitLockTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLockTable) {
            return visitor.visitLockTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedShowStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedShowStatement;
    }
    public override copyFrom(ctx: UnsupportedShowStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowDataContext extends UnsupportedShowStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATA, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowData) {
             listener.enterShowData(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowData) {
             listener.exitShowData(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowData) {
            return visitor.visitShowData(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowIndexContext extends UnsupportedShowStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.KEY, 0);
    }
    public KEYS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.KEYS, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INDEX, 0);
    }
    public INDEXES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INDEXES, 0);
    }
    public FROM(): antlr.TerminalNode[];
    public FROM(i: number): antlr.TerminalNode | null;
    public FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.FROM);
    	} else {
    		return this.getToken(DorisParser.FROM, i);
    	}
    }
    public IN(): antlr.TerminalNode[];
    public IN(i: number): antlr.TerminalNode | null;
    public IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.IN);
    	} else {
    		return this.getToken(DorisParser.IN, i);
    	}
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowIndex) {
             listener.enterShowIndex(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowIndex) {
             listener.exitShowIndex(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowIndex) {
            return visitor.visitShowIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowWaringErrorsContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public WARNINGS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WARNINGS, 0);
    }
    public ERRORS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ERRORS, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowWaringErrors) {
             listener.enterShowWaringErrors(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowWaringErrors) {
             listener.exitShowWaringErrors(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowWaringErrors) {
            return visitor.visitShowWaringErrors(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTableStatusContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public STATUS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATUS, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTableStatus) {
             listener.enterShowTableStatus(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTableStatus) {
             listener.exitShowTableStatus(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTableStatus) {
            return visitor.visitShowTableStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowBackupContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public BACKUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.BACKUP, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowBackup) {
             listener.enterShowBackup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowBackup) {
             listener.exitShowBackup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowBackup) {
            return visitor.visitShowBackup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateFunctionContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.FUNCTION, 0)!;
    }
    public functionIdentifier(): FunctionIdentifierContext {
        return this.getRuleContext(0, FunctionIdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public functionArguments(): FunctionArgumentsContext | null {
        return this.getRuleContext(0, FunctionArgumentsContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateFunction) {
             listener.enterShowCreateFunction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateFunction) {
             listener.exitShowCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateFunction) {
            return visitor.visitShowCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCacheHotSpotContext extends UnsupportedShowStatementContext {
    public _tablePath?: Token | null;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CACHE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CACHE, 0)!;
    }
    public HOTSPOT(): antlr.TerminalNode {
        return this.getToken(DorisParser.HOTSPOT, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCacheHotSpot) {
             listener.enterShowCacheHotSpot(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCacheHotSpot) {
             listener.exitShowCacheHotSpot(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCacheHotSpot) {
            return visitor.visitShowCacheHotSpot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLES, 0)!;
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FULL, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTables) {
             listener.enterShowTables(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTables) {
             listener.exitShowTables(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTables) {
            return visitor.visitShowTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowMaterializedViewContext extends UnsupportedShowStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(DorisParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowMaterializedView) {
             listener.enterShowMaterializedView(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowMaterializedView) {
             listener.exitShowMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowMaterializedView) {
            return visitor.visitShowMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowExportContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public EXPORT(): antlr.TerminalNode {
        return this.getToken(DorisParser.EXPORT, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowExport) {
             listener.enterShowExport(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowExport) {
             listener.exitShowExport(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowExport) {
            return visitor.visitShowExport(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogsContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CATALOGS(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOGS, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCatalogs) {
             listener.enterShowCatalogs(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCatalogs) {
             listener.exitShowCatalogs(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCatalogs) {
            return visitor.visitShowCatalogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRowPolicyContext extends UnsupportedShowStatementContext {
    public _role?: IdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ROW(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROW, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(DorisParser.POLICY, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public userIdentify(): UserIdentifyContext | null {
        return this.getRuleContext(0, UserIdentifyContext);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowRowPolicy) {
             listener.enterShowRowPolicy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowRowPolicy) {
             listener.exitShowRowPolicy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowRowPolicy) {
            return visitor.visitShowRowPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogContext extends UnsupportedShowStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOG, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCatalog) {
             listener.enterShowCatalog(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCatalog) {
             listener.exitShowCatalog(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCatalog) {
            return visitor.visitShowCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnsContext extends UnsupportedShowStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COLUMNS, 0);
    }
    public FIELDS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FIELDS, 0);
    }
    public FROM(): antlr.TerminalNode[];
    public FROM(i: number): antlr.TerminalNode | null;
    public FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.FROM);
    	} else {
    		return this.getToken(DorisParser.FROM, i);
    	}
    }
    public IN(): antlr.TerminalNode[];
    public IN(i: number): antlr.TerminalNode | null;
    public IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.IN);
    	} else {
    		return this.getToken(DorisParser.IN, i);
    	}
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FULL, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowColumns) {
             listener.enterShowColumns(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowColumns) {
             listener.exitShowColumns(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowColumns) {
            return visitor.visitShowColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowBuildIndexContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public BUILD(): antlr.TerminalNode {
        return this.getToken(DorisParser.BUILD, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(DorisParser.INDEX, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowBuildIndex) {
             listener.enterShowBuildIndex(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowBuildIndex) {
             listener.exitShowBuildIndex(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowBuildIndex) {
            return visitor.visitShowBuildIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSyncJobContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public SYNC(): antlr.TerminalNode {
        return this.getToken(DorisParser.SYNC, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowSyncJob) {
             listener.enterShowSyncJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowSyncJob) {
             listener.exitShowSyncJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowSyncJob) {
            return visitor.visitShowSyncJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowAllPropertiesContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALL, 0)!;
    }
    public PROPERTIES(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROPERTIES, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowAllProperties) {
             listener.enterShowAllProperties(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowAllProperties) {
             listener.exitShowAllProperties(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowAllProperties) {
            return visitor.visitShowAllProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDataSkewContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATA, 0)!;
    }
    public SKEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SKEW, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public baseTableRef(): BaseTableRefContext {
        return this.getRuleContext(0, BaseTableRefContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowDataSkew) {
             listener.enterShowDataSkew(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowDataSkew) {
             listener.exitShowDataSkew(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowDataSkew) {
            return visitor.visitShowDataSkew(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowConvertLscContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CONVERT_LSC(): antlr.TerminalNode {
        return this.getToken(DorisParser.CONVERT_LSC, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowConvertLsc) {
             listener.enterShowConvertLsc(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowConvertLsc) {
             listener.exitShowConvertLsc(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowConvertLsc) {
            return visitor.visitShowConvertLsc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTableCreationContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public CREATION(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATION, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTableCreation) {
             listener.enterShowTableCreation(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTableCreation) {
             listener.exitShowTableCreation(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTableCreation) {
            return visitor.visitShowTableCreation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowReplicaStatusContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public REPLICA(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPLICA, 0)!;
    }
    public STATUS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATUS, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public baseTableRef(): BaseTableRefContext {
        return this.getRuleContext(0, BaseTableRefContext)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowReplicaStatus) {
             listener.enterShowReplicaStatus(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowReplicaStatus) {
             listener.exitShowReplicaStatus(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowReplicaStatus) {
            return visitor.visitShowReplicaStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTabletsFromTableContext extends UnsupportedShowStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLETS(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLETS, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTabletsFromTable) {
             listener.enterShowTabletsFromTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTabletsFromTable) {
             listener.exitShowTabletsFromTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTabletsFromTable) {
            return visitor.visitShowTabletsFromTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStagesContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public STAGES(): antlr.TerminalNode {
        return this.getToken(DorisParser.STAGES, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowStages) {
             listener.enterShowStages(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowStages) {
             listener.exitShowStages(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowStages) {
            return visitor.visitShowStages(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTransactionContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TRANSACTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.TRANSACTION, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTransaction) {
             listener.enterShowTransaction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTransaction) {
             listener.exitShowTransaction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTransaction) {
            return visitor.visitShowTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowResourcesContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public RESOURCES(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESOURCES, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowResources) {
             listener.enterShowResources(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowResources) {
             listener.exitShowResources(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowResources) {
            return visitor.visitShowResources(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowWorkloadGroupsContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public WORKLOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.WORKLOAD, 0)!;
    }
    public GROUPS(): antlr.TerminalNode {
        return this.getToken(DorisParser.GROUPS, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowWorkloadGroups) {
             listener.enterShowWorkloadGroups(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowWorkloadGroups) {
             listener.exitShowWorkloadGroups(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowWorkloadGroups) {
            return visitor.visitShowWorkloadGroups(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTabletStorageFormatContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLET(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLET, 0)!;
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STORAGE, 0)!;
    }
    public FORMAT(): antlr.TerminalNode {
        return this.getToken(DorisParser.FORMAT, 0)!;
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VERBOSE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTabletStorageFormat) {
             listener.enterShowTabletStorageFormat(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTabletStorageFormat) {
             listener.exitShowTabletStorageFormat(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTabletStorageFormat) {
            return visitor.visitShowTabletStorageFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCharsetContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CHARSET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHARSET, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHAR, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SET, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCharset) {
             listener.enterShowCharset(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCharset) {
             listener.exitShowCharset(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCharset) {
            return visitor.visitShowCharset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowOpenTablesContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public OPEN(): antlr.TerminalNode {
        return this.getToken(DorisParser.OPEN, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLES, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowOpenTables) {
             listener.enterShowOpenTables(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowOpenTables) {
             listener.exitShowOpenTables(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowOpenTables) {
            return visitor.visitShowOpenTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowQueryStatsContext extends UnsupportedShowStatementContext {
    public _database?: IdentifierContext;
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public QUERY(): antlr.TerminalNode {
        return this.getToken(DorisParser.QUERY, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VERBOSE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowQueryStats) {
             listener.enterShowQueryStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowQueryStats) {
             listener.exitShowQueryStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowQueryStats) {
            return visitor.visitShowQueryStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateDatabaseContext extends UnsupportedShowStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATABASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SCHEMA, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateDatabase) {
             listener.enterShowCreateDatabase(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateDatabase) {
             listener.exitShowCreateDatabase(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateDatabase) {
            return visitor.visitShowCreateDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowQueryProfileContext extends UnsupportedShowStatementContext {
    public _queryIdPath?: Token | null;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public QUERY(): antlr.TerminalNode {
        return this.getToken(DorisParser.QUERY, 0)!;
    }
    public PROFILE(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROFILE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowQueryProfile) {
             listener.enterShowQueryProfile(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowQueryProfile) {
             listener.exitShowQueryProfile(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowQueryProfile) {
            return visitor.visitShowQueryProfile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStoragePolicyContext extends UnsupportedShowStatementContext {
    public _policy?: IdentifierOrTextContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STORAGE, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(DorisParser.POLICY, 0)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.USING, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowStoragePolicy) {
             listener.enterShowStoragePolicy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowStoragePolicy) {
             listener.exitShowStoragePolicy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowStoragePolicy) {
            return visitor.visitShowStoragePolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowLoadContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STREAM, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowLoad) {
             listener.enterShowLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowLoad) {
             listener.exitShowLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowLoad) {
            return visitor.visitShowLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowEncryptKeysContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ENCRYPTKEYS(): antlr.TerminalNode {
        return this.getToken(DorisParser.ENCRYPTKEYS, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowEncryptKeys) {
             listener.enterShowEncryptKeys(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowEncryptKeys) {
             listener.exitShowEncryptKeys(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowEncryptKeys) {
            return visitor.visitShowEncryptKeys(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowClustersContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CLUSTERS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CLUSTERS, 0);
    }
    public COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMPUTE, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GROUPS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowClusters) {
             listener.enterShowClusters(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowClusters) {
             listener.exitShowClusters(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowClusters) {
            return visitor.visitShowClusters(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTrashContext extends UnsupportedShowStatementContext {
    public _backend?: Token | null;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TRASH(): antlr.TerminalNode {
        return this.getToken(DorisParser.TRASH, 0)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTrash) {
             listener.enterShowTrash(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTrash) {
             listener.exitShowTrash(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTrash) {
            return visitor.visitShowTrash(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowPartitionsContext extends UnsupportedShowStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public PARTITIONS(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITIONS, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TEMPORARY, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowPartitions) {
             listener.enterShowPartitions(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowPartitions) {
             listener.exitShowPartitions(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowPartitions) {
            return visitor.visitShowPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowGlobalFunctionsContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public GLOBAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.GLOBAL, 0)!;
    }
    public FUNCTIONS(): antlr.TerminalNode {
        return this.getToken(DorisParser.FUNCTIONS, 0)!;
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FULL, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowGlobalFunctions) {
             listener.enterShowGlobalFunctions(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowGlobalFunctions) {
             listener.exitShowGlobalFunctions(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowGlobalFunctions) {
            return visitor.visitShowGlobalFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSnapshotContext extends UnsupportedShowStatementContext {
    public _repo?: IdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public SNAPSHOT(): antlr.TerminalNode {
        return this.getToken(DorisParser.SNAPSHOT, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowSnapshot) {
             listener.enterShowSnapshot(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowSnapshot) {
             listener.exitShowSnapshot(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowSnapshot) {
            return visitor.visitShowSnapshot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogRecycleBinContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOG, 0)!;
    }
    public RECYCLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RECYCLE, 0)!;
    }
    public BIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.BIN, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCatalogRecycleBin) {
             listener.enterShowCatalogRecycleBin(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCatalogRecycleBin) {
             listener.exitShowCatalogRecycleBin(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCatalogRecycleBin) {
            return visitor.visitShowCatalogRecycleBin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCopyContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public COPY(): antlr.TerminalNode {
        return this.getToken(DorisParser.COPY, 0)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCopy) {
             listener.enterShowCopy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCopy) {
             listener.exitShowCopy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCopy) {
            return visitor.visitShowCopy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCollationContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public COLLATION(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLLATION, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCollation) {
             listener.enterShowCollation(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCollation) {
             listener.exitShowCollation(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCollation) {
            return visitor.visitShowCollation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTypeCastContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TYPECAST(): antlr.TerminalNode {
        return this.getToken(DorisParser.TYPECAST, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTypeCast) {
             listener.enterShowTypeCast(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTypeCast) {
             listener.exitShowTypeCast(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTypeCast) {
            return visitor.visitShowTypeCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRestoreContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public RESTORE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESTORE, 0)!;
    }
    public BRIEF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BRIEF, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowRestore) {
             listener.enterShowRestore(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowRestore) {
             listener.exitShowRestore(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowRestore) {
            return visitor.visitShowRestore(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowLoadWaringsContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public _url?: Token | null;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public WARNINGS(): antlr.TerminalNode {
        return this.getToken(DorisParser.WARNINGS, 0)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowLoadWarings) {
             listener.enterShowLoadWarings(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowLoadWarings) {
             listener.exitShowLoadWarings(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowLoadWarings) {
            return visitor.visitShowLoadWarings(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowAlterTableContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLLUP, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COLUMN, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATERIALIZED, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VIEW, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowAlterTable) {
             listener.enterShowAlterTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowAlterTable) {
             listener.exitShowAlterTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowAlterTable) {
            return visitor.visitShowAlterTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowWaringErrorCountContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public COUNT(): antlr.TerminalNode {
        return this.getToken(DorisParser.COUNT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(DorisParser.ASTERISK, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public WARNINGS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WARNINGS, 0);
    }
    public ERRORS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ERRORS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowWaringErrorCount) {
             listener.enterShowWaringErrorCount(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowWaringErrorCount) {
             listener.exitShowWaringErrorCount(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowWaringErrorCount) {
            return visitor.visitShowWaringErrorCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDatabasesContext extends UnsupportedShowStatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATABASES, 0);
    }
    public SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SCHEMAS, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowDatabases) {
             listener.enterShowDatabases(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowDatabases) {
             listener.exitShowDatabases(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowDatabases) {
            return visitor.visitShowDatabases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTabletIdContext extends UnsupportedShowStatementContext {
    public _tabletId?: Token | null;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLET(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLET, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTabletId) {
             listener.enterShowTabletId(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTabletId) {
             listener.exitShowTabletId(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTabletId) {
            return visitor.visitShowTabletId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStorageVaultContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STORAGE, 0)!;
    }
    public VAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VAULT, 0);
    }
    public VAULTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VAULTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowStorageVault) {
             listener.enterShowStorageVault(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowStorageVault) {
             listener.exitShowStorageVault(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowStorageVault) {
            return visitor.visitShowStorageVault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatusContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public STATUS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATUS, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowStatus) {
             listener.enterShowStatus(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowStatus) {
             listener.exitShowStatus(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowStatus) {
            return visitor.visitShowStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowUserPropertiesContext extends UnsupportedShowStatementContext {
    public _user?: IdentifierOrTextContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public PROPERTY(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROPERTY, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowUserProperties) {
             listener.enterShowUserProperties(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowUserProperties) {
             listener.exitShowUserProperties(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowUserProperties) {
            return visitor.visitShowUserProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowWarmUpJobContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public WARM(): antlr.TerminalNode {
        return this.getToken(DorisParser.WARM, 0)!;
    }
    public UP(): antlr.TerminalNode {
        return this.getToken(DorisParser.UP, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowWarmUpJob) {
             listener.enterShowWarmUpJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowWarmUpJob) {
             listener.exitShowWarmUpJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowWarmUpJob) {
            return visitor.visitShowWarmUpJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowProcessListContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public PROCESSLIST(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROCESSLIST, 0)!;
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FULL, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowProcessList) {
             listener.enterShowProcessList(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowProcessList) {
             listener.exitShowProcessList(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowProcessList) {
            return visitor.visitShowProcessList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDataTypesContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATA, 0)!;
    }
    public TYPES(): antlr.TerminalNode {
        return this.getToken(DorisParser.TYPES, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowDataTypes) {
             listener.enterShowDataTypes(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowDataTypes) {
             listener.exitShowDataTypes(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowDataTypes) {
            return visitor.visitShowDataTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowViewsContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public VIEWS(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEWS, 0)!;
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FULL, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowViews) {
             listener.enterShowViews(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowViews) {
             listener.exitShowViews(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowViews) {
            return visitor.visitShowViews(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowFunctionsContext extends UnsupportedShowStatementContext {
    public _database?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public FUNCTIONS(): antlr.TerminalNode {
        return this.getToken(DorisParser.FUNCTIONS, 0)!;
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FULL, 0);
    }
    public BUILTIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BUILTIN, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowFunctions) {
             listener.enterShowFunctions(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowFunctions) {
             listener.exitShowFunctions(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowFunctions) {
            return visitor.visitShowFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDatabaseIdContext extends UnsupportedShowStatementContext {
    public _databaseId?: Token | null;
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATABASE, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowDatabaseId) {
             listener.enterShowDatabaseId(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowDatabaseId) {
             listener.exitShowDatabaseId(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowDatabaseId) {
            return visitor.visitShowDatabaseId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateRepositoryContext extends UnsupportedShowStatementContext {
    public constructor(ctx: UnsupportedShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public REPOSITORY(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPOSITORY, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOR, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateRepository) {
             listener.enterShowCreateRepository(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateRepository) {
             listener.exitShowCreateRepository(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateRepository) {
            return visitor.visitShowCreateRepository(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoutineLoadContext extends antlr.ParserRuleContext {
    public _label?: MultipartIdentifierContext;
    public _table?: IdentifierContext;
    public _type_?: IdentifierContext;
    public _customProperties?: PropertyItemListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public ROUTINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROUTINE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WITH, 0);
    }
    public loadProperty(): LoadPropertyContext[];
    public loadProperty(i: number): LoadPropertyContext | null;
    public loadProperty(i?: number): LoadPropertyContext[] | LoadPropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LoadPropertyContext);
        }

        return this.getRuleContext(i, LoadPropertyContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public APPEND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.APPEND, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DELETE, 0);
    }
    public MERGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MERGE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_createRoutineLoad;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateRoutineLoad) {
             listener.enterCreateRoutineLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateRoutineLoad) {
             listener.exitCreateRoutineLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRoutineLoad) {
            return visitor.visitCreateRoutineLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedLoadStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedLoadStatement;
    }
    public override copyFrom(ctx: UnsupportedLoadStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowRoutineLoadContext extends UnsupportedLoadStatementContext {
    public _label?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ROUTINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROUTINE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowRoutineLoad) {
             listener.enterShowRoutineLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowRoutineLoad) {
             listener.exitShowRoutineLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoutineLoad) {
            return visitor.visitShowRoutineLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResumeRoutineLoadContext extends UnsupportedLoadStatementContext {
    public _label?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESUME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESUME, 0)!;
    }
    public ROUTINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROUTINE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOR, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterResumeRoutineLoad) {
             listener.enterResumeRoutineLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitResumeRoutineLoad) {
             listener.exitResumeRoutineLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitResumeRoutineLoad) {
            return visitor.visitResumeRoutineLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateLoadContext extends UnsupportedLoadStatementContext {
    public _label?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOR, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateLoad) {
             listener.enterShowCreateLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateLoad) {
             listener.exitShowCreateLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateLoad) {
            return visitor.visitShowCreateLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateDataSyncJobContext extends UnsupportedLoadStatementContext {
    public _label?: MultipartIdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public SYNC(): antlr.TerminalNode {
        return this.getToken(DorisParser.SYNC, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.LEFT_PAREN);
    	} else {
    		return this.getToken(DorisParser.LEFT_PAREN, i);
    	}
    }
    public channelDescriptions(): ChannelDescriptionsContext {
        return this.getRuleContext(0, ChannelDescriptionsContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(DorisParser.RIGHT_PAREN, i);
    	}
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public BINLOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.BINLOG, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateDataSyncJob) {
             listener.enterCreateDataSyncJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateDataSyncJob) {
             listener.exitCreateDataSyncJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDataSyncJob) {
            return visitor.visitCreateDataSyncJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PauseDataSyncJobContext extends UnsupportedLoadStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PAUSE(): antlr.TerminalNode {
        return this.getToken(DorisParser.PAUSE, 0)!;
    }
    public SYNC(): antlr.TerminalNode {
        return this.getToken(DorisParser.SYNC, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPauseDataSyncJob) {
             listener.enterPauseDataSyncJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPauseDataSyncJob) {
             listener.exitPauseDataSyncJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPauseDataSyncJob) {
            return visitor.visitPauseDataSyncJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResumeDataSyncJobContext extends UnsupportedLoadStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESUME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESUME, 0)!;
    }
    public SYNC(): antlr.TerminalNode {
        return this.getToken(DorisParser.SYNC, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterResumeDataSyncJob) {
             listener.enterResumeDataSyncJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitResumeDataSyncJob) {
             listener.exitResumeDataSyncJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitResumeDataSyncJob) {
            return visitor.visitResumeDataSyncJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PauseAllRoutineLoadContext extends UnsupportedLoadStatementContext {
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PAUSE(): antlr.TerminalNode {
        return this.getToken(DorisParser.PAUSE, 0)!;
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALL, 0)!;
    }
    public ROUTINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROUTINE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPauseAllRoutineLoad) {
             listener.enterPauseAllRoutineLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPauseAllRoutineLoad) {
             listener.exitPauseAllRoutineLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPauseAllRoutineLoad) {
            return visitor.visitPauseAllRoutineLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StopDataSyncJobContext extends UnsupportedLoadStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STOP(): antlr.TerminalNode {
        return this.getToken(DorisParser.STOP, 0)!;
    }
    public SYNC(): antlr.TerminalNode {
        return this.getToken(DorisParser.SYNC, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterStopDataSyncJob) {
             listener.enterStopDataSyncJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitStopDataSyncJob) {
             listener.exitStopDataSyncJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitStopDataSyncJob) {
            return visitor.visitStopDataSyncJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MysqlLoadContext extends UnsupportedLoadStatementContext {
    public _properties?: PropertyItemListContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public mysqlDataDesc(): MysqlDataDescContext {
        return this.getRuleContext(0, MysqlDataDescContext)!;
    }
    public PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROPERTIES, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMysqlLoad) {
             listener.enterMysqlLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMysqlLoad) {
             listener.exitMysqlLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMysqlLoad) {
            return visitor.visitMysqlLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateRoutineLoadContext extends UnsupportedLoadStatementContext {
    public _label?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public ROUTINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROUTINE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOR, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowCreateRoutineLoad) {
             listener.enterShowCreateRoutineLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowCreateRoutineLoad) {
             listener.exitShowCreateRoutineLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateRoutineLoad) {
            return visitor.visitShowCreateRoutineLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PauseRoutineLoadContext extends UnsupportedLoadStatementContext {
    public _label?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PAUSE(): antlr.TerminalNode {
        return this.getToken(DorisParser.PAUSE, 0)!;
    }
    public ROUTINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROUTINE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOR, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPauseRoutineLoad) {
             listener.enterPauseRoutineLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPauseRoutineLoad) {
             listener.exitPauseRoutineLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPauseRoutineLoad) {
            return visitor.visitPauseRoutineLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRoutineLoadTaskContext extends UnsupportedLoadStatementContext {
    public _database?: IdentifierContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ROUTINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROUTINE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public TASK(): antlr.TerminalNode {
        return this.getToken(DorisParser.TASK, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowRoutineLoadTask) {
             listener.enterShowRoutineLoadTask(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowRoutineLoadTask) {
             listener.exitShowRoutineLoadTask(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoutineLoadTask) {
            return visitor.visitShowRoutineLoadTask(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResumeAllRoutineLoadContext extends UnsupportedLoadStatementContext {
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESUME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESUME, 0)!;
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALL, 0)!;
    }
    public ROUTINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROUTINE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterResumeAllRoutineLoad) {
             listener.enterResumeAllRoutineLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitResumeAllRoutineLoad) {
             listener.exitResumeAllRoutineLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitResumeAllRoutineLoad) {
            return visitor.visitResumeAllRoutineLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StopRoutineLoadContext extends UnsupportedLoadStatementContext {
    public _label?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedLoadStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STOP(): antlr.TerminalNode {
        return this.getToken(DorisParser.STOP, 0)!;
    }
    public ROUTINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROUTINE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOR, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterStopRoutineLoad) {
             listener.enterStopRoutineLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitStopRoutineLoad) {
             listener.exitStopRoutineLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitStopRoutineLoad) {
            return visitor.visitStopRoutineLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadPropertyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_loadProperty;
    }
    public override copyFrom(ctx: LoadPropertyContext): void {
        super.copyFrom(ctx);
    }
}
export class ImportPrecedingFilterContext extends LoadPropertyContext {
    public constructor(ctx: LoadPropertyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public importPrecedingFilterStatement(): ImportPrecedingFilterStatementContext {
        return this.getRuleContext(0, ImportPrecedingFilterStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportPrecedingFilter) {
             listener.enterImportPrecedingFilter(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportPrecedingFilter) {
             listener.exitImportPrecedingFilter(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportPrecedingFilter) {
            return visitor.visitImportPrecedingFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ImportSequenceContext extends LoadPropertyContext {
    public constructor(ctx: LoadPropertyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public importSequenceStatement(): ImportSequenceStatementContext {
        return this.getRuleContext(0, ImportSequenceStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportSequence) {
             listener.enterImportSequence(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportSequence) {
             listener.exitImportSequence(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportSequence) {
            return visitor.visitImportSequence(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ImportColumnsContext extends LoadPropertyContext {
    public constructor(ctx: LoadPropertyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public importColumnsStatement(): ImportColumnsStatementContext {
        return this.getRuleContext(0, ImportColumnsStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportColumns) {
             listener.enterImportColumns(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportColumns) {
             listener.exitImportColumns(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportColumns) {
            return visitor.visitImportColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ImportWhereContext extends LoadPropertyContext {
    public constructor(ctx: LoadPropertyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public importWhereStatement(): ImportWhereStatementContext {
        return this.getRuleContext(0, ImportWhereStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportWhere) {
             listener.enterImportWhere(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportWhere) {
             listener.exitImportWhere(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportWhere) {
            return visitor.visitImportWhere(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SeparatorContext extends LoadPropertyContext {
    public constructor(ctx: LoadPropertyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COLUMNS(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMNS, 0)!;
    }
    public TERMINATED(): antlr.TerminalNode {
        return this.getToken(DorisParser.TERMINATED, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(DorisParser.BY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSeparator) {
             listener.enterSeparator(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSeparator) {
             listener.exitSeparator(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSeparator) {
            return visitor.visitSeparator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ImportPartitionsContext extends LoadPropertyContext {
    public constructor(ctx: LoadPropertyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public partitionSpec(): PartitionSpecContext {
        return this.getRuleContext(0, PartitionSpecContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportPartitions) {
             listener.enterImportPartitions(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportPartitions) {
             listener.exitImportPartitions(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportPartitions) {
            return visitor.visitImportPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ImportDeleteOnContext extends LoadPropertyContext {
    public constructor(ctx: LoadPropertyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public importDeleteOnStatement(): ImportDeleteOnStatementContext {
        return this.getRuleContext(0, ImportDeleteOnStatementContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportDeleteOn) {
             listener.enterImportDeleteOn(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportDeleteOn) {
             listener.exitImportDeleteOn(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportDeleteOn) {
            return visitor.visitImportDeleteOn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportSequenceStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(DorisParser.BY, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_importSequenceStatement;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportSequenceStatement) {
             listener.enterImportSequenceStatement(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportSequenceStatement) {
             listener.exitImportSequenceStatement(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportSequenceStatement) {
            return visitor.visitImportSequenceStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportDeleteOnStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DELETE, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_importDeleteOnStatement;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportDeleteOnStatement) {
             listener.enterImportDeleteOnStatement(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportDeleteOnStatement) {
             listener.exitImportDeleteOnStatement(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportDeleteOnStatement) {
            return visitor.visitImportDeleteOnStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportWhereStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(DorisParser.WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_importWhereStatement;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportWhereStatement) {
             listener.enterImportWhereStatement(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportWhereStatement) {
             listener.exitImportWhereStatement(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportWhereStatement) {
            return visitor.visitImportWhereStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportPrecedingFilterStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRECEDING(): antlr.TerminalNode {
        return this.getToken(DorisParser.PRECEDING, 0)!;
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.FILTER, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_importPrecedingFilterStatement;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportPrecedingFilterStatement) {
             listener.enterImportPrecedingFilterStatement(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportPrecedingFilterStatement) {
             listener.exitImportPrecedingFilterStatement(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportPrecedingFilterStatement) {
            return visitor.visitImportPrecedingFilterStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportColumnsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMNS(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMNS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public importColumnDesc(): ImportColumnDescContext[];
    public importColumnDesc(i: number): ImportColumnDescContext | null;
    public importColumnDesc(i?: number): ImportColumnDescContext[] | ImportColumnDescContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ImportColumnDescContext);
        }

        return this.getRuleContext(i, ImportColumnDescContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_importColumnsStatement;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportColumnsStatement) {
             listener.enterImportColumnsStatement(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportColumnsStatement) {
             listener.exitImportColumnsStatement(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportColumnsStatement) {
            return visitor.visitImportColumnsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportColumnDescContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EQ, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_importColumnDesc;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterImportColumnDesc) {
             listener.enterImportColumnDesc(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitImportColumnDesc) {
             listener.exitImportColumnDesc(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitImportColumnDesc) {
            return visitor.visitImportColumnDesc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChannelDescriptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public channelDescription(): ChannelDescriptionContext[];
    public channelDescription(i: number): ChannelDescriptionContext | null;
    public channelDescription(i?: number): ChannelDescriptionContext[] | ChannelDescriptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ChannelDescriptionContext);
        }

        return this.getRuleContext(i, ChannelDescriptionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_channelDescriptions;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterChannelDescriptions) {
             listener.enterChannelDescriptions(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitChannelDescriptions) {
             listener.exitChannelDescriptions(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitChannelDescriptions) {
            return visitor.visitChannelDescriptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChannelDescriptionContext extends antlr.ParserRuleContext {
    public _source?: MultipartIdentifierContext;
    public _destination?: MultipartIdentifierContext;
    public _columnList?: IdentifierListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTO, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_channelDescription;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterChannelDescription) {
             listener.enterChannelDescription(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitChannelDescription) {
             listener.exitChannelDescription(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitChannelDescription) {
            return visitor.visitChannelDescription(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedRefreshStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedRefreshStatement;
    }
    public override copyFrom(ctx: SupportedRefreshStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class RefreshCatalogContext extends SupportedRefreshStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: SupportedRefreshStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REFRESH(): antlr.TerminalNode {
        return this.getToken(DorisParser.REFRESH, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOG, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRefreshCatalog) {
             listener.enterRefreshCatalog(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRefreshCatalog) {
             listener.exitRefreshCatalog(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshCatalog) {
            return visitor.visitRefreshCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedCleanStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedCleanStatement;
    }
    public override copyFrom(ctx: SupportedCleanStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CleanAllProfileContext extends SupportedCleanStatementContext {
    public constructor(ctx: SupportedCleanStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAN(): antlr.TerminalNode {
        return this.getToken(DorisParser.CLEAN, 0)!;
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALL, 0)!;
    }
    public PROFILE(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROFILE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCleanAllProfile) {
             listener.enterCleanAllProfile(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCleanAllProfile) {
             listener.exitCleanAllProfile(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCleanAllProfile) {
            return visitor.visitCleanAllProfile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedRefreshStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedRefreshStatement;
    }
    public override copyFrom(ctx: UnsupportedRefreshStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class RefreshTableContext extends UnsupportedRefreshStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedRefreshStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REFRESH(): antlr.TerminalNode {
        return this.getToken(DorisParser.REFRESH, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRefreshTable) {
             listener.enterRefreshTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRefreshTable) {
             listener.exitRefreshTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshTable) {
            return visitor.visitRefreshTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshDatabaseContext extends UnsupportedRefreshStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedRefreshStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REFRESH(): antlr.TerminalNode {
        return this.getToken(DorisParser.REFRESH, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATABASE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRefreshDatabase) {
             listener.enterRefreshDatabase(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRefreshDatabase) {
             listener.exitRefreshDatabase(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshDatabase) {
            return visitor.visitRefreshDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshLdapContext extends UnsupportedRefreshStatementContext {
    public _user?: IdentifierOrTextContext;
    public constructor(ctx: UnsupportedRefreshStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REFRESH(): antlr.TerminalNode {
        return this.getToken(DorisParser.REFRESH, 0)!;
    }
    public LDAP(): antlr.TerminalNode {
        return this.getToken(DorisParser.LDAP, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRefreshLdap) {
             listener.enterRefreshLdap(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRefreshLdap) {
             listener.exitRefreshLdap(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshLdap) {
            return visitor.visitRefreshLdap(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedCleanStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedCleanStatement;
    }
    public override copyFrom(ctx: UnsupportedCleanStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CleanLabelContext extends UnsupportedCleanStatementContext {
    public _label?: IdentifierContext;
    public _database?: IdentifierContext;
    public constructor(ctx: UnsupportedCleanStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAN(): antlr.TerminalNode {
        return this.getToken(DorisParser.CLEAN, 0)!;
    }
    public LABEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.LABEL, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCleanLabel) {
             listener.enterCleanLabel(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCleanLabel) {
             listener.exitCleanLabel(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCleanLabel) {
            return visitor.visitCleanLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CleanQueryStatsContext extends UnsupportedCleanStatementContext {
    public _database?: IdentifierContext;
    public _table?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedCleanStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAN(): antlr.TerminalNode {
        return this.getToken(DorisParser.CLEAN, 0)!;
    }
    public QUERY(): antlr.TerminalNode {
        return this.getToken(DorisParser.QUERY, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCleanQueryStats) {
             listener.enterCleanQueryStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCleanQueryStats) {
             listener.exitCleanQueryStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCleanQueryStats) {
            return visitor.visitCleanQueryStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CleanAllQueryStatsContext extends UnsupportedCleanStatementContext {
    public constructor(ctx: UnsupportedCleanStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAN(): antlr.TerminalNode {
        return this.getToken(DorisParser.CLEAN, 0)!;
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALL, 0)!;
    }
    public QUERY(): antlr.TerminalNode {
        return this.getToken(DorisParser.QUERY, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCleanAllQueryStats) {
             listener.enterCleanAllQueryStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCleanAllQueryStats) {
             listener.exitCleanAllQueryStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCleanAllQueryStats) {
            return visitor.visitCleanAllQueryStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedCancelStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedCancelStatement;
    }
    public override copyFrom(ctx: SupportedCancelStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CancelWarmUpJobContext extends SupportedCancelStatementContext {
    public constructor(ctx: SupportedCancelStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public WARM(): antlr.TerminalNode {
        return this.getToken(DorisParser.WARM, 0)!;
    }
    public UP(): antlr.TerminalNode {
        return this.getToken(DorisParser.UP, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCancelWarmUpJob) {
             listener.enterCancelWarmUpJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCancelWarmUpJob) {
             listener.exitCancelWarmUpJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCancelWarmUpJob) {
            return visitor.visitCancelWarmUpJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CancelExportContext extends SupportedCancelStatementContext {
    public _database?: IdentifierContext;
    public constructor(ctx: SupportedCancelStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public EXPORT(): antlr.TerminalNode {
        return this.getToken(DorisParser.EXPORT, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCancelExport) {
             listener.enterCancelExport(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCancelExport) {
             listener.exitCancelExport(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCancelExport) {
            return visitor.visitCancelExport(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CancelLoadContext extends SupportedCancelStatementContext {
    public _database?: IdentifierContext;
    public constructor(ctx: SupportedCancelStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCancelLoad) {
             listener.enterCancelLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCancelLoad) {
             listener.exitCancelLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCancelLoad) {
            return visitor.visitCancelLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedCancelStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedCancelStatement;
    }
    public override copyFrom(ctx: UnsupportedCancelStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CancelBackupContext extends UnsupportedCancelStatementContext {
    public _database?: IdentifierContext;
    public constructor(ctx: UnsupportedCancelStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public BACKUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.BACKUP, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCancelBackup) {
             listener.enterCancelBackup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCancelBackup) {
             listener.exitCancelBackup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCancelBackup) {
            return visitor.visitCancelBackup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CancelBuildIndexContext extends UnsupportedCancelStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _INTEGER_VALUE?: Token | null;
    public _jobIds: antlr.Token[] = [];
    public constructor(ctx: UnsupportedCancelStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public BUILD(): antlr.TerminalNode {
        return this.getToken(DorisParser.BUILD, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(DorisParser.INDEX, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(DorisParser.INTEGER_VALUE, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCancelBuildIndex) {
             listener.enterCancelBuildIndex(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCancelBuildIndex) {
             listener.exitCancelBuildIndex(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCancelBuildIndex) {
            return visitor.visitCancelBuildIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CancelRestoreContext extends UnsupportedCancelStatementContext {
    public _database?: IdentifierContext;
    public constructor(ctx: UnsupportedCancelStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public RESTORE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESTORE, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCancelRestore) {
             listener.enterCancelRestore(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCancelRestore) {
             listener.exitCancelRestore(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCancelRestore) {
            return visitor.visitCancelRestore(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CancelAlterTableContext extends UnsupportedCancelStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _INTEGER_VALUE?: Token | null;
    public _jobIds: antlr.Token[] = [];
    public constructor(ctx: UnsupportedCancelStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLLUP, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COLUMN, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATERIALIZED, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VIEW, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(DorisParser.INTEGER_VALUE, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCancelAlterTable) {
             listener.enterCancelAlterTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCancelAlterTable) {
             listener.exitCancelAlterTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCancelAlterTable) {
            return visitor.visitCancelAlterTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CancelDecommisionBackendContext extends UnsupportedCancelStatementContext {
    public _STRING_LITERAL?: Token | null;
    public _hostPorts: antlr.Token[] = [];
    public constructor(ctx: UnsupportedCancelStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public DECOMMISSION(): antlr.TerminalNode {
        return this.getToken(DorisParser.DECOMMISSION, 0)!;
    }
    public BACKEND(): antlr.TerminalNode {
        return this.getToken(DorisParser.BACKEND, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCancelDecommisionBackend) {
             listener.enterCancelDecommisionBackend(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCancelDecommisionBackend) {
             listener.exitCancelDecommisionBackend(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCancelDecommisionBackend) {
            return visitor.visitCancelDecommisionBackend(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedAdminStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedAdminStatement;
    }
    public override copyFrom(ctx: SupportedAdminStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AdminShowReplicaDistributionContext extends SupportedAdminStatementContext {
    public constructor(ctx: SupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public REPLICA(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPLICA, 0)!;
    }
    public DISTRIBUTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.DISTRIBUTION, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public baseTableRef(): BaseTableRefContext {
        return this.getRuleContext(0, BaseTableRefContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminShowReplicaDistribution) {
             listener.enterAdminShowReplicaDistribution(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminShowReplicaDistribution) {
             listener.exitAdminShowReplicaDistribution(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminShowReplicaDistribution) {
            return visitor.visitAdminShowReplicaDistribution(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedRecoverStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedRecoverStatement;
    }
    public override copyFrom(ctx: SupportedRecoverStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class RecoverPartitionContext extends SupportedRecoverStatementContext {
    public _name?: IdentifierContext;
    public _id?: Token | null;
    public _alias?: IdentifierContext;
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: SupportedRecoverStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RECOVER(): antlr.TerminalNode {
        return this.getToken(DorisParser.RECOVER, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AS, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRecoverPartition) {
             listener.enterRecoverPartition(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRecoverPartition) {
             listener.exitRecoverPartition(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRecoverPartition) {
            return visitor.visitRecoverPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RecoverTableContext extends SupportedRecoverStatementContext {
    public _name?: MultipartIdentifierContext;
    public _id?: Token | null;
    public _alias?: IdentifierContext;
    public constructor(ctx: SupportedRecoverStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RECOVER(): antlr.TerminalNode {
        return this.getToken(DorisParser.RECOVER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AS, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRecoverTable) {
             listener.enterRecoverTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRecoverTable) {
             listener.exitRecoverTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRecoverTable) {
            return visitor.visitRecoverTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RecoverDatabaseContext extends SupportedRecoverStatementContext {
    public _name?: IdentifierContext;
    public _id?: Token | null;
    public _alias?: IdentifierContext;
    public constructor(ctx: SupportedRecoverStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RECOVER(): antlr.TerminalNode {
        return this.getToken(DorisParser.RECOVER, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATABASE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AS, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRecoverDatabase) {
             listener.enterRecoverDatabase(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRecoverDatabase) {
             listener.exitRecoverDatabase(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRecoverDatabase) {
            return visitor.visitRecoverDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedAdminStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedAdminStatement;
    }
    public override copyFrom(ctx: UnsupportedAdminStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AdminShowTabletStorageFormatContext extends UnsupportedAdminStatementContext {
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLET(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLET, 0)!;
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STORAGE, 0)!;
    }
    public FORMAT(): antlr.TerminalNode {
        return this.getToken(DorisParser.FORMAT, 0)!;
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VERBOSE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminShowTabletStorageFormat) {
             listener.enterAdminShowTabletStorageFormat(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminShowTabletStorageFormat) {
             listener.exitAdminShowTabletStorageFormat(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminShowTabletStorageFormat) {
            return visitor.visitAdminShowTabletStorageFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminSetReplicaStatusContext extends UnsupportedAdminStatementContext {
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public REPLICA(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPLICA, 0)!;
    }
    public STATUS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATUS, 0)!;
    }
    public PROPERTIES(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROPERTIES, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminSetReplicaStatus) {
             listener.enterAdminSetReplicaStatus(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminSetReplicaStatus) {
             listener.exitAdminSetReplicaStatus(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminSetReplicaStatus) {
            return visitor.visitAdminSetReplicaStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminRebalanceDiskContext extends UnsupportedAdminStatementContext {
    public _STRING_LITERAL?: Token | null;
    public _backends: antlr.Token[] = [];
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public REBALANCE(): antlr.TerminalNode {
        return this.getToken(DorisParser.REBALANCE, 0)!;
    }
    public DISK(): antlr.TerminalNode {
        return this.getToken(DorisParser.DISK, 0)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMA, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminRebalanceDisk) {
             listener.enterAdminRebalanceDisk(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminRebalanceDisk) {
             listener.exitAdminRebalanceDisk(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminRebalanceDisk) {
            return visitor.visitAdminRebalanceDisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminSetReplicaVersionContext extends UnsupportedAdminStatementContext {
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public REPLICA(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPLICA, 0)!;
    }
    public VERSION(): antlr.TerminalNode {
        return this.getToken(DorisParser.VERSION, 0)!;
    }
    public PROPERTIES(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROPERTIES, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminSetReplicaVersion) {
             listener.enterAdminSetReplicaVersion(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminSetReplicaVersion) {
             listener.exitAdminSetReplicaVersion(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminSetReplicaVersion) {
            return visitor.visitAdminSetReplicaVersion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminSetTableStatusContext extends UnsupportedAdminStatementContext {
    public _name?: MultipartIdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public STATUS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATUS, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminSetTableStatus) {
             listener.enterAdminSetTableStatus(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminSetTableStatus) {
             listener.exitAdminSetTableStatus(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminSetTableStatus) {
            return visitor.visitAdminSetTableStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminSetPartitionVersionContext extends UnsupportedAdminStatementContext {
    public _name?: MultipartIdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public VERSION(): antlr.TerminalNode {
        return this.getToken(DorisParser.VERSION, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminSetPartitionVersion) {
             listener.enterAdminSetPartitionVersion(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminSetPartitionVersion) {
             listener.exitAdminSetPartitionVersion(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminSetPartitionVersion) {
            return visitor.visitAdminSetPartitionVersion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminCancelRepairTableContext extends UnsupportedAdminStatementContext {
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public REPAIR(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPAIR, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public baseTableRef(): BaseTableRefContext {
        return this.getRuleContext(0, BaseTableRefContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminCancelRepairTable) {
             listener.enterAdminCancelRepairTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminCancelRepairTable) {
             listener.exitAdminCancelRepairTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminCancelRepairTable) {
            return visitor.visitAdminCancelRepairTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminCopyTabletContext extends UnsupportedAdminStatementContext {
    public _tabletId?: Token | null;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public COPY(): antlr.TerminalNode {
        return this.getToken(DorisParser.COPY, 0)!;
    }
    public TABLET(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLET, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminCopyTablet) {
             listener.enterAdminCopyTablet(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminCopyTablet) {
             listener.exitAdminCopyTablet(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminCopyTablet) {
            return visitor.visitAdminCopyTablet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminRepairTableContext extends UnsupportedAdminStatementContext {
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public REPAIR(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPAIR, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public baseTableRef(): BaseTableRefContext {
        return this.getRuleContext(0, BaseTableRefContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminRepairTable) {
             listener.enterAdminRepairTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminRepairTable) {
             listener.exitAdminRepairTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminRepairTable) {
            return visitor.visitAdminRepairTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminSetFrontendConfigContext extends UnsupportedAdminStatementContext {
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public CONFIG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CONFIG, 0)!;
    }
    public FRONTEND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FRONTEND, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public ALL(): antlr.TerminalNode[];
    public ALL(i: number): antlr.TerminalNode | null;
    public ALL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.ALL);
    	} else {
    		return this.getToken(DorisParser.ALL, i);
    	}
    }
    public FRONTENDS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FRONTENDS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminSetFrontendConfig) {
             listener.enterAdminSetFrontendConfig(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminSetFrontendConfig) {
             listener.exitAdminSetFrontendConfig(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminSetFrontendConfig) {
            return visitor.visitAdminSetFrontendConfig(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminCheckTabletsContext extends UnsupportedAdminStatementContext {
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(DorisParser.CHECK, 0)!;
    }
    public tabletList(): TabletListContext {
        return this.getRuleContext(0, TabletListContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminCheckTablets) {
             listener.enterAdminCheckTablets(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminCheckTablets) {
             listener.exitAdminCheckTablets(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminCheckTablets) {
            return visitor.visitAdminCheckTablets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminCleanTrashContext extends UnsupportedAdminStatementContext {
    public _STRING_LITERAL?: Token | null;
    public _backends: antlr.Token[] = [];
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public CLEAN(): antlr.TerminalNode {
        return this.getToken(DorisParser.CLEAN, 0)!;
    }
    public TRASH(): antlr.TerminalNode {
        return this.getToken(DorisParser.TRASH, 0)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMA, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminCleanTrash) {
             listener.enterAdminCleanTrash(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminCleanTrash) {
             listener.exitAdminCleanTrash(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminCleanTrash) {
            return visitor.visitAdminCleanTrash(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminCompactTableContext extends UnsupportedAdminStatementContext {
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public COMPACT(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMPACT, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public baseTableRef(): BaseTableRefContext {
        return this.getRuleContext(0, BaseTableRefContext)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminCompactTable) {
             listener.enterAdminCompactTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminCompactTable) {
             listener.exitAdminCompactTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminCompactTable) {
            return visitor.visitAdminCompactTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminDiagnoseTabletContext extends UnsupportedAdminStatementContext {
    public _tabletId?: Token | null;
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public DIAGNOSE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DIAGNOSE, 0)!;
    }
    public TABLET(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLET, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminDiagnoseTablet) {
             listener.enterAdminDiagnoseTablet(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminDiagnoseTablet) {
             listener.exitAdminDiagnoseTablet(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminDiagnoseTablet) {
            return visitor.visitAdminDiagnoseTablet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminCancelRebalanceDiskContext extends UnsupportedAdminStatementContext {
    public _STRING_LITERAL?: Token | null;
    public _backends: antlr.Token[] = [];
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public CANCEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.CANCEL, 0)!;
    }
    public REBALANCE(): antlr.TerminalNode {
        return this.getToken(DorisParser.REBALANCE, 0)!;
    }
    public DISK(): antlr.TerminalNode {
        return this.getToken(DorisParser.DISK, 0)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMA, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminCancelRebalanceDisk) {
             listener.enterAdminCancelRebalanceDisk(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminCancelRebalanceDisk) {
             listener.exitAdminCancelRebalanceDisk(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminCancelRebalanceDisk) {
            return visitor.visitAdminCancelRebalanceDisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AdminShowReplicaStatusContext extends UnsupportedAdminStatementContext {
    public constructor(ctx: UnsupportedAdminStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADMIN, 0)!;
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public REPLICA(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPLICA, 0)!;
    }
    public STATUS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATUS, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public baseTableRef(): BaseTableRefContext {
        return this.getRuleContext(0, BaseTableRefContext)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAdminShowReplicaStatus) {
             listener.enterAdminShowReplicaStatus(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAdminShowReplicaStatus) {
             listener.exitAdminShowReplicaStatus(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAdminShowReplicaStatus) {
            return visitor.visitAdminShowReplicaStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BaseTableRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public optScanParams(): OptScanParamsContext | null {
        return this.getRuleContext(0, OptScanParamsContext);
    }
    public tableSnapshot(): TableSnapshotContext | null {
        return this.getRuleContext(0, TableSnapshotContext);
    }
    public specifiedPartition(): SpecifiedPartitionContext | null {
        return this.getRuleContext(0, SpecifiedPartitionContext);
    }
    public tabletList(): TabletListContext | null {
        return this.getRuleContext(0, TabletListContext);
    }
    public sample(): SampleContext | null {
        return this.getRuleContext(0, SampleContext);
    }
    public relationHint(): RelationHintContext | null {
        return this.getRuleContext(0, RelationHintContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_baseTableRef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterBaseTableRef) {
             listener.enterBaseTableRef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitBaseTableRef) {
             listener.exitBaseTableRef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitBaseTableRef) {
            return visitor.visitBaseTableRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WildWhereContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LIKE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_wildWhere;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWildWhere) {
             listener.enterWildWhere(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWildWhere) {
             listener.exitWildWhere(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWildWhere) {
            return visitor.visitWildWhere(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedTransactionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedTransactionStatement;
    }
    public override copyFrom(ctx: UnsupportedTransactionStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class TranscationCommitContext extends UnsupportedTransactionStatementContext {
    public constructor(ctx: UnsupportedTransactionStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMIT(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMIT, 0)!;
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WORK, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AND, 0);
    }
    public CHAIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHAIN, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RELEASE, 0);
    }
    public NO(): antlr.TerminalNode[];
    public NO(i: number): antlr.TerminalNode | null;
    public NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.NO);
    	} else {
    		return this.getToken(DorisParser.NO, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTranscationCommit) {
             listener.enterTranscationCommit(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTranscationCommit) {
             listener.exitTranscationCommit(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTranscationCommit) {
            return visitor.visitTranscationCommit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TransactionRollbackContext extends UnsupportedTransactionStatementContext {
    public constructor(ctx: UnsupportedTransactionStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLLBACK(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROLLBACK, 0)!;
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WORK, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AND, 0);
    }
    public CHAIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHAIN, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RELEASE, 0);
    }
    public NO(): antlr.TerminalNode[];
    public NO(i: number): antlr.TerminalNode | null;
    public NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.NO);
    	} else {
    		return this.getToken(DorisParser.NO, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTransactionRollback) {
             listener.enterTransactionRollback(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTransactionRollback) {
             listener.exitTransactionRollback(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionRollback) {
            return visitor.visitTransactionRollback(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TransactionBeginContext extends UnsupportedTransactionStatementContext {
    public constructor(ctx: UnsupportedTransactionStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BEGIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.BEGIN, 0)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WITH, 0);
    }
    public LABEL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LABEL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTransactionBegin) {
             listener.enterTransactionBegin(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTransactionBegin) {
             listener.exitTransactionBegin(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionBegin) {
            return visitor.visitTransactionBegin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedGrantRevokeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedGrantRevokeStatement;
    }
    public override copyFrom(ctx: UnsupportedGrantRevokeStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class GrantResourcePrivilegeContext extends UnsupportedGrantRevokeStatementContext {
    public constructor(ctx: UnsupportedGrantRevokeStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GRANT, 0);
    }
    public privilegeList(): PrivilegeListContext {
        return this.getRuleContext(0, PrivilegeListContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public identifierOrTextOrAsterisk(): IdentifierOrTextOrAsteriskContext {
        return this.getRuleContext(0, IdentifierOrTextOrAsteriskContext)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TO, 0);
    }
    public RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RESOURCE, 0);
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CLUSTER, 0);
    }
    public COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMPUTE, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GROUP, 0);
    }
    public STAGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STAGE, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STORAGE, 0);
    }
    public VAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VAULT, 0);
    }
    public WORKLOAD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WORKLOAD, 0);
    }
    public userIdentify(): UserIdentifyContext | null {
        return this.getRuleContext(0, UserIdentifyContext);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REVOKE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterGrantResourcePrivilege) {
             listener.enterGrantResourcePrivilege(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitGrantResourcePrivilege) {
             listener.exitGrantResourcePrivilege(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitGrantResourcePrivilege) {
            return visitor.visitGrantResourcePrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantTablePrivilegeContext extends UnsupportedGrantRevokeStatementContext {
    public constructor(ctx: UnsupportedGrantRevokeStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GRANT, 0);
    }
    public privilegeList(): PrivilegeListContext {
        return this.getRuleContext(0, PrivilegeListContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public multipartIdentifierOrAsterisk(): MultipartIdentifierOrAsteriskContext {
        return this.getRuleContext(0, MultipartIdentifierOrAsteriskContext)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TO, 0);
    }
    public userIdentify(): UserIdentifyContext | null {
        return this.getRuleContext(0, UserIdentifyContext);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REVOKE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterGrantTablePrivilege) {
             listener.enterGrantTablePrivilege(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitGrantTablePrivilege) {
             listener.exitGrantTablePrivilege(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitGrantTablePrivilege) {
            return visitor.visitGrantTablePrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantRoleContext extends UnsupportedGrantRevokeStatementContext {
    public _STRING_LITERAL?: Token | null;
    public _roles: antlr.Token[] = [];
    public constructor(ctx: UnsupportedGrantRevokeStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GRANT, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TO, 0);
    }
    public userIdentify(): UserIdentifyContext {
        return this.getRuleContext(0, UserIdentifyContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REVOKE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterGrantRole) {
             listener.enterGrantRole(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitGrantRole) {
             listener.exitGrantRole(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitGrantRole) {
            return visitor.visitGrantRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public _columns?: IdentifierListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_privilege;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPrivilege) {
             listener.enterPrivilege(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPrivilege) {
             listener.exitPrivilege(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_privilegeList;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPrivilegeList) {
             listener.enterPrivilegeList(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPrivilegeList) {
             listener.exitPrivilegeList(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeList) {
            return visitor.visitPrivilegeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedAlterStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedAlterStatement;
    }
    public override copyFrom(ctx: UnsupportedAlterStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterStoragePlicyContext extends UnsupportedAlterStatementContext {
    public _name?: IdentifierOrTextContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STORAGE, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(DorisParser.POLICY, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public propertyClause(): PropertyClauseContext {
        return this.getRuleContext(0, PropertyClauseContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterStoragePlicy) {
             listener.enterAlterStoragePlicy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterStoragePlicy) {
             listener.exitAlterStoragePlicy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStoragePlicy) {
            return visitor.visitAlterStoragePlicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterSystemContext extends UnsupportedAlterStatementContext {
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public SYSTEM(): antlr.TerminalNode {
        return this.getToken(DorisParser.SYSTEM, 0)!;
    }
    public alterSystemClause(): AlterSystemClauseContext {
        return this.getRuleContext(0, AlterSystemClauseContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterSystem) {
             listener.enterAlterSystem(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterSystem) {
             listener.exitAlterSystem(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterSystem) {
            return visitor.visitAlterSystem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterCatalogRenameContext extends UnsupportedAlterStatementContext {
    public _name?: IdentifierContext;
    public _newName?: IdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOG, 0)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RENAME, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterCatalogRename) {
             listener.enterAlterCatalogRename(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterCatalogRename) {
             listener.exitAlterCatalogRename(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterCatalogRename) {
            return visitor.visitAlterCatalogRename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterDatabaseSetQuotaContext extends UnsupportedAlterStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATABASE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public QUOTA(): antlr.TerminalNode {
        return this.getToken(DorisParser.QUOTA, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATA, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPLICA, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TRANSACTION, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterDatabaseSetQuota) {
             listener.enterAlterDatabaseSetQuota(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterDatabaseSetQuota) {
             listener.exitAlterDatabaseSetQuota(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseSetQuota) {
            return visitor.visitAlterDatabaseSetQuota(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableDropRollupContext extends UnsupportedAlterStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public ROLLUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROLLUP, 0)!;
    }
    public dropRollupClause(): DropRollupClauseContext[];
    public dropRollupClause(i: number): DropRollupClauseContext | null;
    public dropRollupClause(i?: number): DropRollupClauseContext[] | DropRollupClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DropRollupClauseContext);
        }

        return this.getRuleContext(i, DropRollupClauseContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterTableDropRollup) {
             listener.enterAlterTableDropRollup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterTableDropRollup) {
             listener.exitAlterTableDropRollup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableDropRollup) {
            return visitor.visitAlterTableDropRollup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTablePropertiesContext extends UnsupportedAlterStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterTableProperties) {
             listener.enterAlterTableProperties(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterTableProperties) {
             listener.exitAlterTableProperties(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableProperties) {
            return visitor.visitAlterTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterUserContext extends UnsupportedAlterStatementContext {
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(DorisParser.USER, 0)!;
    }
    public grantUserIdentify(): GrantUserIdentifyContext {
        return this.getRuleContext(0, GrantUserIdentifyContext)!;
    }
    public passwordOption(): PasswordOptionContext {
        return this.getRuleContext(0, PasswordOptionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterUser) {
             listener.enterAlterUser(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterUser) {
             listener.exitAlterUser(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterUser) {
            return visitor.visitAlterUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterDatabaseRenameContext extends UnsupportedAlterStatementContext {
    public _name?: IdentifierContext;
    public _newName?: IdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATABASE, 0)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RENAME, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterDatabaseRename) {
             listener.enterAlterDatabaseRename(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterDatabaseRename) {
             listener.exitAlterDatabaseRename(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseRename) {
            return visitor.visitAlterDatabaseRename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterDatabasePropertiesContext extends UnsupportedAlterStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATABASE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public PROPERTIES(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROPERTIES, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterDatabaseProperties) {
             listener.enterAlterDatabaseProperties(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterDatabaseProperties) {
             listener.exitAlterDatabaseProperties(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseProperties) {
            return visitor.visitAlterDatabaseProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterCatalogPropertiesContext extends UnsupportedAlterStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOG, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public PROPERTIES(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROPERTIES, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterCatalogProperties) {
             listener.enterAlterCatalogProperties(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterCatalogProperties) {
             listener.exitAlterCatalogProperties(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterCatalogProperties) {
            return visitor.visitAlterCatalogProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterCatalogCommentContext extends UnsupportedAlterStatementContext {
    public _name?: IdentifierContext;
    public _comment?: Token | null;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOG, 0)!;
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.MODIFY, 0)!;
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMENT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterCatalogComment) {
             listener.enterAlterCatalogComment(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterCatalogComment) {
             listener.exitAlterCatalogComment(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterCatalogComment) {
            return visitor.visitAlterCatalogComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterSqlBlockRuleContext extends UnsupportedAlterStatementContext {
    public _name?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public SQL_BLOCK_RULE(): antlr.TerminalNode {
        return this.getToken(DorisParser.SQL_BLOCK_RULE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterSqlBlockRule) {
             listener.enterAlterSqlBlockRule(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterSqlBlockRule) {
             listener.exitAlterSqlBlockRule(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterSqlBlockRule) {
            return visitor.visitAlterSqlBlockRule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterResourceContext extends UnsupportedAlterStatementContext {
    public _name?: IdentifierOrTextContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESOURCE, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterResource) {
             listener.enterAlterResource(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterResource) {
             listener.exitAlterResource(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterResource) {
            return visitor.visitAlterResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterRoutineLoadContext extends UnsupportedAlterStatementContext {
    public _name?: MultipartIdentifierContext;
    public _properties?: PropertyClauseContext;
    public _type_?: IdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public ROUTINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROUTINE, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOR, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterRoutineLoad) {
             listener.enterAlterRoutineLoad(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterRoutineLoad) {
             listener.exitAlterRoutineLoad(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterRoutineLoad) {
            return visitor.visitAlterRoutineLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableAddRollupContext extends UnsupportedAlterStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public ROLLUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROLLUP, 0)!;
    }
    public addRollupClause(): AddRollupClauseContext[];
    public addRollupClause(i: number): AddRollupClauseContext | null;
    public addRollupClause(i?: number): AddRollupClauseContext[] | AddRollupClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AddRollupClauseContext);
        }

        return this.getRuleContext(i, AddRollupClauseContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterTableAddRollup) {
             listener.enterAlterTableAddRollup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterTableAddRollup) {
             listener.exitAlterTableAddRollup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableAddRollup) {
            return visitor.visitAlterTableAddRollup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterRepositoryContext extends UnsupportedAlterStatementContext {
    public _name?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public REPOSITORY(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPOSITORY, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterRepository) {
             listener.enterAlterRepository(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterRepository) {
             listener.exitAlterRepository(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterRepository) {
            return visitor.visitAlterRepository(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableContext extends UnsupportedAlterStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public alterTableClause(): AlterTableClauseContext[];
    public alterTableClause(i: number): AlterTableClauseContext | null;
    public alterTableClause(i?: number): AlterTableClauseContext[] | AlterTableClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterTableClauseContext);
        }

        return this.getRuleContext(i, AlterTableClauseContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterTable) {
             listener.enterAlterTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterTable) {
             listener.exitAlterTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTable) {
            return visitor.visitAlterTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterColocateGroupContext extends UnsupportedAlterStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedAlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public COLOCATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLOCATE, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.GROUP, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterColocateGroup) {
             listener.enterAlterColocateGroup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterColocateGroup) {
             listener.exitAlterColocateGroup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColocateGroup) {
            return visitor.visitAlterColocateGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterSystemClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_alterSystemClause;
    }
    public override copyFrom(ctx: AlterSystemClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class DropBrokerClauseContext extends AlterSystemClauseContext {
    public _name?: IdentifierOrTextContext;
    public _STRING_LITERAL?: Token | null;
    public _hostPorts: antlr.Token[] = [];
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public BROKER(): antlr.TerminalNode {
        return this.getToken(DorisParser.BROKER, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropBrokerClause) {
             listener.enterDropBrokerClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropBrokerClause) {
             listener.exitDropBrokerClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropBrokerClause) {
            return visitor.visitDropBrokerClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModifyFrontendOrBackendHostNameClauseContext extends AlterSystemClauseContext {
    public _hostPort?: Token | null;
    public _hostName?: Token | null;
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.MODIFY, 0)!;
    }
    public HOSTNAME(): antlr.TerminalNode {
        return this.getToken(DorisParser.HOSTNAME, 0)!;
    }
    public FRONTEND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FRONTEND, 0);
    }
    public BACKEND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BACKEND, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterModifyFrontendOrBackendHostNameClause) {
             listener.enterModifyFrontendOrBackendHostNameClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitModifyFrontendOrBackendHostNameClause) {
             listener.exitModifyFrontendOrBackendHostNameClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitModifyFrontendOrBackendHostNameClause) {
            return visitor.visitModifyFrontendOrBackendHostNameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropObserverClauseContext extends AlterSystemClauseContext {
    public _hostPort?: Token | null;
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public OBSERVER(): antlr.TerminalNode {
        return this.getToken(DorisParser.OBSERVER, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropObserverClause) {
             listener.enterDropObserverClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropObserverClause) {
             listener.exitDropObserverClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropObserverClause) {
            return visitor.visitDropObserverClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddFollowerClauseContext extends AlterSystemClauseContext {
    public _hostPort?: Token | null;
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public FOLLOWER(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOLLOWER, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAddFollowerClause) {
             listener.enterAddFollowerClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAddFollowerClause) {
             listener.exitAddFollowerClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAddFollowerClause) {
            return visitor.visitAddFollowerClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropFollowerClauseContext extends AlterSystemClauseContext {
    public _hostPort?: Token | null;
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public FOLLOWER(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOLLOWER, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropFollowerClause) {
             listener.enterDropFollowerClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropFollowerClause) {
             listener.exitDropFollowerClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropFollowerClause) {
            return visitor.visitDropFollowerClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropAllBrokerClauseContext extends AlterSystemClauseContext {
    public _name?: IdentifierOrTextContext;
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALL, 0)!;
    }
    public BROKER(): antlr.TerminalNode {
        return this.getToken(DorisParser.BROKER, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropAllBrokerClause) {
             listener.enterDropAllBrokerClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropAllBrokerClause) {
             listener.exitDropAllBrokerClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropAllBrokerClause) {
            return visitor.visitDropAllBrokerClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropBackendClauseContext extends AlterSystemClauseContext {
    public _STRING_LITERAL?: Token | null;
    public _hostPorts: antlr.Token[] = [];
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BACKEND(): antlr.TerminalNode {
        return this.getToken(DorisParser.BACKEND, 0)!;
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DROP, 0);
    }
    public DROPP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DROPP, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropBackendClause) {
             listener.enterDropBackendClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropBackendClause) {
             listener.exitDropBackendClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropBackendClause) {
            return visitor.visitDropBackendClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterLoadErrorUrlClauseContext extends AlterSystemClauseContext {
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOAD, 0)!;
    }
    public ERRORS(): antlr.TerminalNode {
        return this.getToken(DorisParser.ERRORS, 0)!;
    }
    public HUB(): antlr.TerminalNode {
        return this.getToken(DorisParser.HUB, 0)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterLoadErrorUrlClause) {
             listener.enterAlterLoadErrorUrlClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterLoadErrorUrlClause) {
             listener.exitAlterLoadErrorUrlClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterLoadErrorUrlClause) {
            return visitor.visitAlterLoadErrorUrlClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModifyBackendClauseContext extends AlterSystemClauseContext {
    public _STRING_LITERAL?: Token | null;
    public _hostPorts: antlr.Token[] = [];
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.MODIFY, 0)!;
    }
    public BACKEND(): antlr.TerminalNode {
        return this.getToken(DorisParser.BACKEND, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterModifyBackendClause) {
             listener.enterModifyBackendClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitModifyBackendClause) {
             listener.exitModifyBackendClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitModifyBackendClause) {
            return visitor.visitModifyBackendClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddBrokerClauseContext extends AlterSystemClauseContext {
    public _name?: IdentifierOrTextContext;
    public _STRING_LITERAL?: Token | null;
    public _hostPorts: antlr.Token[] = [];
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public BROKER(): antlr.TerminalNode {
        return this.getToken(DorisParser.BROKER, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAddBrokerClause) {
             listener.enterAddBrokerClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAddBrokerClause) {
             listener.exitAddBrokerClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAddBrokerClause) {
            return visitor.visitAddBrokerClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddObserverClauseContext extends AlterSystemClauseContext {
    public _hostPort?: Token | null;
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public OBSERVER(): antlr.TerminalNode {
        return this.getToken(DorisParser.OBSERVER, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAddObserverClause) {
             listener.enterAddObserverClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAddObserverClause) {
             listener.exitAddObserverClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAddObserverClause) {
            return visitor.visitAddObserverClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DecommissionBackendClauseContext extends AlterSystemClauseContext {
    public _STRING_LITERAL?: Token | null;
    public _hostPorts: antlr.Token[] = [];
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DECOMMISSION(): antlr.TerminalNode {
        return this.getToken(DorisParser.DECOMMISSION, 0)!;
    }
    public BACKEND(): antlr.TerminalNode {
        return this.getToken(DorisParser.BACKEND, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDecommissionBackendClause) {
             listener.enterDecommissionBackendClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDecommissionBackendClause) {
             listener.exitDecommissionBackendClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDecommissionBackendClause) {
            return visitor.visitDecommissionBackendClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddBackendClauseContext extends AlterSystemClauseContext {
    public _STRING_LITERAL?: Token | null;
    public _hostPorts: antlr.Token[] = [];
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterSystemClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public BACKEND(): antlr.TerminalNode {
        return this.getToken(DorisParser.BACKEND, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAddBackendClause) {
             listener.enterAddBackendClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAddBackendClause) {
             listener.exitAddBackendClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAddBackendClause) {
            return visitor.visitAddBackendClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropRollupClauseContext extends antlr.ParserRuleContext {
    public _rollupName?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_dropRollupClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropRollupClause) {
             listener.enterDropRollupClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropRollupClause) {
             listener.exitDropRollupClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropRollupClause) {
            return visitor.visitDropRollupClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AddRollupClauseContext extends antlr.ParserRuleContext {
    public _rollupName?: IdentifierContext;
    public _columns?: IdentifierListContext;
    public _dupKeys?: IdentifierListContext;
    public _properties?: PropertyClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public DUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DUPLICATE, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.KEY, 0);
    }
    public fromRollup(): FromRollupContext | null {
        return this.getRuleContext(0, FromRollupContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_addRollupClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAddRollupClause) {
             listener.enterAddRollupClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAddRollupClause) {
             listener.exitAddRollupClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAddRollupClause) {
            return visitor.visitAddRollupClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_alterTableClause;
    }
    public override copyFrom(ctx: AlterTableClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class AddPartitionClauseContext extends AlterTableClauseContext {
    public _partitionProperties?: PropertyItemListContext;
    public _hashKeys?: IdentifierListContext;
    public _autoBucket?: Token | null;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public lessThanPartitionDef(): LessThanPartitionDefContext | null {
        return this.getRuleContext(0, LessThanPartitionDefContext);
    }
    public fixedPartitionDef(): FixedPartitionDefContext | null {
        return this.getRuleContext(0, FixedPartitionDefContext);
    }
    public inPartitionDef(): InPartitionDefContext | null {
        return this.getRuleContext(0, InPartitionDefContext);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TEMPORARY, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DISTRIBUTED, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BY, 0);
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HASH, 0);
    }
    public RANDOM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RANDOM, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BUCKETS, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public AUTO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTO, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAddPartitionClause) {
             listener.enterAddPartitionClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAddPartitionClause) {
             listener.exitAddPartitionClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAddPartitionClause) {
            return visitor.visitAddPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModifyDistributionClauseContext extends AlterTableClauseContext {
    public _hashKeys?: IdentifierListContext;
    public _autoBucket?: Token | null;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.MODIFY, 0)!;
    }
    public DISTRIBUTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.DISTRIBUTION, 0)!;
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DISTRIBUTED, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BY, 0);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HASH, 0);
    }
    public RANDOM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RANDOM, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BUCKETS, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public AUTO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTO, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterModifyDistributionClause) {
             listener.enterModifyDistributionClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitModifyDistributionClause) {
             listener.exitModifyDistributionClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitModifyDistributionClause) {
            return visitor.visitModifyDistributionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddColumnClauseContext extends AlterTableClauseContext {
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMN, 0)!;
    }
    public columnDef(): ColumnDefContext {
        return this.getRuleContext(0, ColumnDefContext)!;
    }
    public columnPosition(): ColumnPositionContext | null {
        return this.getRuleContext(0, ColumnPositionContext);
    }
    public toRollup(): ToRollupContext | null {
        return this.getRuleContext(0, ToRollupContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAddColumnClause) {
             listener.enterAddColumnClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAddColumnClause) {
             listener.exitAddColumnClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAddColumnClause) {
            return visitor.visitAddColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModifyColumnClauseContext extends AlterTableClauseContext {
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMN, 0)!;
    }
    public columnDef(): ColumnDefContext {
        return this.getRuleContext(0, ColumnDefContext)!;
    }
    public columnPosition(): ColumnPositionContext | null {
        return this.getRuleContext(0, ColumnPositionContext);
    }
    public fromRollup(): FromRollupContext | null {
        return this.getRuleContext(0, FromRollupContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterModifyColumnClause) {
             listener.enterModifyColumnClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitModifyColumnClause) {
             listener.exitModifyColumnClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitModifyColumnClause) {
            return visitor.visitModifyColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameRollupClauseContext extends AlterTableClauseContext {
    public _name?: IdentifierContext;
    public _newName?: IdentifierContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RENAME, 0)!;
    }
    public ROLLUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROLLUP, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRenameRollupClause) {
             listener.enterRenameRollupClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRenameRollupClause) {
             listener.exitRenameRollupClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRenameRollupClause) {
            return visitor.visitRenameRollupClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddColumnsClauseContext extends AlterTableClauseContext {
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMN, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public columnDef(): ColumnDefContext[];
    public columnDef(i: number): ColumnDefContext | null;
    public columnDef(i?: number): ColumnDefContext[] | ColumnDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnDefContext);
        }

        return this.getRuleContext(i, ColumnDefContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public toRollup(): ToRollupContext | null {
        return this.getRuleContext(0, ToRollupContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAddColumnsClause) {
             listener.enterAddColumnsClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAddColumnsClause) {
             listener.exitAddColumnsClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAddColumnsClause) {
            return visitor.visitAddColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReplaceTableClauseContext extends AlterTableClauseContext {
    public _name?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPLACE, 0)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(DorisParser.WITH, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FORCE, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterReplaceTableClause) {
             listener.enterReplaceTableClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitReplaceTableClause) {
             listener.exitReplaceTableClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceTableClause) {
            return visitor.visitReplaceTableClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenamePartitionClauseContext extends AlterTableClauseContext {
    public _name?: IdentifierContext;
    public _newName?: IdentifierContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RENAME, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRenamePartitionClause) {
             listener.enterRenamePartitionClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRenamePartitionClause) {
             listener.exitRenamePartitionClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRenamePartitionClause) {
            return visitor.visitRenamePartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropIndexClauseContext extends AlterTableClauseContext {
    public _name?: IdentifierContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(DorisParser.INDEX, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropIndexClause) {
             listener.enterDropIndexClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropIndexClause) {
             listener.exitDropIndexClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndexClause) {
            return visitor.visitDropIndexClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropColumnClauseContext extends AlterTableClauseContext {
    public _name?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public fromRollup(): FromRollupContext | null {
        return this.getRuleContext(0, FromRollupContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropColumnClause) {
             listener.enterDropColumnClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropColumnClause) {
             listener.exitDropColumnClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropColumnClause) {
            return visitor.visitDropColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropPartitionClauseContext extends AlterTableClauseContext {
    public _partitionName?: IdentifierContext;
    public _indexName?: IdentifierContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TEMPORARY, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FORCE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INDEX, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropPartitionClause) {
             listener.enterDropPartitionClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropPartitionClause) {
             listener.exitDropPartitionClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropPartitionClause) {
            return visitor.visitDropPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReplacePartitionClauseContext extends AlterTableClauseContext {
    public _partitions?: PartitionSpecContext;
    public _tempPartitions?: PartitionSpecContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPLACE, 0)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(DorisParser.WITH, 0)!;
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FORCE, 0);
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterReplacePartitionClause) {
             listener.enterReplacePartitionClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitReplacePartitionClause) {
             listener.exitReplacePartitionClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitReplacePartitionClause) {
            return visitor.visitReplacePartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameClauseContext extends AlterTableClauseContext {
    public _newName?: IdentifierContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RENAME, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRenameClause) {
             listener.enterRenameClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRenameClause) {
             listener.exitRenameClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRenameClause) {
            return visitor.visitRenameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModifyTableCommentClauseContext extends AlterTableClauseContext {
    public _comment?: Token | null;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.MODIFY, 0)!;
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMENT, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterModifyTableCommentClause) {
             listener.enterModifyTableCommentClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitModifyTableCommentClause) {
             listener.exitModifyTableCommentClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitModifyTableCommentClause) {
            return visitor.visitModifyTableCommentClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModifyPartitionClauseContext extends AlterTableClauseContext {
    public _partitionName?: IdentifierContext;
    public _partitionNames?: IdentifierListContext;
    public _partitionProperties?: PropertyItemListContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.MODIFY, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.LEFT_PAREN);
    	} else {
    		return this.getToken(DorisParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(DorisParser.RIGHT_PAREN, i);
    	}
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ASTERISK, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TEMPORARY, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterModifyPartitionClause) {
             listener.enterModifyPartitionClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitModifyPartitionClause) {
             listener.exitModifyPartitionClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitModifyPartitionClause) {
            return visitor.visitModifyPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModifyEngineClauseContext extends AlterTableClauseContext {
    public _name?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.MODIFY, 0)!;
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ENGINE, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(DorisParser.TO, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterModifyEngineClause) {
             listener.enterModifyEngineClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitModifyEngineClause) {
             listener.exitModifyEngineClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitModifyEngineClause) {
            return visitor.visitModifyEngineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReorderColumnsClauseContext extends AlterTableClauseContext {
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(DorisParser.BY, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public fromRollup(): FromRollupContext | null {
        return this.getRuleContext(0, FromRollupContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterReorderColumnsClause) {
             listener.enterReorderColumnsClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitReorderColumnsClause) {
             listener.exitReorderColumnsClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitReorderColumnsClause) {
            return visitor.visitReorderColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddIndexClauseContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public indexDef(): IndexDefContext {
        return this.getRuleContext(0, IndexDefContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAddIndexClause) {
             listener.enterAddIndexClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAddIndexClause) {
             listener.exitAddIndexClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAddIndexClause) {
            return visitor.visitAddIndexClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModifyColumnCommentClauseContext extends AlterTableClauseContext {
    public _name?: IdentifierContext;
    public _comment?: Token | null;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMN, 0)!;
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMENT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterModifyColumnCommentClause) {
             listener.enterModifyColumnCommentClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitModifyColumnCommentClause) {
             listener.exitModifyColumnCommentClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitModifyColumnCommentClause) {
            return visitor.visitModifyColumnCommentClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterMultiPartitionClauseContext extends AlterTableClauseContext {
    public _from_?: PartitionValueListContext;
    public _to?: PartitionValueListContext;
    public _unit?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(DorisParser.ADD, 0)!;
    }
    public PARTITIONS(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITIONS, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(DorisParser.TO, 0)!;
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTERVAL, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public partitionValueList(): PartitionValueListContext[];
    public partitionValueList(i: number): PartitionValueListContext | null;
    public partitionValueList(i?: number): PartitionValueListContext[] | PartitionValueListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValueListContext);
        }

        return this.getRuleContext(i, PartitionValueListContext);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TEMPORARY, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterMultiPartitionClause) {
             listener.enterAlterMultiPartitionClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterMultiPartitionClause) {
             listener.exitAlterMultiPartitionClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterMultiPartitionClause) {
            return visitor.visitAlterMultiPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameColumnClauseContext extends AlterTableClauseContext {
    public _name?: IdentifierContext;
    public _newName?: IdentifierContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(DorisParser.RENAME, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMN, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRenameColumnClause) {
             listener.enterRenameColumnClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRenameColumnClause) {
             listener.exitRenameColumnClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRenameColumnClause) {
            return visitor.visitRenameColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class EnableFeatureClauseContext extends AlterTableClauseContext {
    public _name?: Token | null;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ENABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ENABLE, 0)!;
    }
    public FEATURE(): antlr.TerminalNode {
        return this.getToken(DorisParser.FEATURE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WITH, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterEnableFeatureClause) {
             listener.enterEnableFeatureClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitEnableFeatureClause) {
             listener.exitEnableFeatureClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitEnableFeatureClause) {
            return visitor.visitEnableFeatureClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnPositionContext extends antlr.ParserRuleContext {
    public _position?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FIRST, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AFTER, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_columnPosition;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterColumnPosition) {
             listener.enterColumnPosition(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitColumnPosition) {
             listener.exitColumnPosition(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitColumnPosition) {
            return visitor.visitColumnPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ToRollupContext extends antlr.ParserRuleContext {
    public _rollup?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TO, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_toRollup;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterToRollup) {
             listener.enterToRollup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitToRollup) {
             listener.exitToRollup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitToRollup) {
            return visitor.visitToRollup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromRollupContext extends antlr.ParserRuleContext {
    public _rollup?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_fromRollup;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFromRollup) {
             listener.enterFromRollup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFromRollup) {
             listener.exitFromRollup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFromRollup) {
            return visitor.visitFromRollup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedDropStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedDropStatement;
    }
    public override copyFrom(ctx: UnsupportedDropStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class DropRepositoryContext extends UnsupportedDropStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public REPOSITORY(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPOSITORY, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropRepository) {
             listener.enterDropRepository(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropRepository) {
             listener.exitDropRepository(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropRepository) {
            return visitor.visitDropRepository(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropDatabaseContext extends UnsupportedDropStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATABASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SCHEMA, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FORCE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropDatabase) {
             listener.enterDropDatabase(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropDatabase) {
             listener.exitDropDatabase(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropDatabase) {
            return visitor.visitDropDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropStageContext extends UnsupportedDropStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public STAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STAGE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropStage) {
             listener.enterDropStage(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropStage) {
             listener.exitDropStage(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropStage) {
            return visitor.visitDropStage(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropRowPolicyContext extends UnsupportedDropStatementContext {
    public _policyName?: IdentifierContext;
    public _tableName?: MultipartIdentifierContext;
    public _roleName?: IdentifierContext;
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public ROW(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROW, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(DorisParser.POLICY, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public userIdentify(): UserIdentifyContext | null {
        return this.getRuleContext(0, UserIdentifyContext);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropRowPolicy) {
             listener.enterDropRowPolicy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropRowPolicy) {
             listener.exitDropRowPolicy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropRowPolicy) {
            return visitor.visitDropRowPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropResourceContext extends UnsupportedDropStatementContext {
    public _name?: IdentifierOrTextContext;
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESOURCE, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropResource) {
             listener.enterDropResource(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropResource) {
             listener.exitDropResource(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropResource) {
            return visitor.visitDropResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropFunctionContext extends UnsupportedDropStatementContext {
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.FUNCTION, 0)!;
    }
    public functionIdentifier(): FunctionIdentifierContext {
        return this.getRuleContext(0, FunctionIdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public functionArguments(): FunctionArgumentsContext | null {
        return this.getRuleContext(0, FunctionArgumentsContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropFunction) {
             listener.enterDropFunction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropFunction) {
             listener.exitDropFunction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropCatalogContext extends UnsupportedDropStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOG, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropCatalog) {
             listener.enterDropCatalog(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropCatalog) {
             listener.exitDropCatalog(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropCatalog) {
            return visitor.visitDropCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropViewContext extends UnsupportedDropStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableContext extends UnsupportedDropStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FORCE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropIndexContext extends UnsupportedDropStatementContext {
    public _name?: IdentifierContext;
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(DorisParser.INDEX, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropIndex) {
             listener.enterDropIndex(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropIndex) {
             listener.exitDropIndex(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndex) {
            return visitor.visitDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropStoragePolicyContext extends UnsupportedDropStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: UnsupportedDropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STORAGE, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(DorisParser.POLICY, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropStoragePolicy) {
             listener.enterDropStoragePolicy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropStoragePolicy) {
             listener.exitDropStoragePolicy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropStoragePolicy) {
            return visitor.visitDropStoragePolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedStatsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedStatsStatement;
    }
    public override copyFrom(ctx: UnsupportedStatsStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowTableStatsContext extends UnsupportedStatsStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _columnList?: IdentifierListContext;
    public _tableId?: Token | null;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowTableStats) {
             listener.enterShowTableStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowTableStats) {
             listener.exitShowTableStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowTableStats) {
            return visitor.visitShowTableStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropAanalyzeJobContext extends UnsupportedStatsStatementContext {
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ANALYZE, 0)!;
    }
    public JOB(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOB, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropAanalyzeJob) {
             listener.enterDropAanalyzeJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropAanalyzeJob) {
             listener.exitDropAanalyzeJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropAanalyzeJob) {
            return visitor.visitDropAanalyzeJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnStatsContext extends UnsupportedStatsStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _columnList?: IdentifierListContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMN, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public CACHED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CACHED, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowColumnStats) {
             listener.enterShowColumnStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowColumnStats) {
             listener.exitShowColumnStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowColumnStats) {
            return visitor.visitShowColumnStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeDatabaseContext extends UnsupportedStatsStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ANALYZE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATABASE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.WITH);
    	} else {
    		return this.getToken(DorisParser.WITH, i);
    	}
    }
    public analyzeProperties(): AnalyzePropertiesContext[];
    public analyzeProperties(i: number): AnalyzePropertiesContext | null;
    public analyzeProperties(i?: number): AnalyzePropertiesContext[] | AnalyzePropertiesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnalyzePropertiesContext);
        }

        return this.getRuleContext(i, AnalyzePropertiesContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAnalyzeDatabase) {
             listener.enterAnalyzeDatabase(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAnalyzeDatabase) {
             listener.exitAnalyzeDatabase(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeDatabase) {
            return visitor.visitAnalyzeDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowAnalyzeTaskContext extends UnsupportedStatsStatementContext {
    public _jobId?: Token | null;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ANALYZE, 0)!;
    }
    public TASK(): antlr.TerminalNode {
        return this.getToken(DorisParser.TASK, 0)!;
    }
    public STATUS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATUS, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowAnalyzeTask) {
             listener.enterShowAnalyzeTask(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowAnalyzeTask) {
             listener.exitShowAnalyzeTask(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowAnalyzeTask) {
            return visitor.visitShowAnalyzeTask(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowIndexStatsContext extends UnsupportedStatsStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _indexId?: IdentifierContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(DorisParser.INDEX, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowIndexStats) {
             listener.enterShowIndexStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowIndexStats) {
             listener.exitShowIndexStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowIndexStats) {
            return visitor.visitShowIndexStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowAutoAnalyzeJobsContext extends UnsupportedStatsStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public AUTO(): antlr.TerminalNode {
        return this.getToken(DorisParser.AUTO, 0)!;
    }
    public JOBS(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOBS, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowAutoAnalyzeJobs) {
             listener.enterShowAutoAnalyzeJobs(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowAutoAnalyzeJobs) {
             listener.exitShowAutoAnalyzeJobs(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowAutoAnalyzeJobs) {
            return visitor.visitShowAutoAnalyzeJobs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropStatsContext extends UnsupportedStatsStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _columns?: IdentifierListContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropStats) {
             listener.enterDropStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropStats) {
             listener.exitDropStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropStats) {
            return visitor.visitDropStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropCachedStatsContext extends UnsupportedStatsStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public CACHED(): antlr.TerminalNode {
        return this.getToken(DorisParser.CACHED, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropCachedStats) {
             listener.enterDropCachedStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropCachedStats) {
             listener.exitDropCachedStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropCachedStats) {
            return visitor.visitDropCachedStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class KillAnalyzeJobContext extends UnsupportedStatsStatementContext {
    public _jobId?: Token | null;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KILL(): antlr.TerminalNode {
        return this.getToken(DorisParser.KILL, 0)!;
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ANALYZE, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterKillAnalyzeJob) {
             listener.enterKillAnalyzeJob(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitKillAnalyzeJob) {
             listener.exitKillAnalyzeJob(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitKillAnalyzeJob) {
            return visitor.visitKillAnalyzeJob(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowAnalyzeContext extends UnsupportedStatsStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ANALYZE, 0)!;
    }
    public AUTO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTO, 0);
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowAnalyze) {
             listener.enterShowAnalyze(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowAnalyze) {
             listener.exitShowAnalyze(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowAnalyze) {
            return visitor.visitShowAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterColumnStatsContext extends UnsupportedStatsStatementContext {
    public _name?: MultipartIdentifierContext;
    public _indexName?: IdentifierContext;
    public _columnName?: IdentifierContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMN, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INDEX, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterColumnStats) {
             listener.enterAlterColumnStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterColumnStats) {
             listener.exitAlterColumnStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColumnStats) {
            return visitor.visitAlterColumnStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropExpiredStatsContext extends UnsupportedStatsStatementContext {
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(DorisParser.DROP, 0)!;
    }
    public EXPIRED(): antlr.TerminalNode {
        return this.getToken(DorisParser.EXPIRED, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDropExpiredStats) {
             listener.enterDropExpiredStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDropExpiredStats) {
             listener.exitDropExpiredStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDropExpiredStats) {
            return visitor.visitDropExpiredStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeTableContext extends UnsupportedStatsStatementContext {
    public _name?: MultipartIdentifierContext;
    public _columns?: IdentifierListContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ANALYZE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.WITH);
    	} else {
    		return this.getToken(DorisParser.WITH, i);
    	}
    }
    public analyzeProperties(): AnalyzePropertiesContext[];
    public analyzeProperties(i: number): AnalyzePropertiesContext | null;
    public analyzeProperties(i?: number): AnalyzePropertiesContext[] | AnalyzePropertiesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnalyzePropertiesContext);
        }

        return this.getRuleContext(i, AnalyzePropertiesContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAnalyzeTable) {
             listener.enterAnalyzeTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAnalyzeTable) {
             listener.exitAnalyzeTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeTable) {
            return visitor.visitAnalyzeTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowAnalyzeFromJobIdContext extends UnsupportedStatsStatementContext {
    public _jobId?: Token | null;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ANALYZE, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public wildWhere(): WildWhereContext | null {
        return this.getRuleContext(0, WildWhereContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowAnalyzeFromJobId) {
             listener.enterShowAnalyzeFromJobId(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowAnalyzeFromJobId) {
             listener.exitShowAnalyzeFromJobId(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowAnalyzeFromJobId) {
            return visitor.visitShowAnalyzeFromJobId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableStatsContext extends UnsupportedStatsStatementContext {
    public _name?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(DorisParser.STATS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAlterTableStats) {
             listener.enterAlterTableStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAlterTableStats) {
             listener.exitAlterTableStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableStats) {
            return visitor.visitAlterTableStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnHistogramStatsContext extends UnsupportedStatsStatementContext {
    public _tableName?: MultipartIdentifierContext;
    public _columnList?: IdentifierListContext;
    public constructor(ctx: UnsupportedStatsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(DorisParser.SHOW, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMN, 0)!;
    }
    public HISTOGRAM(): antlr.TerminalNode {
        return this.getToken(DorisParser.HISTOGRAM, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterShowColumnHistogramStats) {
             listener.enterShowColumnHistogramStats(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitShowColumnHistogramStats) {
             listener.exitShowColumnHistogramStats(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitShowColumnHistogramStats) {
            return visitor.visitShowColumnHistogramStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzePropertiesContext extends antlr.ParserRuleContext {
    public _rows?: Token | null;
    public _percent?: Token | null;
    public _bucket?: Token | null;
    public _periodInSecond?: Token | null;
    public _crontabExpr?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SYNC, 0);
    }
    public INCREMENTAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INCREMENTAL, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FULL, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SQL, 0);
    }
    public HISTOGRAM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HISTOGRAM, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SAMPLE, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROWS, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PERCENT, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BUCKETS, 0);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PERIOD, 0);
    }
    public CRON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CRON, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_analyzeProperties;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAnalyzeProperties) {
             listener.enterAnalyzeProperties(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAnalyzeProperties) {
             listener.exitAnalyzeProperties(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeProperties) {
            return visitor.visitAnalyzeProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedCreateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedCreateStatement;
    }
    public override copyFrom(ctx: UnsupportedCreateStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateStorageVaultContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierOrTextContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STORAGE, 0)!;
    }
    public VAULT(): antlr.TerminalNode {
        return this.getToken(DorisParser.VAULT, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateStorageVault) {
             listener.enterCreateStorageVault(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateStorageVault) {
             listener.exitCreateStorageVault(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateStorageVault) {
            return visitor.visitCreateStorageVault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateWorkloadPolicyContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierOrTextContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public WORKLOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.WORKLOAD, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(DorisParser.POLICY, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public CONDITIONS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONDITIONS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.LEFT_PAREN);
    	} else {
    		return this.getToken(DorisParser.LEFT_PAREN, i);
    	}
    }
    public workloadPolicyConditions(): WorkloadPolicyConditionsContext | null {
        return this.getRuleContext(0, WorkloadPolicyConditionsContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(DorisParser.RIGHT_PAREN, i);
    	}
    }
    public ACTIONS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ACTIONS, 0);
    }
    public workloadPolicyActions(): WorkloadPolicyActionsContext | null {
        return this.getRuleContext(0, WorkloadPolicyActionsContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateWorkloadPolicy) {
             listener.enterCreateWorkloadPolicy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateWorkloadPolicy) {
             listener.exitCreateWorkloadPolicy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateWorkloadPolicy) {
            return visitor.visitCreateWorkloadPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateResourceContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierOrTextContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESOURCE, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXTERNAL, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateResource) {
             listener.enterCreateResource(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateResource) {
             listener.exitCreateResource(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateResource) {
            return visitor.visitCreateResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateUserDefineFunctionContext extends UnsupportedCreateStatementContext {
    public _returnType?: DataTypeContext;
    public _intermediateType?: DataTypeContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.FUNCTION, 0)!;
    }
    public functionIdentifier(): FunctionIdentifierContext {
        return this.getRuleContext(0, FunctionIdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public RETURNS(): antlr.TerminalNode {
        return this.getToken(DorisParser.RETURNS, 0)!;
    }
    public dataType(): DataTypeContext[];
    public dataType(i: number): DataTypeContext | null;
    public dataType(i?: number): DataTypeContext[] | DataTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeContext);
        }

        return this.getRuleContext(i, DataTypeContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public functionArguments(): FunctionArgumentsContext | null {
        return this.getRuleContext(0, FunctionArgumentsContext);
    }
    public INTERMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTERMEDIATE, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TABLES, 0);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AGGREGATE, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateUserDefineFunction) {
             listener.enterCreateUserDefineFunction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateUserDefineFunction) {
             listener.exitCreateUserDefineFunction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUserDefineFunction) {
            return visitor.visitCreateUserDefineFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateWorkloadGroupContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierOrTextContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public WORKLOAD(): antlr.TerminalNode {
        return this.getToken(DorisParser.WORKLOAD, 0)!;
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.GROUP, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateWorkloadGroup) {
             listener.enterCreateWorkloadGroup(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateWorkloadGroup) {
             listener.exitCreateWorkloadGroup(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateWorkloadGroup) {
            return visitor.visitCreateWorkloadGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateStoragePolicyContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STORAGE, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(DorisParser.POLICY, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateStoragePolicy) {
             listener.enterCreateStoragePolicy(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateStoragePolicy) {
             listener.exitCreateStoragePolicy(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateStoragePolicy) {
            return visitor.visitCreateStoragePolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateRoleContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROLE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateRole) {
             listener.enterCreateRole(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateRole) {
             listener.exitCreateRole(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRole) {
            return visitor.visitCreateRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateStageContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public STAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STAGE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateStage) {
             listener.enterCreateStage(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateStage) {
             listener.exitCreateStage(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateStage) {
            return visitor.visitCreateStage(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateIndexContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierContext;
    public _tableName?: MultipartIdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(DorisParser.INDEX, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.USING, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public BITMAP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITMAP, 0);
    }
    public NGRAM_BF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NGRAM_BF, 0);
    }
    public INVERTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INVERTED, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateIndex) {
             listener.enterCreateIndex(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateIndex) {
             listener.exitCreateIndex(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndex) {
            return visitor.visitCreateIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateFileContext extends UnsupportedCreateStatementContext {
    public _name?: Token | null;
    public _database?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public FILE(): antlr.TerminalNode {
        return this.getToken(DorisParser.FILE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public propertyClause(): PropertyClauseContext {
        return this.getRuleContext(0, PropertyClauseContext)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateFile) {
             listener.enterCreateFile(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateFile) {
             listener.exitCreateFile(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFile) {
            return visitor.visitCreateFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateRepositoryContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public REPOSITORY(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPOSITORY, 0)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(DorisParser.WITH, 0)!;
    }
    public storageBackend(): StorageBackendContext {
        return this.getRuleContext(0, StorageBackendContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.READ, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ONLY, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateRepository) {
             listener.enterCreateRepository(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateRepository) {
             listener.exitCreateRepository(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRepository) {
            return visitor.visitCreateRepository(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateEncryptkeyContext extends UnsupportedCreateStatementContext {
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public ENCRYPTKEY(): antlr.TerminalNode {
        return this.getToken(DorisParser.ENCRYPTKEY, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateEncryptkey) {
             listener.enterCreateEncryptkey(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateEncryptkey) {
             listener.exitCreateEncryptkey(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateEncryptkey) {
            return visitor.visitCreateEncryptkey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateDatabaseContext extends UnsupportedCreateStatementContext {
    public _name?: MultipartIdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATABASE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SCHEMA, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateDatabase) {
             listener.enterCreateDatabase(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateDatabase) {
             listener.exitCreateDatabase(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabase) {
            return visitor.visitCreateDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BuildIndexContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierContext;
    public _tableName?: MultipartIdentifierContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BUILD(): antlr.TerminalNode {
        return this.getToken(DorisParser.BUILD, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(DorisParser.INDEX, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterBuildIndex) {
             listener.enterBuildIndex(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitBuildIndex) {
             listener.exitBuildIndex(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitBuildIndex) {
            return visitor.visitBuildIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateUserContext extends UnsupportedCreateStatementContext {
    public _role?: Token | null;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(DorisParser.USER, 0)!;
    }
    public grantUserIdentify(): GrantUserIdentifyContext {
        return this.getRuleContext(0, GrantUserIdentifyContext)!;
    }
    public passwordOption(): PasswordOptionContext {
        return this.getRuleContext(0, PasswordOptionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public SUPERUSER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SUPERUSER, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFAULT, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLE, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateUser) {
             listener.enterCreateUser(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateUser) {
             listener.exitCreateUser(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUser) {
            return visitor.visitCreateUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateCatalogContext extends UnsupportedCreateStatementContext {
    public _catalogName?: IdentifierContext;
    public _resourceName?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(DorisParser.CATALOG, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WITH, 0);
    }
    public RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RESOURCE, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateCatalog) {
             listener.enterCreateCatalog(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateCatalog) {
             listener.exitCreateCatalog(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateCatalog) {
            return visitor.visitCreateCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateAliasFunctionContext extends UnsupportedCreateStatementContext {
    public _parameters?: IdentifierSeqContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public ALIAS(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALIAS, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.FUNCTION, 0)!;
    }
    public functionIdentifier(): FunctionIdentifierContext {
        return this.getRuleContext(0, FunctionIdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.LEFT_PAREN);
    	} else {
    		return this.getToken(DorisParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(DorisParser.RIGHT_PAREN, i);
    	}
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(DorisParser.WITH, 0)!;
    }
    public PARAMETER(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARAMETER, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public functionArguments(): FunctionArgumentsContext | null {
        return this.getRuleContext(0, FunctionArgumentsContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public identifierSeq(): IdentifierSeqContext | null {
        return this.getRuleContext(0, IdentifierSeqContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateAliasFunction) {
             listener.enterCreateAliasFunction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateAliasFunction) {
             listener.exitCreateAliasFunction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateAliasFunction) {
            return visitor.visitCreateAliasFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateSqlBlockRuleContext extends UnsupportedCreateStatementContext {
    public _name?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedCreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CREATE, 0)!;
    }
    public SQL_BLOCK_RULE(): antlr.TerminalNode {
        return this.getToken(DorisParser.SQL_BLOCK_RULE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCreateSqlBlockRule) {
             listener.enterCreateSqlBlockRule(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCreateSqlBlockRule) {
             listener.exitCreateSqlBlockRule(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCreateSqlBlockRule) {
            return visitor.visitCreateSqlBlockRule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WorkloadPolicyActionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public workloadPolicyAction(): WorkloadPolicyActionContext[];
    public workloadPolicyAction(i: number): WorkloadPolicyActionContext | null;
    public workloadPolicyAction(i?: number): WorkloadPolicyActionContext[] | WorkloadPolicyActionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WorkloadPolicyActionContext);
        }

        return this.getRuleContext(i, WorkloadPolicyActionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_workloadPolicyActions;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWorkloadPolicyActions) {
             listener.enterWorkloadPolicyActions(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWorkloadPolicyActions) {
             listener.exitWorkloadPolicyActions(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWorkloadPolicyActions) {
            return visitor.visitWorkloadPolicyActions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WorkloadPolicyActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SESSION_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SET_SESSION_VARIABLE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_workloadPolicyAction;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWorkloadPolicyAction) {
             listener.enterWorkloadPolicyAction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWorkloadPolicyAction) {
             listener.exitWorkloadPolicyAction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWorkloadPolicyAction) {
            return visitor.visitWorkloadPolicyAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WorkloadPolicyConditionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public workloadPolicyCondition(): WorkloadPolicyConditionContext[];
    public workloadPolicyCondition(i: number): WorkloadPolicyConditionContext | null;
    public workloadPolicyCondition(i?: number): WorkloadPolicyConditionContext[] | WorkloadPolicyConditionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WorkloadPolicyConditionContext);
        }

        return this.getRuleContext(i, WorkloadPolicyConditionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_workloadPolicyConditions;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWorkloadPolicyConditions) {
             listener.enterWorkloadPolicyConditions(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWorkloadPolicyConditions) {
             listener.exitWorkloadPolicyConditions(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWorkloadPolicyConditions) {
            return visitor.visitWorkloadPolicyConditions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WorkloadPolicyConditionContext extends antlr.ParserRuleContext {
    public _metricName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_workloadPolicyCondition;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWorkloadPolicyCondition) {
             listener.enterWorkloadPolicyCondition(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWorkloadPolicyCondition) {
             listener.exitWorkloadPolicyCondition(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWorkloadPolicyCondition) {
            return visitor.visitWorkloadPolicyCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StorageBackendContext extends antlr.ParserRuleContext {
    public _brokerName?: IdentifierContext;
    public _properties?: PropertyClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public LOCATION(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOCATION, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public BROKER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BROKER, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.S3, 0);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HDFS, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_storageBackend;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterStorageBackend) {
             listener.enterStorageBackend(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitStorageBackend) {
             listener.exitStorageBackend(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitStorageBackend) {
            return visitor.visitStorageBackend(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PasswordOptionContext extends antlr.ParserRuleContext {
    public _historyDefault?: Token | null;
    public _historyValue?: Token | null;
    public _expireDefault?: Token | null;
    public _expireNever?: Token | null;
    public _expireValue?: Token | null;
    public _expireTimeUnit?: Token | null;
    public _reuseDefault?: Token | null;
    public _reuseValue?: Token | null;
    public _attemptsValue?: Token | null;
    public _lockUnbounded?: Token | null;
    public _lockValue?: Token | null;
    public _lockTimeUint?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD_HISTORY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD_HISTORY, 0);
    }
    public PASSWORD_EXPIRE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD_EXPIRE, 0);
    }
    public PASSWORD_REUSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD_REUSE, 0);
    }
    public INTERVAL(): antlr.TerminalNode[];
    public INTERVAL(i: number): antlr.TerminalNode | null;
    public INTERVAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.INTERVAL);
    	} else {
    		return this.getToken(DorisParser.INTERVAL, i);
    	}
    }
    public FAILED_LOGIN_ATTEMPTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FAILED_LOGIN_ATTEMPTS, 0);
    }
    public PASSWORD_LOCK_TIME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD_LOCK_TIME, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(DorisParser.INTEGER_VALUE, i);
    	}
    }
    public ACCOUNT_LOCK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ACCOUNT_LOCK, 0);
    }
    public ACCOUNT_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ACCOUNT_UNLOCK, 0);
    }
    public DAY(): antlr.TerminalNode[];
    public DAY(i: number): antlr.TerminalNode | null;
    public DAY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.DAY);
    	} else {
    		return this.getToken(DorisParser.DAY, i);
    	}
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.DEFAULT);
    	} else {
    		return this.getToken(DorisParser.DEFAULT, i);
    	}
    }
    public NEVER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NEVER, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UNBOUNDED, 0);
    }
    public HOUR(): antlr.TerminalNode[];
    public HOUR(i: number): antlr.TerminalNode | null;
    public HOUR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.HOUR);
    	} else {
    		return this.getToken(DorisParser.HOUR, i);
    	}
    }
    public SECOND(): antlr.TerminalNode[];
    public SECOND(i: number): antlr.TerminalNode | null;
    public SECOND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.SECOND);
    	} else {
    		return this.getToken(DorisParser.SECOND, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_passwordOption;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPasswordOption) {
             listener.enterPasswordOption(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPasswordOption) {
             listener.exitPasswordOption(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPasswordOption) {
            return visitor.visitPasswordOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgumentsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionArgument(): FunctionArgumentContext[];
    public functionArgument(i: number): FunctionArgumentContext | null;
    public functionArgument(i?: number): FunctionArgumentContext[] | FunctionArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionArgumentContext);
        }

        return this.getRuleContext(i, FunctionArgumentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_functionArguments;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFunctionArguments) {
             listener.enterFunctionArguments(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFunctionArguments) {
             listener.exitFunctionArguments(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArguments) {
            return visitor.visitFunctionArguments(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOTDOTDOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DOTDOTDOT, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_functionArgument;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFunctionArgument) {
             listener.enterFunctionArgument(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFunctionArgument) {
             listener.exitFunctionArgument(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArgument) {
            return visitor.visitFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedSetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedSetStatement;
    }
    public override copyFrom(ctx: SupportedSetStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class SetTransactionContext extends SupportedSetStatementContext {
    public constructor(ctx: SupportedSetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public TRANSACTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.TRANSACTION, 0)!;
    }
    public transactionAccessMode(): TransactionAccessModeContext | null {
        return this.getRuleContext(0, TransactionAccessModeContext);
    }
    public isolationLevel(): IsolationLevelContext | null {
        return this.getRuleContext(0, IsolationLevelContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMA, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetTransaction) {
             listener.enterSetTransaction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetTransaction) {
             listener.exitSetTransaction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetTransaction) {
            return visitor.visitSetTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetUserPropertiesContext extends SupportedSetStatementContext {
    public _user?: IdentifierOrTextContext;
    public constructor(ctx: SupportedSetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public PROPERTY(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROPERTY, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetUserProperties) {
             listener.enterSetUserProperties(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetUserProperties) {
             listener.exitSetUserProperties(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetUserProperties) {
            return visitor.visitSetUserProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetDefaultStorageVaultContext extends SupportedSetStatementContext {
    public constructor(ctx: SupportedSetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode {
        return this.getToken(DorisParser.DEFAULT, 0)!;
    }
    public STORAGE(): antlr.TerminalNode {
        return this.getToken(DorisParser.STORAGE, 0)!;
    }
    public VAULT(): antlr.TerminalNode {
        return this.getToken(DorisParser.VAULT, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetDefaultStorageVault) {
             listener.enterSetDefaultStorageVault(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetDefaultStorageVault) {
             listener.exitSetDefaultStorageVault(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetDefaultStorageVault) {
            return visitor.visitSetDefaultStorageVault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetOptionsContext extends SupportedSetStatementContext {
    public constructor(ctx: SupportedSetStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public optionWithType(): OptionWithTypeContext[];
    public optionWithType(i: number): OptionWithTypeContext | null;
    public optionWithType(i?: number): OptionWithTypeContext[] | OptionWithTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OptionWithTypeContext);
        }

        return this.getRuleContext(i, OptionWithTypeContext);
    }
    public optionWithoutType(): OptionWithoutTypeContext[];
    public optionWithoutType(i: number): OptionWithoutTypeContext | null;
    public optionWithoutType(i?: number): OptionWithoutTypeContext[] | OptionWithoutTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OptionWithoutTypeContext);
        }

        return this.getRuleContext(i, OptionWithoutTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetOptions) {
             listener.enterSetOptions(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetOptions) {
             listener.exitSetOptions(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetOptions) {
            return visitor.visitSetOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionWithTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_optionWithType;
    }
    public override copyFrom(ctx: OptionWithTypeContext): void {
        super.copyFrom(ctx);
    }
}
export class SetVariableWithTypeContext extends OptionWithTypeContext {
    public constructor(ctx: OptionWithTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(DorisParser.EQ, 0)!;
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFAULT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetVariableWithType) {
             listener.enterSetVariableWithType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetVariableWithType) {
             listener.exitSetVariableWithType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetVariableWithType) {
            return visitor.visitSetVariableWithType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionWithoutTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_optionWithoutType;
    }
    public override copyFrom(ctx: OptionWithoutTypeContext): void {
        super.copyFrom(ctx);
    }
}
export class SetNamesContext extends OptionWithoutTypeContext {
    public constructor(ctx: OptionWithoutTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NAMES(): antlr.TerminalNode {
        return this.getToken(DorisParser.NAMES, 0)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(DorisParser.EQ, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetNames) {
             listener.enterSetNames(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetNames) {
             listener.exitSetNames(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetNames) {
            return visitor.visitSetNames(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetCharsetContext extends OptionWithoutTypeContext {
    public _charsetName?: IdentifierOrTextContext;
    public constructor(ctx: OptionWithoutTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHAR, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SET, 0);
    }
    public CHARSET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHARSET, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFAULT, 0);
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetCharset) {
             listener.enterSetCharset(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetCharset) {
             listener.exitSetCharset(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetCharset) {
            return visitor.visitSetCharset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetCollateContext extends OptionWithoutTypeContext {
    public _charsetName?: IdentifierOrTextContext;
    public _collateName?: IdentifierOrTextContext;
    public constructor(ctx: OptionWithoutTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NAMES(): antlr.TerminalNode {
        return this.getToken(DorisParser.NAMES, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.DEFAULT);
    	} else {
    		return this.getToken(DorisParser.DEFAULT, i);
    	}
    }
    public identifierOrText(): IdentifierOrTextContext[];
    public identifierOrText(i: number): IdentifierOrTextContext | null;
    public identifierOrText(i?: number): IdentifierOrTextContext[] | IdentifierOrTextContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierOrTextContext);
        }

        return this.getRuleContext(i, IdentifierOrTextContext);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COLLATE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetCollate) {
             listener.enterSetCollate(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetCollate) {
             listener.exitSetCollate(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetCollate) {
            return visitor.visitSetCollate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetPasswordContext extends OptionWithoutTypeContext {
    public _isPlain?: Token | null;
    public constructor(ctx: OptionWithoutTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PASSWORD(): antlr.TerminalNode[];
    public PASSWORD(i: number): antlr.TerminalNode | null;
    public PASSWORD(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.PASSWORD);
    	} else {
    		return this.getToken(DorisParser.PASSWORD, i);
    	}
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(DorisParser.EQ, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOR, 0);
    }
    public userIdentify(): UserIdentifyContext | null {
        return this.getRuleContext(0, UserIdentifyContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetPassword) {
             listener.enterSetPassword(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetPassword) {
             listener.exitSetPassword(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetPassword) {
            return visitor.visitSetPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetVariableWithoutTypeContext extends OptionWithoutTypeContext {
    public constructor(ctx: OptionWithoutTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public variable(): VariableContext {
        return this.getRuleContext(0, VariableContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetVariableWithoutType) {
             listener.enterSetVariableWithoutType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetVariableWithoutType) {
             listener.exitSetVariableWithoutType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetVariableWithoutType) {
            return visitor.visitSetVariableWithoutType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetLdapAdminPasswordContext extends OptionWithoutTypeContext {
    public constructor(ctx: OptionWithoutTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LDAP_ADMIN_PASSWORD(): antlr.TerminalNode {
        return this.getToken(DorisParser.LDAP_ADMIN_PASSWORD, 0)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(DorisParser.EQ, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetLdapAdminPassword) {
             listener.enterSetLdapAdminPassword(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetLdapAdminPassword) {
             listener.exitSetLdapAdminPassword(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetLdapAdminPassword) {
            return visitor.visitSetLdapAdminPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_variable;
    }
    public override copyFrom(ctx: VariableContext): void {
        super.copyFrom(ctx);
    }
}
export class SetUserVariableContext extends VariableContext {
    public constructor(ctx: VariableContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ATSIGN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ATSIGN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(DorisParser.EQ, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetUserVariable) {
             listener.enterSetUserVariable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetUserVariable) {
             listener.exitSetUserVariable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetUserVariable) {
            return visitor.visitSetUserVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSystemVariableContext extends VariableContext {
    public constructor(ctx: VariableContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(DorisParser.EQ, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFAULT, 0);
    }
    public DOUBLEATSIGN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DOUBLEATSIGN, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DOT, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetSystemVariable) {
             listener.enterSetSystemVariable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetSystemVariable) {
             listener.exitSetSystemVariable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetSystemVariable) {
            return visitor.visitSetSystemVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionAccessModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(DorisParser.READ, 0)!;
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ONLY, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WRITE, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_transactionAccessMode;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTransactionAccessMode) {
             listener.enterTransactionAccessMode(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTransactionAccessMode) {
             listener.exitTransactionAccessMode(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionAccessMode) {
            return visitor.visitTransactionAccessMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsolationLevelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ISOLATION(): antlr.TerminalNode {
        return this.getToken(DorisParser.ISOLATION, 0)!;
    }
    public LEVEL(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEVEL, 0)!;
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.READ, 0);
    }
    public UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UNCOMMITTED, 0);
    }
    public COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMITTED, 0);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPEATABLE, 0);
    }
    public SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SERIALIZABLE, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_isolationLevel;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIsolationLevel) {
             listener.enterIsolationLevel(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIsolationLevel) {
             listener.exitIsolationLevel(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIsolationLevel) {
            return visitor.visitIsolationLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SupportedUnsetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNSET(): antlr.TerminalNode {
        return this.getToken(DorisParser.UNSET, 0)!;
    }
    public VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VARIABLE, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFAULT, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STORAGE, 0);
    }
    public VAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VAULT, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_supportedUnsetStatement;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSupportedUnsetStatement) {
             listener.enterSupportedUnsetStatement(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSupportedUnsetStatement) {
             listener.exitSupportedUnsetStatement(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSupportedUnsetStatement) {
            return visitor.visitSupportedUnsetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedUseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedUseStatement;
    }
    public override copyFrom(ctx: UnsupportedUseStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class UseCloudClusterContext extends UnsupportedUseStatementContext {
    public _catalog?: IdentifierContext;
    public _database?: IdentifierContext;
    public _cluster?: IdentifierContext;
    public constructor(ctx: UnsupportedUseStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(DorisParser.USE, 0)!;
    }
    public ATSIGN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ATSIGN, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DOT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUseCloudCluster) {
             listener.enterUseCloudCluster(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUseCloudCluster) {
             listener.exitUseCloudCluster(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUseCloudCluster) {
            return visitor.visitUseCloudCluster(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UseDatabaseContext extends UnsupportedUseStatementContext {
    public _catalog?: IdentifierContext;
    public _database?: IdentifierContext;
    public constructor(ctx: UnsupportedUseStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(DorisParser.USE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DOT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUseDatabase) {
             listener.enterUseDatabase(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUseDatabase) {
             listener.exitUseDatabase(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUseDatabase) {
            return visitor.visitUseDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SwitchCatalogContext extends UnsupportedUseStatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: UnsupportedUseStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SWITCH(): antlr.TerminalNode {
        return this.getToken(DorisParser.SWITCH, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSwitchCatalog) {
             listener.enterSwitchCatalog(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSwitchCatalog) {
             listener.exitSwitchCatalog(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSwitchCatalog) {
            return visitor.visitSwitchCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedDmlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedDmlStatement;
    }
    public override copyFrom(ctx: UnsupportedDmlStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CopyIntoContext extends UnsupportedDmlStatementContext {
    public _name?: MultipartIdentifierContext;
    public _columns?: IdentifierListContext;
    public _properties?: PropertyClauseContext;
    public constructor(ctx: UnsupportedDmlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COPY(): antlr.TerminalNode {
        return this.getToken(DorisParser.COPY, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTO, 0)!;
    }
    public FROM(): antlr.TerminalNode[];
    public FROM(i: number): antlr.TerminalNode | null;
    public FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.FROM);
    	} else {
    		return this.getToken(DorisParser.FROM, i);
    	}
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public stageAndPattern(): StageAndPatternContext | null {
        return this.getRuleContext(0, StageAndPatternContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SELECT, 0);
    }
    public selectColumnClause(): SelectColumnClauseContext | null {
        return this.getRuleContext(0, SelectColumnClauseContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCopyInto) {
             listener.enterCopyInto(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCopyInto) {
             listener.exitCopyInto(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCopyInto) {
            return visitor.visitCopyInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TruncateTableContext extends UnsupportedDmlStatementContext {
    public constructor(ctx: UnsupportedDmlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRUNCATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TRUNCATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public specifiedPartition(): SpecifiedPartitionContext | null {
        return this.getRuleContext(0, SpecifiedPartitionContext);
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FORCE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTruncateTable) {
             listener.enterTruncateTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTruncateTable) {
             listener.exitTruncateTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StageAndPatternContext extends antlr.ParserRuleContext {
    public _stage?: IdentifierContext;
    public _pattern?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATSIGN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ATSIGN, 0)!;
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TILDE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_stageAndPattern;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterStageAndPattern) {
             listener.enterStageAndPattern(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitStageAndPattern) {
             listener.exitStageAndPattern(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitStageAndPattern) {
            return visitor.visitStageAndPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedKillStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedKillStatement;
    }
    public override copyFrom(ctx: UnsupportedKillStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class KillQueryContext extends UnsupportedKillStatementContext {
    public constructor(ctx: UnsupportedKillStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KILL(): antlr.TerminalNode {
        return this.getToken(DorisParser.KILL, 0)!;
    }
    public QUERY(): antlr.TerminalNode {
        return this.getToken(DorisParser.QUERY, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterKillQuery) {
             listener.enterKillQuery(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitKillQuery) {
             listener.exitKillQuery(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitKillQuery) {
            return visitor.visitKillQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class KillConnectionContext extends UnsupportedKillStatementContext {
    public constructor(ctx: UnsupportedKillStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KILL(): antlr.TerminalNode {
        return this.getToken(DorisParser.KILL, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONNECTION, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterKillConnection) {
             listener.enterKillConnection(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitKillConnection) {
             listener.exitKillConnection(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitKillConnection) {
            return visitor.visitKillConnection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedDescribeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unsupportedDescribeStatement;
    }
    public override copyFrom(ctx: UnsupportedDescribeStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class DescribeTableValuedFunctionContext extends UnsupportedDescribeStatementContext {
    public _tvfName?: IdentifierContext;
    public _properties?: PropertyItemListContext;
    public constructor(ctx: UnsupportedDescribeStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public explainCommand(): ExplainCommandContext {
        return this.getRuleContext(0, ExplainCommandContext)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(DorisParser.FUNCTION, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDescribeTableValuedFunction) {
             listener.enterDescribeTableValuedFunction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDescribeTableValuedFunction) {
             listener.exitDescribeTableValuedFunction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeTableValuedFunction) {
            return visitor.visitDescribeTableValuedFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeTableContext extends UnsupportedDescribeStatementContext {
    public constructor(ctx: UnsupportedDescribeStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public explainCommand(): ExplainCommandContext {
        return this.getRuleContext(0, ExplainCommandContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public specifiedPartition(): SpecifiedPartitionContext | null {
        return this.getRuleContext(0, SpecifiedPartitionContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDescribeTable) {
             listener.enterDescribeTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDescribeTable) {
             listener.exitDescribeTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeTable) {
            return visitor.visitDescribeTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeTableAllContext extends UnsupportedDescribeStatementContext {
    public constructor(ctx: UnsupportedDescribeStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public explainCommand(): ExplainCommandContext {
        return this.getRuleContext(0, ExplainCommandContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(DorisParser.ALL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDescribeTableAll) {
             listener.enterDescribeTableAll(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDescribeTableAll) {
             listener.exitDescribeTableAll(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeTableAll) {
            return visitor.visitDescribeTableAll(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintContext extends antlr.ParserRuleContext {
    public _slots?: IdentifierListContext;
    public _referenceTable?: MultipartIdentifierContext;
    public _referencedSlots?: IdentifierListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PRIMARY, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.KEY, 0);
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UNIQUE, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOREIGN, 0);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REFERENCES, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_constraint;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterConstraint) {
             listener.enterConstraint(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitConstraint) {
             listener.exitConstraint(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitConstraint) {
            return visitor.visitConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecContext extends antlr.ParserRuleContext {
    public _partitions?: IdentifierListContext;
    public _partition?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITION, 0);
    }
    public PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITIONS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TEMPORARY, 0);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ASTERISK, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_partitionSpec;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPartitionSpec) {
             listener.enterPartitionSpec(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPartitionSpec) {
             listener.exitPartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpec) {
            return visitor.visitPartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTableContext extends antlr.ParserRuleContext {
    public _autoPartition?: Token | null;
    public _partitionList?: IdentityOrFunctionListContext;
    public _partitions?: PartitionsDefContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BY, 0);
    }
    public identityOrFunctionList(): IdentityOrFunctionListContext | null {
        return this.getRuleContext(0, IdentityOrFunctionListContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public AUTO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTO, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RANGE, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LIST, 0);
    }
    public partitionsDef(): PartitionsDefContext | null {
        return this.getRuleContext(0, PartitionsDefContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_partitionTable;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPartitionTable) {
             listener.enterPartitionTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPartitionTable) {
             listener.exitPartitionTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionTable) {
            return visitor.visitPartitionTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentityOrFunctionListContext extends antlr.ParserRuleContext {
    public _identityOrFunction?: IdentityOrFunctionContext;
    public _partitions: IdentityOrFunctionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public identityOrFunction(): IdentityOrFunctionContext[];
    public identityOrFunction(i: number): IdentityOrFunctionContext | null;
    public identityOrFunction(i?: number): IdentityOrFunctionContext[] | IdentityOrFunctionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentityOrFunctionContext);
        }

        return this.getRuleContext(i, IdentityOrFunctionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_identityOrFunctionList;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIdentityOrFunctionList) {
             listener.enterIdentityOrFunctionList(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIdentityOrFunctionList) {
             listener.exitIdentityOrFunctionList(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIdentityOrFunctionList) {
            return visitor.visitIdentityOrFunctionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentityOrFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public functionCallExpression(): FunctionCallExpressionContext | null {
        return this.getRuleContext(0, FunctionCallExpressionContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_identityOrFunction;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIdentityOrFunction) {
             listener.enterIdentityOrFunction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIdentityOrFunction) {
             listener.exitIdentityOrFunction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIdentityOrFunction) {
            return visitor.visitIdentityOrFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataDescContext extends antlr.ParserRuleContext {
    public _STRING_LITERAL?: Token | null;
    public _filePaths: antlr.Token[] = [];
    public _filePath: antlr.Token[] = [];
    public _targetTableName?: IdentifierContext;
    public _partition?: IdentifierListContext;
    public _comma?: Token | null;
    public _separator?: Token | null;
    public _format?: IdentifierOrTextContext;
    public _compressType?: IdentifierOrTextContext;
    public _columns?: IdentifierListContext;
    public _columnsFromPath?: ColFromPathContext;
    public _columnMapping?: ColMappingListContext;
    public _preFilter?: PreFilterClauseContext;
    public _where?: WhereClauseContext;
    public _deleteOn?: DeleteOnClauseContext;
    public _sequenceColumn?: SequenceColClauseContext;
    public _sourceTableName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATA, 0)!;
    }
    public INFILE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INFILE, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTO, 0)!;
    }
    public TABLE(): antlr.TerminalNode[];
    public TABLE(i: number): antlr.TerminalNode | null;
    public TABLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.TABLE);
    	} else {
    		return this.getToken(DorisParser.TABLE, i);
    	}
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public mergeType(): MergeTypeContext | null {
        return this.getRuleContext(0, MergeTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITION, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COLUMNS, 0);
    }
    public TERMINATED(): antlr.TerminalNode[];
    public TERMINATED(i: number): antlr.TerminalNode | null;
    public TERMINATED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.TERMINATED);
    	} else {
    		return this.getToken(DorisParser.TERMINATED, i);
    	}
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.BY);
    	} else {
    		return this.getToken(DorisParser.BY, i);
    	}
    }
    public LINES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LINES, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FORMAT, 0);
    }
    public AS(): antlr.TerminalNode[];
    public AS(i: number): antlr.TerminalNode | null;
    public AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.AS);
    	} else {
    		return this.getToken(DorisParser.AS, i);
    	}
    }
    public COMPRESS_TYPE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMPRESS_TYPE, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public identifierOrText(): IdentifierOrTextContext[];
    public identifierOrText(i: number): IdentifierOrTextContext | null;
    public identifierOrText(i?: number): IdentifierOrTextContext[] | IdentifierOrTextContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierOrTextContext);
        }

        return this.getRuleContext(i, IdentifierOrTextContext);
    }
    public colFromPath(): ColFromPathContext | null {
        return this.getRuleContext(0, ColFromPathContext);
    }
    public colMappingList(): ColMappingListContext | null {
        return this.getRuleContext(0, ColMappingListContext);
    }
    public preFilterClause(): PreFilterClauseContext | null {
        return this.getRuleContext(0, PreFilterClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public deleteOnClause(): DeleteOnClauseContext | null {
        return this.getRuleContext(0, DeleteOnClauseContext);
    }
    public sequenceColClause(): SequenceColClauseContext | null {
        return this.getRuleContext(0, SequenceColClauseContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WITH, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FROM, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_dataDesc;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDataDesc) {
             listener.enterDataDesc(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDataDesc) {
             listener.exitDataDesc(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDataDesc) {
            return visitor.visitDataDesc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BuildModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BUILD(): antlr.TerminalNode {
        return this.getToken(DorisParser.BUILD, 0)!;
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IMMEDIATE, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFERRED, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_buildMode;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterBuildMode) {
             listener.enterBuildMode(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitBuildMode) {
             listener.exitBuildMode(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitBuildMode) {
            return visitor.visitBuildMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RefreshTriggerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public MANUAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MANUAL, 0);
    }
    public SCHEDULE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SCHEDULE, 0);
    }
    public refreshSchedule(): RefreshScheduleContext | null {
        return this.getRuleContext(0, RefreshScheduleContext);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMIT, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_refreshTrigger;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRefreshTrigger) {
             listener.enterRefreshTrigger(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRefreshTrigger) {
             listener.exitRefreshTrigger(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshTrigger) {
            return visitor.visitRefreshTrigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RefreshScheduleContext extends antlr.ParserRuleContext {
    public _refreshUnit?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVERY(): antlr.TerminalNode {
        return this.getToken(DorisParser.EVERY, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public STARTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STARTS, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_refreshSchedule;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRefreshSchedule) {
             listener.enterRefreshSchedule(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRefreshSchedule) {
             listener.exitRefreshSchedule(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshSchedule) {
            return visitor.visitRefreshSchedule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RefreshMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMPLETE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMPLETE, 0);
    }
    public AUTO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTO, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_refreshMethod;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRefreshMethod) {
             listener.enterRefreshMethod(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRefreshMethod) {
             listener.exitRefreshMethod(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshMethod) {
            return visitor.visitRefreshMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MvPartitionContext extends antlr.ParserRuleContext {
    public _partitionKey?: IdentifierContext;
    public _partitionExpr?: FunctionCallExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public functionCallExpression(): FunctionCallExpressionContext | null {
        return this.getRuleContext(0, FunctionCallExpressionContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_mvPartition;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMvPartition) {
             listener.enterMvPartition(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMvPartition) {
             listener.exitMvPartition(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMvPartition) {
            return visitor.visitMvPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierOrTextContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_identifierOrText;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIdentifierOrText) {
             listener.enterIdentifierOrText(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIdentifierOrText) {
             listener.exitIdentifierOrText(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierOrText) {
            return visitor.visitIdentifierOrText(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierOrTextOrAsteriskContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ASTERISK, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_identifierOrTextOrAsterisk;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIdentifierOrTextOrAsterisk) {
             listener.enterIdentifierOrTextOrAsterisk(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIdentifierOrTextOrAsterisk) {
             listener.exitIdentifierOrTextOrAsterisk(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierOrTextOrAsterisk) {
            return visitor.visitIdentifierOrTextOrAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierOrAsteriskContext extends antlr.ParserRuleContext {
    public _identifierOrAsterisk?: IdentifierOrAsteriskContext;
    public _parts: IdentifierOrAsteriskContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierOrAsterisk(): IdentifierOrAsteriskContext[];
    public identifierOrAsterisk(i: number): IdentifierOrAsteriskContext | null;
    public identifierOrAsterisk(i?: number): IdentifierOrAsteriskContext[] | IdentifierOrAsteriskContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierOrAsteriskContext);
        }

        return this.getRuleContext(i, IdentifierOrAsteriskContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.DOT);
    	} else {
    		return this.getToken(DorisParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_multipartIdentifierOrAsterisk;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMultipartIdentifierOrAsterisk) {
             listener.enterMultipartIdentifierOrAsterisk(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMultipartIdentifierOrAsterisk) {
             listener.exitMultipartIdentifierOrAsterisk(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierOrAsterisk) {
            return visitor.visitMultipartIdentifierOrAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierOrAsteriskContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ASTERISK, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_identifierOrAsterisk;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIdentifierOrAsterisk) {
             listener.enterIdentifierOrAsterisk(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIdentifierOrAsterisk) {
             listener.exitIdentifierOrAsterisk(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierOrAsterisk) {
            return visitor.visitIdentifierOrAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserIdentifyContext extends antlr.ParserRuleContext {
    public _user?: IdentifierOrTextContext;
    public _host?: IdentifierOrTextContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierOrText(): IdentifierOrTextContext[];
    public identifierOrText(i: number): IdentifierOrTextContext | null;
    public identifierOrText(i?: number): IdentifierOrTextContext[] | IdentifierOrTextContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierOrTextContext);
        }

        return this.getRuleContext(i, IdentifierOrTextContext);
    }
    public ATSIGN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ATSIGN, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_userIdentify;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUserIdentify) {
             listener.enterUserIdentify(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUserIdentify) {
             listener.exitUserIdentify(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUserIdentify) {
            return visitor.visitUserIdentify(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantUserIdentifyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentify(): UserIdentifyContext {
        return this.getRuleContext(0, UserIdentifyContext)!;
    }
    public IDENTIFIED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IDENTIFIED, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BY, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_grantUserIdentify;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterGrantUserIdentify) {
             listener.enterGrantUserIdentify(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitGrantUserIdentify) {
             listener.exitGrantUserIdentify(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitGrantUserIdentify) {
            return visitor.visitGrantUserIdentify(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainContext extends antlr.ParserRuleContext {
    public _level?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explainCommand(): ExplainCommandContext {
        return this.getRuleContext(0, ExplainCommandContext)!;
    }
    public planType(): PlanTypeContext | null {
        return this.getRuleContext(0, PlanTypeContext);
    }
    public PROCESS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROCESS, 0);
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VERBOSE, 0);
    }
    public TREE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TREE, 0);
    }
    public GRAPH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GRAPH, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PLAN, 0);
    }
    public DUMP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DUMP, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_explain;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterExplain) {
             listener.enterExplain(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitExplain) {
             listener.exitExplain(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitExplain) {
            return visitor.visitExplain(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXPLAIN, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DESC, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DESCRIBE, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_explainCommand;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterExplainCommand) {
             listener.enterExplainCommand(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitExplainCommand) {
             listener.exitExplainCommand(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitExplainCommand) {
            return visitor.visitExplainCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PlanTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARSED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARSED, 0);
    }
    public ANALYZED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ANALYZED, 0);
    }
    public REWRITTEN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REWRITTEN, 0);
    }
    public LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOGICAL, 0);
    }
    public OPTIMIZED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OPTIMIZED, 0);
    }
    public PHYSICAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PHYSICAL, 0);
    }
    public SHAPE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SHAPE, 0);
    }
    public MEMO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MEMO, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DISTRIBUTED, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_planType;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPlanType) {
             listener.enterPlanType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPlanType) {
             listener.exitPlanType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPlanType) {
            return visitor.visitPlanType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplayCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLAN(): antlr.TerminalNode {
        return this.getToken(DorisParser.PLAN, 0)!;
    }
    public REPLAYER(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPLAYER, 0)!;
    }
    public replayType(): ReplayTypeContext {
        return this.getRuleContext(0, ReplayTypeContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_replayCommand;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterReplayCommand) {
             listener.enterReplayCommand(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitReplayCommand) {
             listener.exitReplayCommand(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitReplayCommand) {
            return visitor.visitReplayCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplayTypeContext extends antlr.ParserRuleContext {
    public _filePath?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DUMP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DUMP, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public PLAY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PLAY, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_replayType;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterReplayType) {
             listener.enterReplayType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitReplayType) {
             listener.exitReplayType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitReplayType) {
            return visitor.visitReplayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public APPEND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.APPEND, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DELETE, 0);
    }
    public MERGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MERGE, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_mergeType;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMergeType) {
             listener.enterMergeType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMergeType) {
             listener.exitMergeType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMergeType) {
            return visitor.visitMergeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreFilterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRECEDING(): antlr.TerminalNode {
        return this.getToken(DorisParser.PRECEDING, 0)!;
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(DorisParser.FILTER, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_preFilterClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPreFilterClause) {
             listener.enterPreFilterClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPreFilterClause) {
             listener.exitPreFilterClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPreFilterClause) {
            return visitor.visitPreFilterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteOnClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(DorisParser.DELETE, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(DorisParser.ON, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_deleteOnClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDeleteOnClause) {
             listener.enterDeleteOnClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDeleteOnClause) {
             listener.exitDeleteOnClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteOnClause) {
            return visitor.visitDeleteOnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SequenceColClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(DorisParser.BY, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_sequenceColClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSequenceColClause) {
             listener.enterSequenceColClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSequenceColClause) {
             listener.exitSequenceColClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSequenceColClause) {
            return visitor.visitSequenceColClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColFromPathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMNS(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLUMNS, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public PATH(): antlr.TerminalNode {
        return this.getToken(DorisParser.PATH, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_colFromPath;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterColFromPath) {
             listener.enterColFromPath(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitColFromPath) {
             listener.exitColFromPath(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitColFromPath) {
            return visitor.visitColFromPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColMappingListContext extends antlr.ParserRuleContext {
    public _mappingExpr?: MappingExprContext;
    public _mappingSet: MappingExprContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(DorisParser.SET, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public mappingExpr(): MappingExprContext[];
    public mappingExpr(i: number): MappingExprContext | null;
    public mappingExpr(i?: number): MappingExprContext[] | MappingExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MappingExprContext);
        }

        return this.getRuleContext(i, MappingExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_colMappingList;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterColMappingList) {
             listener.enterColMappingList(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitColMappingList) {
             listener.exitColMappingList(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitColMappingList) {
            return visitor.visitColMappingList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MappingExprContext extends antlr.ParserRuleContext {
    public _mappingCol?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EQ, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_mappingExpr;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMappingExpr) {
             listener.enterMappingExpr(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMappingExpr) {
             listener.exitMappingExpr(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMappingExpr) {
            return visitor.visitMappingExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithRemoteStorageSystemContext extends antlr.ParserRuleContext {
    public _brokerProperties?: PropertyItemListContext;
    public _brokerName?: IdentifierOrTextContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public resourceDesc(): ResourceDescContext | null {
        return this.getRuleContext(0, ResourceDescContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WITH, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.S3, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HDFS, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public BROKER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BROKER, 0);
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_withRemoteStorageSystem;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWithRemoteStorageSystem) {
             listener.enterWithRemoteStorageSystem(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWithRemoteStorageSystem) {
             listener.exitWithRemoteStorageSystem(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWithRemoteStorageSystem) {
            return visitor.visitWithRemoteStorageSystem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceDescContext extends antlr.ParserRuleContext {
    public _resourceName?: IdentifierOrTextContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(DorisParser.WITH, 0)!;
    }
    public RESOURCE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RESOURCE, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_resourceDesc;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterResourceDesc) {
             listener.enterResourceDesc(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitResourceDesc) {
             listener.exitResourceDesc(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitResourceDesc) {
            return visitor.visitResourceDesc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MysqlDataDescContext extends antlr.ParserRuleContext {
    public _filePath?: Token | null;
    public _tableName?: MultipartIdentifierContext;
    public _partition?: IdentifierListContext;
    public _comma?: Token | null;
    public _separator?: Token | null;
    public _columns?: IdentifierListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATA, 0)!;
    }
    public INFILE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INFILE, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTO, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITION, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COLUMNS, 0);
    }
    public TERMINATED(): antlr.TerminalNode[];
    public TERMINATED(i: number): antlr.TerminalNode | null;
    public TERMINATED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.TERMINATED);
    	} else {
    		return this.getToken(DorisParser.TERMINATED, i);
    	}
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.BY);
    	} else {
    		return this.getToken(DorisParser.BY, i);
    	}
    }
    public LINES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LINES, 0);
    }
    public skipLines(): SkipLinesContext | null {
        return this.getRuleContext(0, SkipLinesContext);
    }
    public colMappingList(): ColMappingListContext | null {
        return this.getRuleContext(0, ColMappingListContext);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_mysqlDataDesc;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMysqlDataDesc) {
             listener.enterMysqlDataDesc(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMysqlDataDesc) {
             listener.exitMysqlDataDesc(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMysqlDataDesc) {
            return visitor.visitMysqlDataDesc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipLinesContext extends antlr.ParserRuleContext {
    public _lines?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE(): antlr.TerminalNode {
        return this.getToken(DorisParser.IGNORE, 0)!;
    }
    public LINES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LINES, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROWS, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_skipLines;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSkipLines) {
             listener.enterSkipLines(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSkipLines) {
             listener.exitSkipLines(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSkipLines) {
            return visitor.visitSkipLines(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OutFileClauseContext extends antlr.ParserRuleContext {
    public _filePath?: ConstantContext;
    public _format?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTO, 0)!;
    }
    public OUTFILE(): antlr.TerminalNode {
        return this.getToken(DorisParser.OUTFILE, 0)!;
    }
    public constant(): ConstantContext {
        return this.getRuleContext(0, ConstantContext)!;
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FORMAT, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AS, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_outFileClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterOutFileClause) {
             listener.enterOutFileClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitOutFileClause) {
             listener.exitOutFileClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitOutFileClause) {
            return visitor.visitOutFileClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryTerm(): QueryTermContext {
        return this.getRuleContext(0, QueryTermContext)!;
    }
    public queryOrganization(): QueryOrganizationContext {
        return this.getRuleContext(0, QueryOrganizationContext)!;
    }
    public cte(): CteContext | null {
        return this.getRuleContext(0, CteContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_query;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterQuery) {
             listener.enterQuery(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitQuery) {
             listener.exitQuery(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitQuery) {
            return visitor.visitQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_queryTerm;
    }
    public override copyFrom(ctx: QueryTermContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryTermDefaultContext extends QueryTermContext {
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryPrimary(): QueryPrimaryContext {
        return this.getRuleContext(0, QueryPrimaryContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterQueryTermDefault) {
             listener.enterQueryTermDefault(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitQueryTermDefault) {
             listener.exitQueryTermDefault(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitQueryTermDefault) {
            return visitor.visitQueryTermDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetOperationContext extends QueryTermContext {
    public _left?: QueryTermContext;
    public _operator?: Token | null;
    public _right?: QueryTermContext;
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryTerm(): QueryTermContext[];
    public queryTerm(i: number): QueryTermContext | null;
    public queryTerm(i?: number): QueryTermContext[] | QueryTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryTermContext);
        }

        return this.getRuleContext(i, QueryTermContext);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTERSECT, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UNION, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXCEPT, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MINUS, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetOperation) {
             listener.enterSetOperation(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetOperation) {
             listener.exitSetOperation(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetOperation) {
            return visitor.visitSetOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DISTINCT, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_setQuantifier;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_queryPrimary;
    }
    public override copyFrom(ctx: QueryPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSubquery) {
             listener.enterSubquery(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSubquery) {
             listener.exitSubquery(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSubquery) {
            return visitor.visitSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ValuesTableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public inlineTable(): InlineTableContext {
        return this.getRuleContext(0, InlineTableContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterValuesTable) {
             listener.enterValuesTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitValuesTable) {
             listener.exitValuesTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitValuesTable) {
            return visitor.visitValuesTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QueryPrimaryDefaultContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public querySpecification(): QuerySpecificationContext {
        return this.getRuleContext(0, QuerySpecificationContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterQueryPrimaryDefault) {
             listener.enterQueryPrimaryDefault(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitQueryPrimaryDefault) {
             listener.exitQueryPrimaryDefault(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitQueryPrimaryDefault) {
            return visitor.visitQueryPrimaryDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_querySpecification;
    }
    public override copyFrom(ctx: QuerySpecificationContext): void {
        super.copyFrom(ctx);
    }
}
export class RegularQuerySpecificationContext extends QuerySpecificationContext {
    public constructor(ctx: QuerySpecificationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public queryOrganization(): QueryOrganizationContext {
        return this.getRuleContext(0, QueryOrganizationContext)!;
    }
    public intoClause(): IntoClauseContext | null {
        return this.getRuleContext(0, IntoClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public aggClause(): AggClauseContext | null {
        return this.getRuleContext(0, AggClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(0, QualifyClauseContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRegularQuerySpecification) {
             listener.enterRegularQuerySpecification(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRegularQuerySpecification) {
             listener.exitRegularQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRegularQuerySpecification) {
            return visitor.visitRegularQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(DorisParser.WITH, 0)!;
    }
    public aliasQuery(): AliasQueryContext[];
    public aliasQuery(i: number): AliasQueryContext | null;
    public aliasQuery(i?: number): AliasQueryContext[] | AliasQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AliasQueryContext);
        }

        return this.getRuleContext(i, AliasQueryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_cte;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCte) {
             listener.enterCte(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCte) {
             listener.exitCte(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCte) {
            return visitor.visitCte(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasQueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_aliasQuery;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAliasQuery) {
             listener.enterAliasQuery(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAliasQuery) {
             listener.exitAliasQuery(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAliasQuery) {
            return visitor.visitAliasQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_columnAliases;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterColumnAliases) {
             listener.enterColumnAliases(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitColumnAliases) {
             listener.exitColumnAliases(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitColumnAliases) {
            return visitor.visitColumnAliases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(DorisParser.SELECT, 0)!;
    }
    public selectColumnClause(): SelectColumnClauseContext {
        return this.getRuleContext(0, SelectColumnClauseContext)!;
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DISTINCT, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_selectClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSelectClause) {
             listener.enterSelectClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSelectClause) {
             listener.exitSelectClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectColumnClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_selectColumnClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSelectColumnClause) {
             listener.enterSelectColumnClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSelectColumnClause) {
             listener.exitSelectColumnClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSelectColumnClause) {
            return visitor.visitSelectColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(DorisParser.WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_whereClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public relations(): RelationsContext {
        return this.getRuleContext(0, RelationsContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_fromClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntoClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTO, 0)!;
    }
    public tableRow(): TableRowContext[];
    public tableRow(i: number): TableRowContext | null;
    public tableRow(i?: number): TableRowContext[] | TableRowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableRowContext);
        }

        return this.getRuleContext(i, TableRowContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public bulkCollectClause(): BulkCollectClauseContext | null {
        return this.getRuleContext(0, BulkCollectClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_intoClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIntoClause) {
             listener.enterIntoClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIntoClause) {
             listener.exitIntoClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIntoClause) {
            return visitor.visitIntoClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BulkCollectClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BULK(): antlr.TerminalNode {
        return this.getToken(DorisParser.BULK, 0)!;
    }
    public COLLECT(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLLECT, 0)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_bulkCollectClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterBulkCollectClause) {
             listener.enterBulkCollectClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitBulkCollectClause) {
             listener.exitBulkCollectClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitBulkCollectClause) {
            return visitor.visitBulkCollectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_tableRow;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTableRow) {
             listener.enterTableRow(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTableRow) {
             listener.exitTableRow(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTableRow) {
            return visitor.visitTableRow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_relations;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRelations) {
             listener.enterRelations(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRelations) {
             listener.exitRelations(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRelations) {
            return visitor.visitRelations(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public joinRelation(): JoinRelationContext[];
    public joinRelation(i: number): JoinRelationContext | null;
    public joinRelation(i?: number): JoinRelationContext[] | JoinRelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinRelationContext);
        }

        return this.getRuleContext(i, JoinRelationContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_relation;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRelation) {
             listener.enterRelation(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRelation) {
             listener.exitRelation(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRelation) {
            return visitor.visitRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinRelationContext extends antlr.ParserRuleContext {
    public _right?: RelationPrimaryContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(DorisParser.JOIN, 0)!;
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public joinType(): JoinTypeContext | null {
        return this.getRuleContext(0, JoinTypeContext);
    }
    public distributeType(): DistributeTypeContext | null {
        return this.getRuleContext(0, DistributeTypeContext);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_joinRelation;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterJoinRelation) {
             listener.enterJoinRelation(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitJoinRelation) {
             listener.exitJoinRelation(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitJoinRelation) {
            return visitor.visitJoinRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DistributeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_distributeType;
    }
    public override copyFrom(ctx: DistributeTypeContext): void {
        super.copyFrom(ctx);
    }
}
export class CommentDistributeTypeContext extends DistributeTypeContext {
    public constructor(ctx: DistributeTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public HINT_START(): antlr.TerminalNode {
        return this.getToken(DorisParser.HINT_START, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public HINT_END(): antlr.TerminalNode {
        return this.getToken(DorisParser.HINT_END, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCommentDistributeType) {
             listener.enterCommentDistributeType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCommentDistributeType) {
             listener.exitCommentDistributeType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCommentDistributeType) {
            return visitor.visitCommentDistributeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BracketDistributeTypeContext extends DistributeTypeContext {
    public constructor(ctx: DistributeTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_BRACKET, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RIGHT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_BRACKET, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterBracketDistributeType) {
             listener.enterBracketDistributeType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitBracketDistributeType) {
             listener.exitBracketDistributeType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitBracketDistributeType) {
            return visitor.visitBracketDistributeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationHintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_relationHint;
    }
    public override copyFrom(ctx: RelationHintContext): void {
        super.copyFrom(ctx);
    }
}
export class BracketRelationHintContext extends RelationHintContext {
    public constructor(ctx: RelationHintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_BRACKET, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RIGHT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterBracketRelationHint) {
             listener.enterBracketRelationHint(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitBracketRelationHint) {
             listener.exitBracketRelationHint(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitBracketRelationHint) {
            return visitor.visitBracketRelationHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentRelationHintContext extends RelationHintContext {
    public constructor(ctx: RelationHintContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public HINT_START(): antlr.TerminalNode {
        return this.getToken(DorisParser.HINT_START, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public HINT_END(): antlr.TerminalNode {
        return this.getToken(DorisParser.HINT_END, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCommentRelationHint) {
             listener.enterCommentRelationHint(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCommentRelationHint) {
             listener.exitCommentRelationHint(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCommentRelationHint) {
            return visitor.visitCommentRelationHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(DorisParser.GROUP, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(DorisParser.BY, 0)!;
    }
    public groupingElement(): GroupingElementContext {
        return this.getRuleContext(0, GroupingElementContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_aggClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAggClause) {
             listener.enterAggClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAggClause) {
             listener.exitAggClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAggClause) {
            return visitor.visitAggClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLLUP, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CUBE, 0);
    }
    public GROUPING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GROUPING, 0);
    }
    public SETS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SETS, 0);
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_groupingElement;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterGroupingElement) {
             listener.enterGroupingElement(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitGroupingElement) {
             listener.exitGroupingElement(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingElement) {
            return visitor.visitGroupingElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_groupingSet;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterGroupingSet) {
             listener.enterGroupingSet(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitGroupingSet) {
             listener.exitGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING(): antlr.TerminalNode {
        return this.getToken(DorisParser.HAVING, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_havingClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUALIFY(): antlr.TerminalNode {
        return this.getToken(DorisParser.QUALIFY, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_qualifyClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterQualifyClause) {
             listener.enterQualifyClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitQualifyClause) {
             listener.exitQualifyClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitQualifyClause) {
            return visitor.visitQualifyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectHintContext extends antlr.ParserRuleContext {
    public _hintStatement?: HintStatementContext;
    public _hintStatements: HintStatementContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HINT_END(): antlr.TerminalNode {
        return this.getToken(DorisParser.HINT_END, 0)!;
    }
    public hintStatement(): HintStatementContext[];
    public hintStatement(i: number): HintStatementContext | null;
    public hintStatement(i?: number): HintStatementContext[] | HintStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintStatementContext);
        }

        return this.getRuleContext(i, HintStatementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_selectHint;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSelectHint) {
             listener.enterSelectHint(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSelectHint) {
             listener.exitSelectHint(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSelectHint) {
            return visitor.visitSelectHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintStatementContext extends antlr.ParserRuleContext {
    public _hintName?: IdentifierContext;
    public _hintAssignment?: HintAssignmentContext;
    public _parameters: HintAssignmentContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public hintAssignment(): HintAssignmentContext[];
    public hintAssignment(i: number): HintAssignmentContext | null;
    public hintAssignment(i?: number): HintAssignmentContext[] | HintAssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintAssignmentContext);
        }

        return this.getRuleContext(i, HintAssignmentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_hintStatement;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterHintStatement) {
             listener.enterHintStatement(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitHintStatement) {
             listener.exitHintStatement(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitHintStatement) {
            return visitor.visitHintStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintAssignmentContext extends antlr.ParserRuleContext {
    public _key?: IdentifierOrTextContext;
    public _constantValue?: ConstantContext;
    public _identifierValue?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EQ, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_hintAssignment;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterHintAssignment) {
             listener.enterHintAssignment(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitHintAssignment) {
             listener.exitHintAssignment(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitHintAssignment) {
            return visitor.visitHintAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateAssignmentContext extends antlr.ParserRuleContext {
    public _col?: MultipartIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(DorisParser.EQ, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_updateAssignment;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUpdateAssignment) {
             listener.enterUpdateAssignment(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUpdateAssignment) {
             listener.exitUpdateAssignment(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateAssignment) {
            return visitor.visitUpdateAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateAssignmentSeqContext extends antlr.ParserRuleContext {
    public _updateAssignment?: UpdateAssignmentContext;
    public _assignments: UpdateAssignmentContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public updateAssignment(): UpdateAssignmentContext[];
    public updateAssignment(i: number): UpdateAssignmentContext | null;
    public updateAssignment(i?: number): UpdateAssignmentContext[] | UpdateAssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdateAssignmentContext);
        }

        return this.getRuleContext(i, UpdateAssignmentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_updateAssignmentSeq;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUpdateAssignmentSeq) {
             listener.enterUpdateAssignmentSeq(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUpdateAssignmentSeq) {
             listener.exitUpdateAssignmentSeq(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateAssignmentSeq) {
            return visitor.visitUpdateAssignmentSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LateralViewContext extends antlr.ParserRuleContext {
    public _functionName?: IdentifierContext;
    public _tableName?: IdentifierContext;
    public _identifier?: IdentifierContext;
    public _columnNames: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LATERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.LATERAL, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(DorisParser.VIEW, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_lateralView;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLateralView) {
             listener.enterLateralView(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLateralView) {
             listener.exitLateralView(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLateralView) {
            return visitor.visitLateralView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryOrganizationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_queryOrganization;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterQueryOrganization) {
             listener.enterQueryOrganization(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitQueryOrganization) {
             listener.exitQueryOrganization(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitQueryOrganization) {
            return visitor.visitQueryOrganization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(DorisParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(DorisParser.BY, 0)!;
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_sortClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSortClause) {
             listener.enterSortClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSortClause) {
             listener.exitSortClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSortClause) {
            return visitor.visitSortClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortItemContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NULLS, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FIRST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LAST, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_sortItem;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSortItem) {
             listener.enterSortItem(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSortItem) {
             listener.exitSortItem(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSortItem) {
            return visitor.visitSortItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public _limit?: Token | null;
    public _offset?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LIMIT, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(DorisParser.INTEGER_VALUE, i);
    	}
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OFFSET, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_limitClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLimitClause) {
             listener.enterLimitClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLimitClause) {
             listener.exitLimitClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(DorisParser.BY, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_partitionClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPartitionClause) {
             listener.enterPartitionClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPartitionClause) {
             listener.exitPartitionClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionClause) {
            return visitor.visitPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INNER, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CROSS, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OUTER, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FULL, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SEMI, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ANTI, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_joinType;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterJoinType) {
             listener.enterJoinType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitJoinType) {
             listener.exitJoinType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.USING, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_joinCriteria;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterJoinCriteria) {
             listener.enterJoinCriteria(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitJoinCriteria) {
             listener.exitJoinCriteria(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public identifierSeq(): IdentifierSeqContext {
        return this.getRuleContext(0, IdentifierSeqContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_identifierList;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIdentifierList) {
             listener.enterIdentifierList(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIdentifierList) {
             listener.exitIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierSeqContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _ident: ErrorCapturingIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_identifierSeq;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIdentifierSeq) {
             listener.enterIdentifierSeq(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIdentifierSeq) {
             listener.exitIdentifierSeq(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierSeq) {
            return visitor.visitIdentifierSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptScanParamsContext extends antlr.ParserRuleContext {
    public _funcName?: IdentifierContext;
    public _properties?: PropertyItemListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATSIGN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ATSIGN, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_optScanParams;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterOptScanParams) {
             listener.enterOptScanParams(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitOptScanParams) {
             listener.exitOptScanParams(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitOptScanParams) {
            return visitor.visitOptScanParams(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_relationPrimary;
    }
    public override copyFrom(ctx: RelationPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class TableValuedFunctionContext extends RelationPrimaryContext {
    public _tvfName?: IdentifierContext;
    public _properties?: PropertyItemListContext;
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTableValuedFunction) {
             listener.enterTableValuedFunction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTableValuedFunction) {
             listener.exitTableValuedFunction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTableValuedFunction) {
            return visitor.visitTableValuedFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RelationListContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public relations(): RelationsContext {
        return this.getRuleContext(0, RelationsContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRelationList) {
             listener.enterRelationList(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRelationList) {
             listener.exitRelationList(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRelationList) {
            return visitor.visitRelationList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AliasedQueryContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAliasedQuery) {
             listener.enterAliasedQuery(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAliasedQuery) {
             listener.exitAliasedQuery(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAliasedQuery) {
            return visitor.visitAliasedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableNameContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public optScanParams(): OptScanParamsContext | null {
        return this.getRuleContext(0, OptScanParamsContext);
    }
    public materializedViewName(): MaterializedViewNameContext | null {
        return this.getRuleContext(0, MaterializedViewNameContext);
    }
    public tableSnapshot(): TableSnapshotContext | null {
        return this.getRuleContext(0, TableSnapshotContext);
    }
    public specifiedPartition(): SpecifiedPartitionContext | null {
        return this.getRuleContext(0, SpecifiedPartitionContext);
    }
    public tabletList(): TabletListContext | null {
        return this.getRuleContext(0, TabletListContext);
    }
    public sample(): SampleContext | null {
        return this.getRuleContext(0, SampleContext);
    }
    public relationHint(): RelationHintContext | null {
        return this.getRuleContext(0, RelationHintContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaterializedViewNameContext extends antlr.ParserRuleContext {
    public _indexName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(DorisParser.INDEX, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_materializedViewName;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMaterializedViewName) {
             listener.enterMaterializedViewName(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMaterializedViewName) {
             listener.exitMaterializedViewName(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMaterializedViewName) {
            return visitor.visitMaterializedViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyClauseContext extends antlr.ParserRuleContext {
    public _fileProperties?: PropertyItemListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROPERTIES(): antlr.TerminalNode {
        return this.getToken(DorisParser.PROPERTIES, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public propertyItemList(): PropertyItemListContext {
        return this.getRuleContext(0, PropertyItemListContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_propertyClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPropertyClause) {
             listener.enterPropertyClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPropertyClause) {
             listener.exitPropertyClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyClause) {
            return visitor.visitPropertyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyItemListContext extends antlr.ParserRuleContext {
    public _propertyItem?: PropertyItemContext;
    public _properties: PropertyItemContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyItem(): PropertyItemContext[];
    public propertyItem(i: number): PropertyItemContext | null;
    public propertyItem(i?: number): PropertyItemContext[] | PropertyItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyItemContext);
        }

        return this.getRuleContext(i, PropertyItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_propertyItemList;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPropertyItemList) {
             listener.enterPropertyItemList(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPropertyItemList) {
             listener.exitPropertyItemList(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyItemList) {
            return visitor.visitPropertyItemList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyItemContext extends antlr.ParserRuleContext {
    public _key?: PropertyKeyContext;
    public _value?: PropertyValueContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(DorisParser.EQ, 0)!;
    }
    public propertyKey(): PropertyKeyContext {
        return this.getRuleContext(0, PropertyKeyContext)!;
    }
    public propertyValue(): PropertyValueContext {
        return this.getRuleContext(0, PropertyValueContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_propertyItem;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPropertyItem) {
             listener.enterPropertyItem(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPropertyItem) {
             listener.exitPropertyItem(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyItem) {
            return visitor.visitPropertyItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_propertyKey;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPropertyKey) {
             listener.enterPropertyKey(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPropertyKey) {
             listener.exitPropertyKey(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyKey) {
            return visitor.visitPropertyKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_propertyValue;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPropertyValue) {
             listener.enterPropertyValue(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPropertyValue) {
             listener.exitPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyValue) {
            return visitor.visitPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public strictIdentifier(): StrictIdentifierContext | null {
        return this.getRuleContext(0, StrictIdentifierContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_tableAlias;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _parts: ErrorCapturingIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.DOT);
    	} else {
    		return this.getToken(DorisParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_multipartIdentifier;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMultipartIdentifier) {
             listener.enterMultipartIdentifier(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMultipartIdentifier) {
             listener.exitMultipartIdentifier(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifier) {
            return visitor.visitMultipartIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleColumnDefsContext extends antlr.ParserRuleContext {
    public _simpleColumnDef?: SimpleColumnDefContext;
    public _cols: SimpleColumnDefContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleColumnDef(): SimpleColumnDefContext[];
    public simpleColumnDef(i: number): SimpleColumnDefContext | null;
    public simpleColumnDef(i?: number): SimpleColumnDefContext[] | SimpleColumnDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimpleColumnDefContext);
        }

        return this.getRuleContext(i, SimpleColumnDefContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_simpleColumnDefs;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSimpleColumnDefs) {
             listener.enterSimpleColumnDefs(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSimpleColumnDefs) {
             listener.exitSimpleColumnDefs(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleColumnDefs) {
            return visitor.visitSimpleColumnDefs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleColumnDefContext extends antlr.ParserRuleContext {
    public _colName?: IdentifierContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_simpleColumnDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSimpleColumnDef) {
             listener.enterSimpleColumnDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSimpleColumnDef) {
             listener.exitSimpleColumnDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleColumnDef) {
            return visitor.visitSimpleColumnDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDefsContext extends antlr.ParserRuleContext {
    public _columnDef?: ColumnDefContext;
    public _cols: ColumnDefContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnDef(): ColumnDefContext[];
    public columnDef(i: number): ColumnDefContext | null;
    public columnDef(i?: number): ColumnDefContext[] | ColumnDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnDefContext);
        }

        return this.getRuleContext(i, ColumnDefContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_columnDefs;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterColumnDefs) {
             listener.enterColumnDefs(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitColumnDefs) {
             listener.exitColumnDefs(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitColumnDefs) {
            return visitor.visitColumnDefs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDefContext extends antlr.ParserRuleContext {
    public _colName?: IdentifierContext;
    public _type_?: DataTypeContext;
    public _aggType?: AggTypeDefContext;
    public _generatedExpr?: ExpressionContext;
    public _nullable?: Token | null;
    public _autoIncInitValue?: NumberContext;
    public _nullValue?: Token | null;
    public _stringValue?: Token | null;
    public _defaultTimestamp?: Token | null;
    public _defaultValuePrecision?: NumberContext;
    public _onUpdateValuePrecision?: NumberContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.KEY, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.LEFT_PAREN);
    	} else {
    		return this.getToken(DorisParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(DorisParser.RIGHT_PAREN, i);
    	}
    }
    public AUTO_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTO_INCREMENT, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFAULT, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ON, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UPDATE, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode[];
    public CURRENT_TIMESTAMP(i: number): antlr.TerminalNode | null;
    public CURRENT_TIMESTAMP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.CURRENT_TIMESTAMP);
    	} else {
    		return this.getToken(DorisParser.CURRENT_TIMESTAMP, i);
    	}
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public aggTypeDef(): AggTypeDefContext | null {
        return this.getRuleContext(0, AggTypeDefContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public NULL(): antlr.TerminalNode[];
    public NULL(i: number): antlr.TerminalNode | null;
    public NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.NULL);
    	} else {
    		return this.getToken(DorisParser.NULL, i);
    	}
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.STRING_LITERAL);
    	} else {
    		return this.getToken(DorisParser.STRING_LITERAL, i);
    	}
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DECIMAL_VALUE, 0);
    }
    public PI(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PI, 0);
    }
    public E(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.E, 0);
    }
    public BITMAP_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITMAP_EMPTY, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CURRENT_DATE, 0);
    }
    public GENERATED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GENERATED, 0);
    }
    public ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALWAYS, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public number_(): NumberContext[];
    public number_(i: number): NumberContext | null;
    public number_(i?: number): NumberContext[] | NumberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumberContext);
        }

        return this.getRuleContext(i, NumberContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_columnDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterColumnDef) {
             listener.enterColumnDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitColumnDef) {
             listener.exitColumnDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitColumnDef) {
            return visitor.visitColumnDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexDefsContext extends antlr.ParserRuleContext {
    public _indexDef?: IndexDefContext;
    public _indexes: IndexDefContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexDef(): IndexDefContext[];
    public indexDef(i: number): IndexDefContext | null;
    public indexDef(i?: number): IndexDefContext[] | IndexDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexDefContext);
        }

        return this.getRuleContext(i, IndexDefContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_indexDefs;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIndexDefs) {
             listener.enterIndexDefs(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIndexDefs) {
             listener.exitIndexDefs(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIndexDefs) {
            return visitor.visitIndexDefs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexDefContext extends antlr.ParserRuleContext {
    public _indexName?: IdentifierContext;
    public _cols?: IdentifierListContext;
    public _indexType?: Token | null;
    public _properties?: PropertyItemListContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(DorisParser.INDEX, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.USING, 0);
    }
    public PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROPERTIES, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public BITMAP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITMAP, 0);
    }
    public INVERTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INVERTED, 0);
    }
    public NGRAM_BF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NGRAM_BF, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_indexDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIndexDef) {
             listener.enterIndexDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIndexDef) {
             listener.exitIndexDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIndexDef) {
            return visitor.visitIndexDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionsDefContext extends antlr.ParserRuleContext {
    public _partitionDef?: PartitionDefContext;
    public _partitions: PartitionDefContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionDef(): PartitionDefContext[];
    public partitionDef(i: number): PartitionDefContext | null;
    public partitionDef(i?: number): PartitionDefContext[] | PartitionDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionDefContext);
        }

        return this.getRuleContext(i, PartitionDefContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_partitionsDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPartitionsDef) {
             listener.enterPartitionsDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPartitionsDef) {
             listener.exitPartitionsDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionsDef) {
            return visitor.visitPartitionsDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDefContext extends antlr.ParserRuleContext {
    public _partitionProperties?: PropertyItemListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lessThanPartitionDef(): LessThanPartitionDefContext | null {
        return this.getRuleContext(0, LessThanPartitionDefContext);
    }
    public fixedPartitionDef(): FixedPartitionDefContext | null {
        return this.getRuleContext(0, FixedPartitionDefContext);
    }
    public stepPartitionDef(): StepPartitionDefContext | null {
        return this.getRuleContext(0, StepPartitionDefContext);
    }
    public inPartitionDef(): InPartitionDefContext | null {
        return this.getRuleContext(0, InPartitionDefContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public propertyItemList(): PropertyItemListContext | null {
        return this.getRuleContext(0, PropertyItemListContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_partitionDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPartitionDef) {
             listener.enterPartitionDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPartitionDef) {
             listener.exitPartitionDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionDef) {
            return visitor.visitPartitionDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LessThanPartitionDefContext extends antlr.ParserRuleContext {
    public _partitionName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(DorisParser.VALUES, 0)!;
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(DorisParser.LESS, 0)!;
    }
    public THAN(): antlr.TerminalNode {
        return this.getToken(DorisParser.THAN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MAXVALUE, 0);
    }
    public partitionValueList(): PartitionValueListContext | null {
        return this.getRuleContext(0, PartitionValueListContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_lessThanPartitionDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLessThanPartitionDef) {
             listener.enterLessThanPartitionDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLessThanPartitionDef) {
             listener.exitLessThanPartitionDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLessThanPartitionDef) {
            return visitor.visitLessThanPartitionDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FixedPartitionDefContext extends antlr.ParserRuleContext {
    public _partitionName?: IdentifierContext;
    public _lower?: PartitionValueListContext;
    public _upper?: PartitionValueListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(DorisParser.VALUES, 0)!;
    }
    public LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMA, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public partitionValueList(): PartitionValueListContext[];
    public partitionValueList(i: number): PartitionValueListContext | null;
    public partitionValueList(i?: number): PartitionValueListContext[] | PartitionValueListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValueListContext);
        }

        return this.getRuleContext(i, PartitionValueListContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_fixedPartitionDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFixedPartitionDef) {
             listener.enterFixedPartitionDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFixedPartitionDef) {
             listener.exitFixedPartitionDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFixedPartitionDef) {
            return visitor.visitFixedPartitionDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StepPartitionDefContext extends antlr.ParserRuleContext {
    public _from_?: PartitionValueListContext;
    public _to?: PartitionValueListContext;
    public _unitsAmount?: Token | null;
    public _unit?: DatetimeUnitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(DorisParser.TO, 0)!;
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTERVAL, 0)!;
    }
    public partitionValueList(): PartitionValueListContext[];
    public partitionValueList(i: number): PartitionValueListContext | null;
    public partitionValueList(i?: number): PartitionValueListContext[] | PartitionValueListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValueListContext);
        }

        return this.getRuleContext(i, PartitionValueListContext);
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public datetimeUnit(): DatetimeUnitContext | null {
        return this.getRuleContext(0, DatetimeUnitContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_stepPartitionDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterStepPartitionDef) {
             listener.enterStepPartitionDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitStepPartitionDef) {
             listener.exitStepPartitionDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitStepPartitionDef) {
            return visitor.visitStepPartitionDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InPartitionDefContext extends antlr.ParserRuleContext {
    public _partitionName?: IdentifierContext;
    public _partitionValueList?: PartitionValueListContext;
    public _partitionValueLists: PartitionValueListContext[] = [];
    public _constants?: PartitionValueListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(DorisParser.PARTITION, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXISTS, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VALUES, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public partitionValueList(): PartitionValueListContext[];
    public partitionValueList(i: number): PartitionValueListContext | null;
    public partitionValueList(i?: number): PartitionValueListContext[] | PartitionValueListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValueListContext);
        }

        return this.getRuleContext(i, PartitionValueListContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_inPartitionDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterInPartitionDef) {
             listener.enterInPartitionDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitInPartitionDef) {
             listener.exitInPartitionDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitInPartitionDef) {
            return visitor.visitInPartitionDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValueListContext extends antlr.ParserRuleContext {
    public _partitionValueDef?: PartitionValueDefContext;
    public _values: PartitionValueDefContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public partitionValueDef(): PartitionValueDefContext[];
    public partitionValueDef(i: number): PartitionValueDefContext | null;
    public partitionValueDef(i?: number): PartitionValueDefContext[] | PartitionValueDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValueDefContext);
        }

        return this.getRuleContext(i, PartitionValueDefContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_partitionValueList;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPartitionValueList) {
             listener.enterPartitionValueList(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPartitionValueList) {
             listener.exitPartitionValueList(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionValueList) {
            return visitor.visitPartitionValueList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValueDefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MAXVALUE, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NULL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_partitionValueDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPartitionValueDef) {
             listener.enterPartitionValueDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPartitionValueDef) {
             listener.exitPartitionValueDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionValueDef) {
            return visitor.visitPartitionValueDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollupDefsContext extends antlr.ParserRuleContext {
    public _rollupDef?: RollupDefContext;
    public _rollups: RollupDefContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rollupDef(): RollupDefContext[];
    public rollupDef(i: number): RollupDefContext | null;
    public rollupDef(i?: number): RollupDefContext[] | RollupDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RollupDefContext);
        }

        return this.getRuleContext(i, RollupDefContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_rollupDefs;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRollupDefs) {
             listener.enterRollupDefs(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRollupDefs) {
             listener.exitRollupDefs(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRollupDefs) {
            return visitor.visitRollupDefs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollupDefContext extends antlr.ParserRuleContext {
    public _rollupName?: IdentifierContext;
    public _rollupCols?: IdentifierListContext;
    public _dupKeys?: IdentifierListContext;
    public _properties?: PropertyClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public DUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DUPLICATE, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.KEY, 0);
    }
    public propertyClause(): PropertyClauseContext | null {
        return this.getRuleContext(0, PropertyClauseContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_rollupDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRollupDef) {
             listener.enterRollupDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRollupDef) {
             listener.exitRollupDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRollupDef) {
            return visitor.visitRollupDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggTypeDefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MAX, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MIN, 0);
    }
    public SUM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SUM, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPLACE, 0);
    }
    public REPLACE_IF_NOT_NULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPLACE_IF_NOT_NULL, 0);
    }
    public HLL_UNION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HLL_UNION, 0);
    }
    public BITMAP_UNION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITMAP_UNION, 0);
    }
    public QUANTILE_UNION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.QUANTILE_UNION, 0);
    }
    public GENERIC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GENERIC, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_aggTypeDef;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAggTypeDef) {
             listener.enterAggTypeDef(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAggTypeDef) {
             listener.exitAggTypeDef(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAggTypeDef) {
            return visitor.visitAggTypeDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TabletListContext extends antlr.ParserRuleContext {
    public _INTEGER_VALUE?: Token | null;
    public _tabletIdList: antlr.Token[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLET(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLET, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(DorisParser.INTEGER_VALUE, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_tabletList;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTabletList) {
             listener.enterTabletList(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTabletList) {
             listener.exitTabletList(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTabletList) {
            return visitor.visitTabletList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InlineTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(DorisParser.VALUES, 0)!;
    }
    public rowConstructor(): RowConstructorContext[];
    public rowConstructor(i: number): RowConstructorContext | null;
    public rowConstructor(i?: number): RowConstructorContext[] | RowConstructorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowConstructorContext);
        }

        return this.getRuleContext(i, RowConstructorContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_inlineTable;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterInlineTable) {
             listener.enterInlineTable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitInlineTable) {
             listener.exitInlineTable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitInlineTable) {
            return visitor.visitInlineTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_namedExpression;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterNamedExpression) {
             listener.enterNamedExpression(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitNamedExpression) {
             listener.exitNamedExpression(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitNamedExpression) {
            return visitor.visitNamedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedExpressionSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedExpression(): NamedExpressionContext[];
    public namedExpression(i: number): NamedExpressionContext | null;
    public namedExpression(i?: number): NamedExpressionContext[] | NamedExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedExpressionContext);
        }

        return this.getRuleContext(i, NamedExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_namedExpressionSeq;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterNamedExpressionSeq) {
             listener.enterNamedExpressionSeq(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitNamedExpressionSeq) {
             listener.exitNamedExpressionSeq(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitNamedExpressionSeq) {
            return visitor.visitNamedExpressionSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public lambdaExpression(): LambdaExpressionContext | null {
        return this.getRuleContext(0, LambdaExpressionContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_expression;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LambdaExpressionContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _args: ErrorCapturingIdentifierContext[] = [];
    public _body?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARROW(): antlr.TerminalNode {
        return this.getToken(DorisParser.ARROW, 0)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_lambdaExpression;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLambdaExpression) {
             listener.enterLambdaExpression(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLambdaExpression) {
             listener.exitLambdaExpression(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLambdaExpression) {
            return visitor.visitLambdaExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_booleanExpression;
    }
    public override copyFrom(ctx: BooleanExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ExistContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(DorisParser.EXISTS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterExist) {
             listener.enterExist(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitExist) {
             listener.exitExist(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitExist) {
            return visitor.visitExist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalNotContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOGICALNOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOGICALNOT, 0);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLogicalNot) {
             listener.enterLogicalNot(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLogicalNot) {
             listener.exitLogicalNot(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicatedContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPredicated) {
             listener.enterPredicated(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPredicated) {
             listener.exitPredicated(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IsnullContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ISNULL, 0);
    }
    public IS_NULL_PRED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IS_NULL_PRED, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIsnull) {
             listener.enterIsnull(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIsnull) {
             listener.exitIsnull(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIsnull) {
            return visitor.visitIsnull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class Is_not_null_predContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IS_NOT_NULL_PRED(): antlr.TerminalNode {
        return this.getToken(DorisParser.IS_NOT_NULL_PRED, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIs_not_null_pred) {
             listener.enterIs_not_null_pred(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIs_not_null_pred) {
             listener.exitIs_not_null_pred(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIs_not_null_pred) {
            return visitor.visitIs_not_null_pred(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalBinaryContext extends BooleanExpressionContext {
    public _left?: BooleanExpressionContext;
    public _operator?: Token | null;
    public _right?: BooleanExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AND, 0);
    }
    public LOGICALAND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOGICALAND, 0);
    }
    public XOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.XOR, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OR, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLogicalBinary) {
             listener.enterLogicalBinary(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLogicalBinary) {
             listener.exitLogicalBinary(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalBinary) {
            return visitor.visitLogicalBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoublePipesContext extends BooleanExpressionContext {
    public _left?: BooleanExpressionContext;
    public _operator?: Token | null;
    public _right?: BooleanExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public DOUBLEPIPES(): antlr.TerminalNode {
        return this.getToken(DorisParser.DOUBLEPIPES, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDoublePipes) {
             listener.enterDoublePipes(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDoublePipes) {
             listener.exitDoublePipes(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDoublePipes) {
            return visitor.visitDoublePipes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowConstructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public rowConstructorItem(): RowConstructorItemContext[];
    public rowConstructorItem(i: number): RowConstructorItemContext | null;
    public rowConstructorItem(i?: number): RowConstructorItemContext[] | RowConstructorItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowConstructorItemContext);
        }

        return this.getRuleContext(i, RowConstructorItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_rowConstructor;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRowConstructor) {
             listener.enterRowConstructor(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRowConstructor) {
             listener.exitRowConstructor(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRowConstructor) {
            return visitor.visitRowConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowConstructorItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedExpression(): NamedExpressionContext | null {
        return this.getRuleContext(0, NamedExpressionContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_rowConstructorItem;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRowConstructorItem) {
             listener.enterRowConstructorItem(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRowConstructorItem) {
             listener.exitRowConstructorItem(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRowConstructorItem) {
            return visitor.visitRowConstructorItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public _pattern?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AND, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BETWEEN, 0);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LIKE, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REGEXP, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RLIKE, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH, 0);
    }
    public MATCH_ANY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_ANY, 0);
    }
    public MATCH_ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_ALL, 0);
    }
    public MATCH_PHRASE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_PHRASE, 0);
    }
    public MATCH_PHRASE_PREFIX(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_PHRASE_PREFIX, 0);
    }
    public MATCH_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_REGEXP, 0);
    }
    public MATCH_PHRASE_EDGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_PHRASE_EDGE, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IN, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IS, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NULL, 0);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_predicate;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPredicate) {
             listener.enterPredicate(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPredicate) {
             listener.exitPredicate(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPredicate) {
            return visitor.visitPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterValueExpressionDefault) {
             listener.enterValueExpressionDefault(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitValueExpressionDefault) {
             listener.exitValueExpressionDefault(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ComparisonContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterComparison) {
             listener.enterComparison(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitComparison) {
             listener.exitComparison(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public HAT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HAT, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SLASH, 0);
    }
    public MOD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MOD, 0);
    }
    public DIV(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DIV, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PLUS, 0);
    }
    public SUBTRACT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SUBTRACT, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AMPERSAND, 0);
    }
    public PIPE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PIPE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterArithmeticBinary) {
             listener.enterArithmeticBinary(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitArithmeticBinary) {
             listener.exitArithmeticBinary(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public SUBTRACT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SUBTRACT, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PLUS, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TILDE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterArithmeticUnary) {
             listener.enterArithmeticUnary(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitArithmeticUnary) {
             listener.exitArithmeticUnary(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.YEAR, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MONTH, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WEEK, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DAY, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HOUR, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MINUTE, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SECOND, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_datetimeUnit;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDatetimeUnit) {
             listener.enterDatetimeUnit(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDatetimeUnit) {
             listener.exitDatetimeUnit(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDatetimeUnit) {
            return visitor.visitDatetimeUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_primaryExpression;
    }
    public override copyFrom(ctx: PrimaryExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class DateCeilContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _timestamp?: ValueExpressionContext;
    public _unitsAmount?: ValueExpressionContext;
    public _unit?: DatetimeUnitContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMA, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public DATE_CEIL(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATE_CEIL, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTERVAL, 0);
    }
    public datetimeUnit(): DatetimeUnitContext | null {
        return this.getRuleContext(0, DatetimeUnitContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDateCeil) {
             listener.enterDateCeil(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDateCeil) {
             listener.exitDateCeil(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDateCeil) {
            return visitor.visitDateCeil(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DereferenceContext extends PrimaryExpressionContext {
    public _base?: PrimaryExpressionContext;
    public _fieldName?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(DorisParser.DOT, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDereference) {
             listener.enterDereference(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDereference) {
             listener.exitDereference(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDereference) {
            return visitor.visitDereference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentDateContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_DATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CURRENT_DATE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCurrentDate) {
             listener.enterCurrentDate(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCurrentDate) {
             listener.exitCurrentDate(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentDate) {
            return visitor.visitCurrentDate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TimestampaddContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _unit?: DatetimeUnitContext;
    public _startTimestamp?: ValueExpressionContext;
    public _endTimestamp?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public datetimeUnit(): DatetimeUnitContext {
        return this.getRuleContext(0, DatetimeUnitContext)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TIMESTAMPADD, 0);
    }
    public DATEADD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATEADD, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTimestampadd) {
             listener.enterTimestampadd(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTimestampadd) {
             listener.exitTimestampadd(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTimestampadd) {
            return visitor.visitTimestampadd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class Date_subContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _timestamp?: ValueExpressionContext;
    public _unitsAmount?: ValueExpressionContext;
    public _unit?: DatetimeUnitContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMA, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public SUBDATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SUBDATE, 0);
    }
    public DAYS_SUB(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DAYS_SUB, 0);
    }
    public DATE_SUB(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE_SUB, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTERVAL, 0);
    }
    public datetimeUnit(): DatetimeUnitContext | null {
        return this.getRuleContext(0, DatetimeUnitContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDate_sub) {
             listener.enterDate_sub(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDate_sub) {
             listener.exitDate_sub(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDate_sub) {
            return visitor.visitDate_sub(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CastContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public castDataType(): CastDataTypeContext {
        return this.getRuleContext(0, CastDataTypeContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(DorisParser.CAST, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCast) {
             listener.enterCast(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCast) {
             listener.exitCast(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCast) {
            return visitor.visitCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterParenthesizedExpression) {
             listener.enterParenthesizedExpression(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitParenthesizedExpression) {
             listener.exitParenthesizedExpression(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedExpression) {
            return visitor.visitParenthesizedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UserVariableContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ATSIGN(): antlr.TerminalNode {
        return this.getToken(DorisParser.ATSIGN, 0)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUserVariable) {
             listener.enterUserVariable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUserVariable) {
             listener.exitUserVariable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUserVariable) {
            return visitor.visitUserVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ElementAtContext extends PrimaryExpressionContext {
    public _value?: PrimaryExpressionContext;
    public _index?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_BRACKET, 0)!;
    }
    public RIGHT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_BRACKET, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterElementAt) {
             listener.enterElementAt(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitElementAt) {
             listener.exitElementAt(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitElementAt) {
            return visitor.visitElementAt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LocalTimestampContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOCALTIMESTAMP(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOCALTIMESTAMP, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLocalTimestamp) {
             listener.enterLocalTimestamp(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLocalTimestamp) {
             listener.exitLocalTimestamp(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLocalTimestamp) {
            return visitor.visitLocalTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CharFunctionContext extends PrimaryExpressionContext {
    public _expression?: ExpressionContext;
    public _arguments: ExpressionContext[] = [];
    public _charSet?: IdentifierOrTextContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CHAR(): antlr.TerminalNode {
        return this.getToken(DorisParser.CHAR, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.USING, 0);
    }
    public identifierOrText(): IdentifierOrTextContext | null {
        return this.getRuleContext(0, IdentifierOrTextContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCharFunction) {
             listener.enterCharFunction(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCharFunction) {
             listener.exitCharFunction(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCharFunction) {
            return visitor.visitCharFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIntervalLiteral) {
             listener.enterIntervalLiteral(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIntervalLiteral) {
             listener.exitIntervalLiteral(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalLiteral) {
            return visitor.visitIntervalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayRangeContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _start?: ValueExpressionContext;
    public _end?: ValueExpressionContext;
    public _unitsAmount?: ValueExpressionContext;
    public _unit?: DatetimeUnitContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public ARRAY_RANGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ARRAY_RANGE, 0);
    }
    public SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SEQUENCE, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTERVAL, 0);
    }
    public datetimeUnit(): DatetimeUnitContext | null {
        return this.getRuleContext(0, DatetimeUnitContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterArrayRange) {
             listener.enterArrayRange(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitArrayRange) {
             listener.exitArrayRange(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitArrayRange) {
            return visitor.visitArrayRange(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleCaseContext extends PrimaryExpressionContext {
    public _value?: ExpressionContext;
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(DorisParser.END, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ELSE, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSimpleCase) {
             listener.enterSimpleCase(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSimpleCase) {
             listener.exitSimpleCase(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleCase) {
            return visitor.visitSimpleCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnReferenceContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BINARY, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterColumnReference) {
             listener.enterColumnReference(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitColumnReference) {
             listener.exitColumnReference(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitColumnReference) {
            return visitor.visitColumnReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StarContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(DorisParser.ASTERISK, 0)!;
    }
    public exceptOrReplace(): ExceptOrReplaceContext[];
    public exceptOrReplace(i: number): ExceptOrReplaceContext | null;
    public exceptOrReplace(i?: number): ExceptOrReplaceContext[] | ExceptOrReplaceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExceptOrReplaceContext);
        }

        return this.getRuleContext(i, ExceptOrReplaceContext);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DOT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterStar) {
             listener.enterStar(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitStar) {
             listener.exitStar(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitStar) {
            return visitor.visitStar(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SessionUserContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SESSION_USER(): antlr.TerminalNode {
        return this.getToken(DorisParser.SESSION_USER, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSessionUser) {
             listener.enterSessionUser(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSessionUser) {
             listener.exitSessionUser(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSessionUser) {
            return visitor.visitSessionUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConvertTypeContext extends PrimaryExpressionContext {
    public _argument?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT(): antlr.TerminalNode {
        return this.getToken(DorisParser.CONVERT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMA, 0)!;
    }
    public castDataType(): CastDataTypeContext {
        return this.getRuleContext(0, CastDataTypeContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterConvertType) {
             listener.enterConvertType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitConvertType) {
             listener.exitConvertType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitConvertType) {
            return visitor.visitConvertType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TimestampdiffContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _unit?: DatetimeUnitContext;
    public _startTimestamp?: ValueExpressionContext;
    public _endTimestamp?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public datetimeUnit(): DatetimeUnitContext {
        return this.getRuleContext(0, DatetimeUnitContext)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TIMESTAMPDIFF, 0);
    }
    public DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATEDIFF, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTimestampdiff) {
             listener.enterTimestampdiff(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTimestampdiff) {
             listener.exitTimestampdiff(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTimestampdiff) {
            return visitor.visitTimestampdiff(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConvertCharSetContext extends PrimaryExpressionContext {
    public _argument?: ExpressionContext;
    public _charSet?: IdentifierOrTextContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT(): antlr.TerminalNode {
        return this.getToken(DorisParser.CONVERT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(DorisParser.USING, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifierOrText(): IdentifierOrTextContext {
        return this.getRuleContext(0, IdentifierOrTextContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterConvertCharSet) {
             listener.enterConvertCharSet(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitConvertCharSet) {
             listener.exitConvertCharSet(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitConvertCharSet) {
            return visitor.visitConvertCharSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubqueryExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSubqueryExpression) {
             listener.enterSubqueryExpression(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSubqueryExpression) {
             listener.exitSubqueryExpression(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryExpression) {
            return visitor.visitSubqueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class EncryptKeyContext extends PrimaryExpressionContext {
    public _dbName?: IdentifierContext;
    public _keyName?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(DorisParser.KEY, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DOT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterEncryptKey) {
             listener.enterEncryptKey(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitEncryptKey) {
             listener.exitEncryptKey(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitEncryptKey) {
            return visitor.visitEncryptKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class Date_addContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _timestamp?: ValueExpressionContext;
    public _unitsAmount?: ValueExpressionContext;
    public _unit?: DatetimeUnitContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMA, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public ADDDATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ADDDATE, 0);
    }
    public DAYS_ADD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DAYS_ADD, 0);
    }
    public DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE_ADD, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTERVAL, 0);
    }
    public datetimeUnit(): DatetimeUnitContext | null {
        return this.getRuleContext(0, DatetimeUnitContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDate_add) {
             listener.enterDate_add(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDate_add) {
             listener.exitDate_add(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDate_add) {
            return visitor.visitDate_add(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentTimeContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_TIME(): antlr.TerminalNode {
        return this.getToken(DorisParser.CURRENT_TIME, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCurrentTime) {
             listener.enterCurrentTime(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCurrentTime) {
             listener.exitCurrentTime(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentTime) {
            return visitor.visitCurrentTime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LocalTimeContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOCALTIME(): antlr.TerminalNode {
        return this.getToken(DorisParser.LOCALTIME, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterLocalTime) {
             listener.enterLocalTime(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitLocalTime) {
             listener.exitLocalTime(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitLocalTime) {
            return visitor.visitLocalTime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SystemVariableContext extends PrimaryExpressionContext {
    public _kind?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOUBLEATSIGN(): antlr.TerminalNode {
        return this.getToken(DorisParser.DOUBLEATSIGN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DOT, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSystemVariable) {
             listener.enterSystemVariable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSystemVariable) {
             listener.exitSystemVariable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSystemVariable) {
            return visitor.visitSystemVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CollateContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public COLLATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLLATE, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFAULT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCollate) {
             listener.enterCollate(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCollate) {
             listener.exitCollate(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCollate) {
            return visitor.visitCollate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentUserContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_USER(): antlr.TerminalNode {
        return this.getToken(DorisParser.CURRENT_USER, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCurrentUser) {
             listener.enterCurrentUser(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCurrentUser) {
             listener.exitCurrentUser(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentUser) {
            return visitor.visitCurrentUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConstantDefaultContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public constant(): ConstantContext {
        return this.getRuleContext(0, ConstantContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterConstantDefault) {
             listener.enterConstantDefault(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitConstantDefault) {
             listener.exitConstantDefault(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitConstantDefault) {
            return visitor.visitConstantDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExtractContext extends PrimaryExpressionContext {
    public _field?: IdentifierContext;
    public _source?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXTRACT(): antlr.TerminalNode {
        return this.getToken(DorisParser.EXTRACT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(DorisParser.FROM, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TIMESTAMP, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterExtract) {
             listener.enterExtract(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitExtract) {
             listener.exitExtract(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitExtract) {
            return visitor.visitExtract(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentTimestampContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode {
        return this.getToken(DorisParser.CURRENT_TIMESTAMP, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCurrentTimestamp) {
             listener.enterCurrentTimestamp(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCurrentTimestamp) {
             listener.exitCurrentTimestamp(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentTimestamp) {
            return visitor.visitCurrentTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionCallExpression(): FunctionCallExpressionContext {
        return this.getRuleContext(0, FunctionCallExpressionContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFunctionCall) {
             listener.enterFunctionCall(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFunctionCall) {
             listener.exitFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArraySliceContext extends PrimaryExpressionContext {
    public _value?: PrimaryExpressionContext;
    public _begin?: ValueExpressionContext;
    public _end?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_BRACKET, 0)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLON, 0)!;
    }
    public RIGHT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_BRACKET, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterArraySlice) {
             listener.enterArraySlice(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitArraySlice) {
             listener.exitArraySlice(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitArraySlice) {
            return visitor.visitArraySlice(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BitOperationContext extends PrimaryExpressionContext {
    public _operator?: Token | null;
    public _left?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMA, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public BITAND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITAND, 0);
    }
    public BITOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITOR, 0);
    }
    public BITXOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITXOR, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterBitOperation) {
             listener.enterBitOperation(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitBitOperation) {
             listener.exitBitOperation(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitBitOperation) {
            return visitor.visitBitOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DateFloorContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _timestamp?: ValueExpressionContext;
    public _unitsAmount?: ValueExpressionContext;
    public _unit?: DatetimeUnitContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMA, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public DATE_FLOOR(): antlr.TerminalNode {
        return this.getToken(DorisParser.DATE_FLOOR, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTERVAL, 0);
    }
    public datetimeUnit(): DatetimeUnitContext | null {
        return this.getRuleContext(0, DatetimeUnitContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDateFloor) {
             listener.enterDateFloor(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDateFloor) {
             listener.exitDateFloor(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDateFloor) {
            return visitor.visitDateFloor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseContext extends PrimaryExpressionContext {
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(DorisParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(DorisParser.END, 0)!;
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ELSE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSearchedCase) {
             listener.enterSearchedCase(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSearchedCase) {
             listener.exitSearchedCase(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSearchedCase) {
            return visitor.visitSearchedCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExceptOrReplaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_exceptOrReplace;
    }
    public override copyFrom(ctx: ExceptOrReplaceContext): void {
        super.copyFrom(ctx);
    }
}
export class ReplaceContext extends ExceptOrReplaceContext {
    public constructor(ctx: ExceptOrReplaceContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(DorisParser.REPLACE, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterReplace) {
             listener.enterReplace(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitReplace) {
             listener.exitReplace(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitReplace) {
            return visitor.visitReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExceptContext extends ExceptOrReplaceContext {
    public constructor(ctx: ExceptOrReplaceContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXCEPT(): antlr.TerminalNode {
        return this.getToken(DorisParser.EXCEPT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterExcept) {
             listener.enterExcept(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitExcept) {
             listener.exitExcept(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitExcept) {
            return visitor.visitExcept(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CastDataTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public SIGNED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SIGNED, 0);
    }
    public UNSIGNED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UNSIGNED, 0);
    }
    public INT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INT, 0);
    }
    public INTEGER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_castDataType;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCastDataType) {
             listener.enterCastDataType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCastDataType) {
             listener.exitCastDataType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCastDataType) {
            return visitor.visitCastDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionCallExpressionContext extends antlr.ParserRuleContext {
    public _expression?: ExpressionContext;
    public _arguments: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionIdentifier(): FunctionIdentifierContext {
        return this.getRuleContext(0, FunctionIdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OVER, 0);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(0, WindowSpecContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BY, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DISTINCT, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_functionCallExpression;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFunctionCallExpression) {
             listener.enterFunctionCallExpression(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFunctionCallExpression) {
             listener.exitFunctionCallExpression(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionCallExpression) {
            return visitor.visitFunctionCallExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionIdentifierContext extends antlr.ParserRuleContext {
    public _dbName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionNameIdentifier(): FunctionNameIdentifierContext {
        return this.getRuleContext(0, FunctionNameIdentifierContext)!;
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DOT, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_functionIdentifier;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFunctionIdentifier) {
             listener.enterFunctionIdentifier(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFunctionIdentifier) {
             listener.exitFunctionIdentifier(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionIdentifier) {
            return visitor.visitFunctionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ADD, 0);
    }
    public CONNECTION_ID(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONNECTION_ID, 0);
    }
    public CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CURRENT_CATALOG, 0);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CURRENT_USER, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATABASE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IF, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LIKE, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REGEXP, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SCHEMA, 0);
    }
    public SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION_USER, 0);
    }
    public TRIM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TRIM, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.USER, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_functionNameIdentifier;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFunctionNameIdentifier) {
             listener.enterFunctionNameIdentifier(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFunctionNameIdentifier) {
             listener.exitFunctionNameIdentifier(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameIdentifier) {
            return visitor.visitFunctionNameIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_windowSpec;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWindowSpec) {
             listener.enterWindowSpec(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWindowSpec) {
             listener.exitWindowSpec(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWindowSpec) {
            return visitor.visitWindowSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public _start?: FrameBoundaryContext;
    public _end?: FrameBoundaryContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frameUnits(): FrameUnitsContext {
        return this.getRuleContext(0, FrameUnitsContext)!;
    }
    public frameBoundary(): FrameBoundaryContext[];
    public frameBoundary(i: number): FrameBoundaryContext | null;
    public frameBoundary(i?: number): FrameBoundaryContext[] | FrameBoundaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundaryContext);
        }

        return this.getRuleContext(i, FrameBoundaryContext);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BETWEEN, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AND, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_windowFrame;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWindowFrame) {
             listener.enterWindowFrame(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWindowFrame) {
             listener.exitWindowFrame(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameUnitsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROWS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RANGE, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_frameUnits;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFrameUnits) {
             listener.enterFrameUnits(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFrameUnits) {
             listener.exitFrameUnits(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFrameUnits) {
            return visitor.visitFrameUnits(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundaryContext extends antlr.ParserRuleContext {
    public _boundType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UNBOUNDED, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FOLLOWING, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROW, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CURRENT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_frameBoundary;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterFrameBoundary) {
             listener.enterFrameBoundary(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitFrameBoundary) {
             listener.exitFrameBoundary(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBoundary) {
            return visitor.visitFrameBoundary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.DOT);
    	} else {
    		return this.getToken(DorisParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_qualifiedName;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpecifiedPartitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITION, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TEMPORARY, 0);
    }
    public PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITIONS, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_specifiedPartition;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSpecifiedPartition) {
             listener.enterSpecifiedPartition(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSpecifiedPartition) {
             listener.exitSpecifiedPartition(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSpecifiedPartition) {
            return visitor.visitSpecifiedPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_constant;
    }
    public override copyFrom(ctx: ConstantContext): void {
        super.copyFrom(ctx);
    }
}
export class StructLiteralContext extends ConstantContext {
    public _constant?: ConstantContext;
    public _items: ConstantContext[] = [];
    public constructor(ctx: ConstantContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_BRACE, 0)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_BRACE, 0)!;
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterStructLiteral) {
             listener.enterStructLiteral(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitStructLiteral) {
             listener.exitStructLiteral(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitStructLiteral) {
            return visitor.visitStructLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullLiteralContext extends ConstantContext {
    public constructor(ctx: ConstantContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NULL(): antlr.TerminalNode {
        return this.getToken(DorisParser.NULL, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterNullLiteral) {
             listener.enterNullLiteral(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitNullLiteral) {
             listener.exitNullLiteral(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitNullLiteral) {
            return visitor.visitNullLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StringLiteralContext extends ConstantContext {
    public constructor(ctx: ConstantContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BINARY, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterStringLiteral) {
             listener.enterStringLiteral(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitStringLiteral) {
             listener.exitStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitStringLiteral) {
            return visitor.visitStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeConstructorContext extends ConstantContext {
    public _type_?: Token | null;
    public constructor(ctx: ConstantContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE, 0);
    }
    public DATEV1(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATEV1, 0);
    }
    public DATEV2(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATEV2, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TIMESTAMP, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTypeConstructor) {
             listener.enterTypeConstructor(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTypeConstructor) {
             listener.exitTypeConstructor(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTypeConstructor) {
            return visitor.visitTypeConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayLiteralContext extends ConstantContext {
    public _constant?: ConstantContext;
    public _items: ConstantContext[] = [];
    public constructor(ctx: ConstantContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_BRACKET, 0)!;
    }
    public RIGHT_BRACKET(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterArrayLiteral) {
             listener.enterArrayLiteral(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitArrayLiteral) {
             listener.exitArrayLiteral(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitArrayLiteral) {
            return visitor.visitArrayLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PlaceholderContext extends ConstantContext {
    public constructor(ctx: ConstantContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PLACEHOLDER(): antlr.TerminalNode {
        return this.getToken(DorisParser.PLACEHOLDER, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPlaceholder) {
             listener.enterPlaceholder(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPlaceholder) {
             listener.exitPlaceholder(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPlaceholder) {
            return visitor.visitPlaceholder(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MapLiteralContext extends ConstantContext {
    public _constant?: ConstantContext;
    public _items: ConstantContext[] = [];
    public constructor(ctx: ConstantContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_BRACE, 0)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_BRACE, 0)!;
    }
    public COLON(): antlr.TerminalNode[];
    public COLON(i: number): antlr.TerminalNode | null;
    public COLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COLON);
    	} else {
    		return this.getToken(DorisParser.COLON, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterMapLiteral) {
             listener.enterMapLiteral(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitMapLiteral) {
             listener.exitMapLiteral(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitMapLiteral) {
            return visitor.visitMapLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NumericLiteralContext extends ConstantContext {
    public constructor(ctx: ConstantContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterNumericLiteral) {
             listener.enterNumericLiteral(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitNumericLiteral) {
             listener.exitNumericLiteral(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitNumericLiteral) {
            return visitor.visitNumericLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BooleanLiteralContext extends ConstantContext {
    public constructor(ctx: ConstantContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanValue(): BooleanValueContext {
        return this.getRuleContext(0, BooleanValueContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterBooleanLiteral) {
             listener.enterBooleanLiteral(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitBooleanLiteral) {
             listener.exitBooleanLiteral(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EQ, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NEQ, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LT, 0);
    }
    public LTE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LTE, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GT, 0);
    }
    public GTE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GTE, 0);
    }
    public NSEQ(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NSEQ, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_booleanValue;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterBooleanValue) {
             listener.enterBooleanValue(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitBooleanValue) {
             listener.exitBooleanValue(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(DorisParser.WHEN, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(DorisParser.THEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_whenClause;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterWhenClause) {
             listener.enterWhenClause(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitWhenClause) {
             listener.exitWhenClause(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public _value?: ExpressionContext;
    public _unit?: UnitIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTERVAL, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public unitIdentifier(): UnitIdentifierContext {
        return this.getRuleContext(0, UnitIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_interval;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.YEAR, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MONTH, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WEEK, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DAY, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HOUR, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MINUTE, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SECOND, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_unitIdentifier;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUnitIdentifier) {
             listener.enterUnitIdentifier(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUnitIdentifier) {
             listener.exitUnitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUnitIdentifier) {
            return visitor.visitUnitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeWithNullableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NULL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_dataTypeWithNullable;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDataTypeWithNullable) {
             listener.enterDataTypeWithNullable(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDataTypeWithNullable) {
             listener.exitDataTypeWithNullable(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDataTypeWithNullable) {
            return visitor.visitDataTypeWithNullable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_dataType;
    }
    public override copyFrom(ctx: DataTypeContext): void {
        super.copyFrom(ctx);
    }
}
export class ComplexDataTypeContext extends DataTypeContext {
    public _complex?: Token | null;
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LT(): antlr.TerminalNode {
        return this.getToken(DorisParser.LT, 0)!;
    }
    public dataType(): DataTypeContext[];
    public dataType(i: number): DataTypeContext | null;
    public dataType(i?: number): DataTypeContext[] | DataTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeContext);
        }

        return this.getRuleContext(i, DataTypeContext);
    }
    public GT(): antlr.TerminalNode {
        return this.getToken(DorisParser.GT, 0)!;
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ARRAY, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMA, 0);
    }
    public MAP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MAP, 0);
    }
    public complexColTypeList(): ComplexColTypeListContext | null {
        return this.getRuleContext(0, ComplexColTypeListContext);
    }
    public STRUCT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRUCT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterComplexDataType) {
             listener.enterComplexDataType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitComplexDataType) {
             listener.exitComplexDataType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitComplexDataType) {
            return visitor.visitComplexDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AggStateDataTypeContext extends DataTypeContext {
    public _dataTypeWithNullable?: DataTypeWithNullableContext;
    public _dataTypes: DataTypeWithNullableContext[] = [];
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AGG_STATE(): antlr.TerminalNode {
        return this.getToken(DorisParser.AGG_STATE, 0)!;
    }
    public LT(): antlr.TerminalNode {
        return this.getToken(DorisParser.LT, 0)!;
    }
    public functionNameIdentifier(): FunctionNameIdentifierContext {
        return this.getRuleContext(0, FunctionNameIdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public GT(): antlr.TerminalNode {
        return this.getToken(DorisParser.GT, 0)!;
    }
    public dataTypeWithNullable(): DataTypeWithNullableContext[];
    public dataTypeWithNullable(i: number): DataTypeWithNullableContext | null;
    public dataTypeWithNullable(i?: number): DataTypeWithNullableContext[] | DataTypeWithNullableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeWithNullableContext);
        }

        return this.getRuleContext(i, DataTypeWithNullableContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterAggStateDataType) {
             listener.enterAggStateDataType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitAggStateDataType) {
             listener.exitAggStateDataType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitAggStateDataType) {
            return visitor.visitAggStateDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrimitiveDataTypeContext extends DataTypeContext {
    public constructor(ctx: DataTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primitiveColType(): PrimitiveColTypeContext {
        return this.getRuleContext(0, PrimitiveColTypeContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_PAREN, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(DorisParser.INTEGER_VALUE, i);
    	}
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ASTERISK, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPrimitiveDataType) {
             listener.enterPrimitiveDataType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPrimitiveDataType) {
             listener.exitPrimitiveDataType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPrimitiveDataType) {
            return visitor.visitPrimitiveDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimitiveColTypeContext extends antlr.ParserRuleContext {
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TINYINT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TINYINT, 0);
    }
    public SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SMALLINT, 0);
    }
    public INT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INT, 0);
    }
    public INTEGER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER, 0);
    }
    public BIGINT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BIGINT, 0);
    }
    public LARGEINT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LARGEINT, 0);
    }
    public BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BOOLEAN, 0);
    }
    public FLOAT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FLOAT, 0);
    }
    public DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DOUBLE, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE, 0);
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATETIME, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TIME, 0);
    }
    public DATEV2(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATEV2, 0);
    }
    public DATETIMEV2(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATETIMEV2, 0);
    }
    public DATEV1(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATEV1, 0);
    }
    public DATETIMEV1(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATETIMEV1, 0);
    }
    public BITMAP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITMAP, 0);
    }
    public QUANTILE_STATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.QUANTILE_STATE, 0);
    }
    public HLL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HLL, 0);
    }
    public AGG_STATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AGG_STATE, 0);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.JSON, 0);
    }
    public JSONB(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.JSONB, 0);
    }
    public TEXT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TEXT, 0);
    }
    public VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VARCHAR, 0);
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHAR, 0);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DECIMAL, 0);
    }
    public DECIMALV2(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DECIMALV2, 0);
    }
    public DECIMALV3(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DECIMALV3, 0);
    }
    public IPV4(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IPV4, 0);
    }
    public IPV6(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IPV6, 0);
    }
    public VARIANT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VARIANT, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_primitiveColType;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterPrimitiveColType) {
             listener.enterPrimitiveColType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitPrimitiveColType) {
             listener.exitPrimitiveColType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitPrimitiveColType) {
            return visitor.visitPrimitiveColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComplexColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public complexColType(): ComplexColTypeContext[];
    public complexColType(i: number): ComplexColTypeContext | null;
    public complexColType(i?: number): ComplexColTypeContext[] | ComplexColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ComplexColTypeContext);
        }

        return this.getRuleContext(i, ComplexColTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.COMMA);
    	} else {
    		return this.getToken(DorisParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_complexColTypeList;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterComplexColTypeList) {
             listener.enterComplexColTypeList(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitComplexColTypeList) {
             listener.exitComplexColTypeList(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitComplexColTypeList) {
            return visitor.visitComplexColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComplexColTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(DorisParser.COLON, 0)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_complexColType;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterComplexColType) {
             listener.enterComplexColType(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitComplexColType) {
             listener.exitComplexColType(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitComplexColType) {
            return visitor.visitComplexColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommentSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(DorisParser.COMMENT, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(DorisParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_commentSpec;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterCommentSpec) {
             listener.enterCommentSpec(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitCommentSpec) {
             listener.exitCommentSpec(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitCommentSpec) {
            return visitor.visitCommentSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleContext extends antlr.ParserRuleContext {
    public _seed?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(DorisParser.TABLESAMPLE, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(DorisParser.RIGHT_PAREN, 0)!;
    }
    public sampleMethod(): SampleMethodContext | null {
        return this.getRuleContext(0, SampleMethodContext);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPEATABLE, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_sample;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSample) {
             listener.enterSample(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSample) {
             listener.exitSample(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSample) {
            return visitor.visitSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_sampleMethod;
    }
    public override copyFrom(ctx: SampleMethodContext): void {
        super.copyFrom(ctx);
    }
}
export class SampleByRowsContext extends SampleMethodContext {
    public constructor(ctx: SampleMethodContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public ROWS(): antlr.TerminalNode {
        return this.getToken(DorisParser.ROWS, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSampleByRows) {
             listener.enterSampleByRows(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSampleByRows) {
             listener.exitSampleByRows(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSampleByRows) {
            return visitor.visitSampleByRows(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SampleByPercentileContext extends SampleMethodContext {
    public _percentage?: Token | null;
    public constructor(ctx: SampleMethodContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PERCENT(): antlr.TerminalNode {
        return this.getToken(DorisParser.PERCENT, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterSampleByPercentile) {
             listener.enterSampleByPercentile(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitSampleByPercentile) {
             listener.exitSampleByPercentile(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitSampleByPercentile) {
            return visitor.visitSampleByPercentile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSnapshotContext extends antlr.ParserRuleContext {
    public _version?: Token | null;
    public _time?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(DorisParser.FOR, 0)!;
    }
    public VERSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VERSION, 0);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(DorisParser.AS, 0)!;
    }
    public OF(): antlr.TerminalNode {
        return this.getToken(DorisParser.OF, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INTEGER_VALUE, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TIME, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_tableSnapshot;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterTableSnapshot) {
             listener.enterTableSnapshot(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitTableSnapshot) {
             listener.exitTableSnapshot(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitTableSnapshot) {
            return visitor.visitTableSnapshot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierExtraContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_errorCapturingIdentifier;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterErrorCapturingIdentifier) {
             listener.enterErrorCapturingIdentifier(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitErrorCapturingIdentifier) {
             listener.exitErrorCapturingIdentifier(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingIdentifier) {
            return visitor.visitErrorCapturingIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierExtraContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_errorCapturingIdentifierExtra;
    }
    public override copyFrom(ctx: ErrorCapturingIdentifierExtraContext): void {
        super.copyFrom(ctx);
    }
}
export class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
    public constructor(ctx: ErrorCapturingIdentifierExtraContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SUBTRACT(): antlr.TerminalNode[];
    public SUBTRACT(i: number): antlr.TerminalNode | null;
    public SUBTRACT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(DorisParser.SUBTRACT);
    	} else {
    		return this.getToken(DorisParser.SUBTRACT, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterErrorIdent) {
             listener.enterErrorIdent(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitErrorIdent) {
             listener.exitErrorIdent(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitErrorIdent) {
            return visitor.visitErrorIdent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RealIdentContext extends ErrorCapturingIdentifierExtraContext {
    public constructor(ctx: ErrorCapturingIdentifierExtraContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterRealIdent) {
             listener.enterRealIdent(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitRealIdent) {
             listener.exitRealIdent(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitRealIdent) {
            return visitor.visitRealIdent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public strictIdentifier(): StrictIdentifierContext {
        return this.getRuleContext(0, StrictIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_identifier;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StrictIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_strictIdentifier;
    }
    public override copyFrom(ctx: StrictIdentifierContext): void {
        super.copyFrom(ctx);
    }
}
export class QuotedIdentifierAlternativeContext extends StrictIdentifierContext {
    public constructor(ctx: StrictIdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public quotedIdentifier(): QuotedIdentifierContext {
        return this.getRuleContext(0, QuotedIdentifierContext)!;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterQuotedIdentifierAlternative) {
             listener.enterQuotedIdentifierAlternative(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitQuotedIdentifierAlternative) {
             listener.exitQuotedIdentifierAlternative(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifierAlternative) {
            return visitor.visitQuotedIdentifierAlternative(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnquotedIdentifierContext extends StrictIdentifierContext {
    public constructor(ctx: StrictIdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IDENTIFIER, 0);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterUnquotedIdentifier) {
             listener.enterUnquotedIdentifier(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitUnquotedIdentifier) {
             listener.exitUnquotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitUnquotedIdentifier) {
            return visitor.visitUnquotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotedIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(DorisParser.BACKQUOTED_IDENTIFIER, 0)!;
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_quotedIdentifier;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterQuotedIdentifier) {
             listener.enterQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitQuotedIdentifier) {
             listener.exitQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifier) {
            return visitor.visitQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_number;
    }
    public override copyFrom(ctx: NumberContext): void {
        super.copyFrom(ctx);
    }
}
export class DecimalLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPONENT_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXPONENT_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DECIMAL_VALUE, 0);
    }
    public SUBTRACT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SUBTRACT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterDecimalLiteral) {
             listener.enterDecimalLiteral(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitDecimalLiteral) {
             listener.exitDecimalLiteral(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitDecimalLiteral) {
            return visitor.visitDecimalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntegerLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(DorisParser.INTEGER_VALUE, 0)!;
    }
    public SUBTRACT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SUBTRACT, 0);
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterIntegerLiteral) {
             listener.enterIntegerLiteral(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitIntegerLiteral) {
             listener.exitIntegerLiteral(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitIntegerLiteral) {
            return visitor.visitIntegerLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACTIONS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ACTIONS, 0);
    }
    public ADDDATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ADDDATE, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AFTER, 0);
    }
    public AGG_STATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AGG_STATE, 0);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AGGREGATE, 0);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALIAS, 0);
    }
    public ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ALWAYS, 0);
    }
    public ANALYZED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ANALYZED, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ARRAY, 0);
    }
    public ARRAY_RANGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ARRAY_RANGE, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AT, 0);
    }
    public AUTHORS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTHORS, 0);
    }
    public AUTO_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.AUTO_INCREMENT, 0);
    }
    public BACKENDS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BACKENDS, 0);
    }
    public BACKUP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BACKUP, 0);
    }
    public BEGIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BEGIN, 0);
    }
    public BELONG(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BELONG, 0);
    }
    public BIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BIN, 0);
    }
    public BITAND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITAND, 0);
    }
    public BITMAP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITMAP, 0);
    }
    public BITMAP_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITMAP_EMPTY, 0);
    }
    public BITMAP_UNION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITMAP_UNION, 0);
    }
    public BITOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITOR, 0);
    }
    public BITXOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BITXOR, 0);
    }
    public BLOB(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BLOB, 0);
    }
    public BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BOOLEAN, 0);
    }
    public BRIEF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BRIEF, 0);
    }
    public BROKER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BROKER, 0);
    }
    public BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BUCKETS, 0);
    }
    public BUILD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BUILD, 0);
    }
    public BUILTIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BUILTIN, 0);
    }
    public BULK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.BULK, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CACHE, 0);
    }
    public CACHED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CACHED, 0);
    }
    public CALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CALL, 0);
    }
    public CATALOG(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CATALOG, 0);
    }
    public CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CATALOGS, 0);
    }
    public CHAIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHAIN, 0);
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHAR, 0);
    }
    public CHARSET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHARSET, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CHECK, 0);
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CLUSTER, 0);
    }
    public CLUSTERS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CLUSTERS, 0);
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COLLATION, 0);
    }
    public COLLECT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COLLECT, 0);
    }
    public COLOCATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COLOCATE, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COLUMNS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT, 0);
    }
    public COMMENT_START(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMENT_START, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMIT, 0);
    }
    public COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMMITTED, 0);
    }
    public COMPACT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMPACT, 0);
    }
    public COMPLETE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMPLETE, 0);
    }
    public COMPRESS_TYPE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMPRESS_TYPE, 0);
    }
    public COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COMPUTE, 0);
    }
    public CONDITIONS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONDITIONS, 0);
    }
    public CONFIG(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONFIG, 0);
    }
    public CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONNECTION, 0);
    }
    public CONNECTION_ID(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONNECTION_ID, 0);
    }
    public CONSISTENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONSISTENT, 0);
    }
    public CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONSTRAINTS, 0);
    }
    public CONVERT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONVERT, 0);
    }
    public CONVERT_LSC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CONVERT_LSC, 0);
    }
    public COPY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COPY, 0);
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.COUNT, 0);
    }
    public CREATION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CREATION, 0);
    }
    public CRON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CRON, 0);
    }
    public CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CURRENT_CATALOG, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CURRENT_TIME, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CURRENT_TIMESTAMP, 0);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.CURRENT_USER, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATA, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE, 0);
    }
    public DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE_ADD, 0);
    }
    public DATE_CEIL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE_CEIL, 0);
    }
    public DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE_DIFF, 0);
    }
    public DATE_FLOOR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE_FLOOR, 0);
    }
    public DATE_SUB(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATE_SUB, 0);
    }
    public DATEADD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATEADD, 0);
    }
    public DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATEDIFF, 0);
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATETIME, 0);
    }
    public DATETIMEV1(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATETIMEV1, 0);
    }
    public DATETIMEV2(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATETIMEV2, 0);
    }
    public DATEV1(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATEV1, 0);
    }
    public DATEV2(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DATEV2, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DAY, 0);
    }
    public DAYS_ADD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DAYS_ADD, 0);
    }
    public DAYS_SUB(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DAYS_SUB, 0);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DECIMAL, 0);
    }
    public DECIMALV2(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DECIMALV2, 0);
    }
    public DECIMALV3(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DECIMALV3, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEFERRED, 0);
    }
    public DEMAND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DEMAND, 0);
    }
    public DIAGNOSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DIAGNOSE, 0);
    }
    public DIAGNOSIS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DIAGNOSIS, 0);
    }
    public DISTINCTPC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DISTINCTPC, 0);
    }
    public DISTINCTPCSA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DISTINCTPCSA, 0);
    }
    public DO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DO, 0);
    }
    public DORIS_INTERNAL_TABLE_ID(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DORIS_INTERNAL_TABLE_ID, 0);
    }
    public DUAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DUAL, 0);
    }
    public DYNAMIC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.DYNAMIC, 0);
    }
    public E(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.E, 0);
    }
    public ENABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ENABLE, 0);
    }
    public ENCRYPTKEY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ENCRYPTKEY, 0);
    }
    public ENCRYPTKEYS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ENCRYPTKEYS, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.END, 0);
    }
    public ENDS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ENDS, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ENGINE, 0);
    }
    public ENGINES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ENGINES, 0);
    }
    public ERRORS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ERRORS, 0);
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EVENTS, 0);
    }
    public EVERY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EVERY, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXCLUDE, 0);
    }
    public EXPIRED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXPIRED, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.EXTERNAL, 0);
    }
    public FAILED_LOGIN_ATTEMPTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FAILED_LOGIN_ATTEMPTS, 0);
    }
    public FAST(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FAST, 0);
    }
    public FEATURE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FEATURE, 0);
    }
    public FIELDS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FIELDS, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FILE, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FILTER, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FIRST, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FORMAT, 0);
    }
    public FREE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FREE, 0);
    }
    public FRONTENDS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FRONTENDS, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.FUNCTION, 0);
    }
    public GENERATED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GENERATED, 0);
    }
    public GENERIC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GENERIC, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GLOBAL, 0);
    }
    public GRAPH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GRAPH, 0);
    }
    public GROUPING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GROUPING, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.GROUPS, 0);
    }
    public HASH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HASH, 0);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HDFS, 0);
    }
    public HELP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HELP, 0);
    }
    public HINT_END(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HINT_END, 0);
    }
    public HINT_START(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HINT_START, 0);
    }
    public HISTOGRAM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HISTOGRAM, 0);
    }
    public HLL_UNION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HLL_UNION, 0);
    }
    public HOSTNAME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HOSTNAME, 0);
    }
    public HOTSPOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HOTSPOT, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HOUR, 0);
    }
    public HUB(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.HUB, 0);
    }
    public IDENTIFIED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IDENTIFIED, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IGNORE, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IMMEDIATE, 0);
    }
    public INCREMENTAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INCREMENTAL, 0);
    }
    public INDEXES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INDEXES, 0);
    }
    public INVERTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.INVERTED, 0);
    }
    public IPV4(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IPV4, 0);
    }
    public IPV6(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IPV6, 0);
    }
    public IS_NOT_NULL_PRED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IS_NOT_NULL_PRED, 0);
    }
    public IS_NULL_PRED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.IS_NULL_PRED, 0);
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ISNULL, 0);
    }
    public ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ISOLATION, 0);
    }
    public JOB(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.JOB, 0);
    }
    public JOBS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.JOBS, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.JSON, 0);
    }
    public JSONB(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.JSONB, 0);
    }
    public LABEL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LABEL, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LAST, 0);
    }
    public LDAP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LDAP, 0);
    }
    public LDAP_ADMIN_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LDAP_ADMIN_PASSWORD, 0);
    }
    public LEFT_BRACE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEFT_BRACE, 0);
    }
    public LESS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LESS, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LEVEL, 0);
    }
    public LINES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LINES, 0);
    }
    public LINK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LINK, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCAL, 0);
    }
    public LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCALTIME, 0);
    }
    public LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCALTIMESTAMP, 0);
    }
    public LOCATION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCATION, 0);
    }
    public LOCK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOCK, 0);
    }
    public LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.LOGICAL, 0);
    }
    public MANUAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MANUAL, 0);
    }
    public MAP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MAP, 0);
    }
    public MATCH_ALL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_ALL, 0);
    }
    public MATCH_ANY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_ANY, 0);
    }
    public MATCH_PHRASE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_PHRASE, 0);
    }
    public MATCH_PHRASE_EDGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_PHRASE_EDGE, 0);
    }
    public MATCH_PHRASE_PREFIX(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_PHRASE_PREFIX, 0);
    }
    public MATCH_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATCH_REGEXP, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MATERIALIZED, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MAX, 0);
    }
    public MEMO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MEMO, 0);
    }
    public MERGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MERGE, 0);
    }
    public MIGRATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MIGRATE, 0);
    }
    public MIGRATIONS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MIGRATIONS, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MIN, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MINUTE, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MODIFY, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MONTH, 0);
    }
    public MTMV(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.MTMV, 0);
    }
    public NAME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NAME, 0);
    }
    public NAMES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NAMES, 0);
    }
    public NEGATIVE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NEGATIVE, 0);
    }
    public NEVER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NEVER, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NEXT, 0);
    }
    public NGRAM_BF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NGRAM_BF, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NO, 0);
    }
    public NON_NULLABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NON_NULLABLE, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.NULLS, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OF, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OFFSET, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ONLY, 0);
    }
    public OPEN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OPEN, 0);
    }
    public OPTIMIZED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.OPTIMIZED, 0);
    }
    public PARAMETER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARAMETER, 0);
    }
    public PARSED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARSED, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD, 0);
    }
    public PASSWORD_EXPIRE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD_EXPIRE, 0);
    }
    public PASSWORD_HISTORY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD_HISTORY, 0);
    }
    public PASSWORD_LOCK_TIME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD_LOCK_TIME, 0);
    }
    public PASSWORD_REUSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PASSWORD_REUSE, 0);
    }
    public PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PARTITIONS, 0);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PATH, 0);
    }
    public PAUSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PAUSE, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PERCENT, 0);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PERIOD, 0);
    }
    public PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PERMISSIVE, 0);
    }
    public PHYSICAL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PHYSICAL, 0);
    }
    public PI(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PI, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PLAN, 0);
    }
    public PLUGIN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PLUGIN, 0);
    }
    public PLUGINS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PLUGINS, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.POLICY, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PRIVILEGES, 0);
    }
    public PROC(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROC, 0);
    }
    public PROCESS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROCESS, 0);
    }
    public PROCESSLIST(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROCESSLIST, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROFILE, 0);
    }
    public PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROPERTIES, 0);
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.PROPERTY, 0);
    }
    public QUANTILE_STATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.QUANTILE_STATE, 0);
    }
    public QUANTILE_UNION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.QUANTILE_UNION, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.QUERY, 0);
    }
    public QUOTA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.QUOTA, 0);
    }
    public QUALIFY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.QUALIFY, 0);
    }
    public RANDOM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RANDOM, 0);
    }
    public RECENT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RECENT, 0);
    }
    public RECOVER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RECOVER, 0);
    }
    public RECYCLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RECYCLE, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REFRESH, 0);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPEATABLE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPLACE, 0);
    }
    public REPLACE_IF_NOT_NULL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPLACE_IF_NOT_NULL, 0);
    }
    public REPLAYER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPLAYER, 0);
    }
    public REPOSITORIES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPOSITORIES, 0);
    }
    public REPOSITORY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REPOSITORY, 0);
    }
    public RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RESOURCE, 0);
    }
    public RESOURCES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RESOURCES, 0);
    }
    public RESTORE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RESTORE, 0);
    }
    public RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RESTRICTIVE, 0);
    }
    public RESUME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RESUME, 0);
    }
    public RETURNS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RETURNS, 0);
    }
    public REWRITTEN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.REWRITTEN, 0);
    }
    public RIGHT_BRACE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RIGHT_BRACE, 0);
    }
    public RLIKE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.RLIKE, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLLBACK, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROLLUP, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.ROUTINE, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.S3, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SAMPLE, 0);
    }
    public SCHEDULE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SCHEDULE, 0);
    }
    public SCHEDULER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SCHEDULER, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SCHEMA, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SECOND, 0);
    }
    public SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SERIALIZABLE, 0);
    }
    public SET_SESSION_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SET_SESSION_VARIABLE, 0);
    }
    public SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SEQUENCE, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION, 0);
    }
    public SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SESSION_USER, 0);
    }
    public SHAPE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SHAPE, 0);
    }
    public SKEW(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SKEW, 0);
    }
    public SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SNAPSHOT, 0);
    }
    public SONAME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SONAME, 0);
    }
    public SPLIT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SPLIT, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SQL, 0);
    }
    public STAGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STAGE, 0);
    }
    public STAGES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STAGES, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.START, 0);
    }
    public STARTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STARTS, 0);
    }
    public STATS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STATS, 0);
    }
    public STATUS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STATUS, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STOP, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STORAGE, 0);
    }
    public STREAM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STREAM, 0);
    }
    public STREAMING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STREAMING, 0);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRING, 0);
    }
    public STRUCT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.STRUCT, 0);
    }
    public SUBDATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SUBDATE, 0);
    }
    public SUM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.SUM, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TABLES, 0);
    }
    public TASK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TASK, 0);
    }
    public TASKS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TASKS, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TEMPORARY, 0);
    }
    public TEXT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TEXT, 0);
    }
    public THAN(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.THAN, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TIME, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TIMESTAMP, 0);
    }
    public TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TIMESTAMPADD, 0);
    }
    public TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TIMESTAMPDIFF, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TRANSACTION, 0);
    }
    public TREE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TREE, 0);
    }
    public TRIGGERS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TRIGGERS, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TRUNCATE, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TYPE, 0);
    }
    public TYPES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.TYPES, 0);
    }
    public UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UNCOMMITTED, 0);
    }
    public UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UNLOCK, 0);
    }
    public UNSET(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UNSET, 0);
    }
    public UP(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.UP, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.USER, 0);
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VALUE, 0);
    }
    public VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VARCHAR, 0);
    }
    public VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VARIABLE, 0);
    }
    public VARIABLES(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VARIABLES, 0);
    }
    public VARIANT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VARIANT, 0);
    }
    public VAULT(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VAULT, 0);
    }
    public VAULTS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VAULTS, 0);
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VERBOSE, 0);
    }
    public VERSION(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VERSION, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VIEW, 0);
    }
    public VIEWS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.VIEWS, 0);
    }
    public WARM(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WARM, 0);
    }
    public WARNINGS(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WARNINGS, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WEEK, 0);
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.WORK, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(DorisParser.YEAR, 0);
    }
    public override get ruleIndex(): number {
        return DorisParser.RULE_nonReserved;
    }
    public override enterRule(listener: DorisParserListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: DorisParserListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: DorisParserVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
